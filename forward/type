alloc.cu:  size_t siz_icmp = gdcurv->siz_icmp;
alloc.cu:  gdcurv_d->x3d = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->y3d = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->z3d = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->cell_xmin = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->cell_xmax = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->cell_ymin = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->cell_ymax = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->cell_zmin = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  gdcurv_d->cell_zmax = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->x3d, gdcurv->x3d, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->y3d, gdcurv->y3d, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->z3d, gdcurv->z3d, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->cell_xmin, gdcurv->cell_xmin, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->cell_xmax, gdcurv->cell_xmax, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->cell_ymin, gdcurv->cell_ymin, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->cell_ymax, gdcurv->cell_ymax, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->cell_zmin, gdcurv->cell_zmin, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  CUDACHECK(cudaMemcpy(gdcurv_d->cell_zmax, gdcurv->cell_zmax, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  size_t siz_icmp = md->siz_icmp;
alloc.cu:  if (md->medium_type == CONST_MEDIUM_ELASTIC_ISO)
alloc.cu:    md_d->rho    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->lambda = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->mu     = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->rho,    md->rho,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->lambda, md->lambda, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->mu,     md->mu,     sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  if (md->medium_type == CONST_MEDIUM_ELASTIC_VTI)
alloc.cu:    md_d->rho    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c11    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c33    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c55    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c66    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c13    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->rho,    md->rho,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c11,    md->c11,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c33,    md->c33,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c55,    md->c55,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c66,    md->c66,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c13,    md->c13,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  if (md->medium_type == CONST_MEDIUM_ELASTIC_ANISO)
alloc.cu:    md_d->rho    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c11    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c12    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c13    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c14    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c15    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c16    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c22    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c23    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c24    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c25    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c26    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c33    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c34    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c35    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c36    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c44    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c45    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c46    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c55    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c56    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    md_d->c66    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->rho,    md->rho,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c11,    md->c11,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c12,    md->c12,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c13,    md->c13,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c14,    md->c14,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c15,    md->c15,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c16,    md->c16,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c22,    md->c22,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c23,    md->c23,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c24,    md->c24,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c25,    md->c25,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c26,    md->c26,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c33,    md->c33,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c34,    md->c34,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c35,    md->c35,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c36,    md->c36,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c44,    md->c44,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c45,    md->c45,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c46,    md->c46,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c55,    md->c55,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c56,    md->c56,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(md_d->c66,    md->c66,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice));
alloc.cu:  int max_len = fd->fdz_max_len; //=5 
alloc.cu:  fd_device_d->fdx_coef_d    = (float *) cuda_malloc(sizeof(float)*max_len);
alloc.cu:  fd_device_d->fdy_coef_d    = (float *) cuda_malloc(sizeof(float)*max_len);
alloc.cu:  fd_device_d->fdz_coef_d    = (float *) cuda_malloc(sizeof(float)*max_len);
alloc.cu:  fd_device_d->fdx_indx_d    = (int *) cuda_malloc(sizeof(int)*max_len);
alloc.cu:  fd_device_d->fdy_indx_d    = (int *) cuda_malloc(sizeof(int)*max_len);
alloc.cu:  fd_device_d->fdz_indx_d    = (int *) cuda_malloc(sizeof(int)*max_len);
alloc.cu:  fd_device_d->fdx_shift_d    = (int *) cuda_malloc(sizeof(size_t)*max_len);
alloc.cu:  fd_device_d->fdy_shift_d    = (int *) cuda_malloc(sizeof(size_t)*max_len);
alloc.cu:  fd_device_d->fdz_shift_d    = (int *) cuda_malloc(sizeof(size_t)*max_len);
alloc.cu:  size_t siz_icmp = metric->siz_icmp;
alloc.cu:  metric_d->jac     = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->xi_x    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->xi_y    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->xi_z    = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->eta_x   = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->eta_y   = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->eta_z   = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->zeta_x  = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->zeta_y  = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  metric_d->zeta_z  = (float *) cuda_malloc(sizeof(float)*siz_icmp);
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->jac,   metric->jac,     sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->xi_x,  metric->xi_x,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->xi_y,  metric->xi_y,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->xi_z,  metric->xi_z,    sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->eta_x, metric->eta_x,   sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->eta_y, metric->eta_y,   sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->eta_z, metric->eta_z,   sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->zeta_x, metric->zeta_x, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->zeta_y, metric->zeta_y, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(metric_d->zeta_z, metric->zeta_z, sizeof(float)*siz_icmp, cudaMemcpyHostToDevice) );
alloc.cu:  int ny = gdcurv->ny;
alloc.cu:  int nz = gdcurv->nz;
alloc.cu:  FC_d->rho_f = (float *) cuda_malloc(sizeof(float)*ny*nz*2);
alloc.cu:  FC_d->mu_f  = (float *) cuda_malloc(sizeof(float)*ny*nz*2);
alloc.cu:  FC_d->lam_f = (float *) cuda_malloc(sizeof(float)*ny*nz*2);
alloc.cu:  FC_d->D21_1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D22_1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D23_1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D31_1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D32_1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D33_1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D21_2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D22_2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D23_2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D31_2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D32_2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->D33_2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->vec_n  = (float *) cuda_malloc(sizeof(float)*ny*nz*3);
alloc.cu:  FC_d->vec_s1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3);
alloc.cu:  FC_d->vec_s2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3);
alloc.cu:  FC_d->x_et   = (float *) cuda_malloc(sizeof(float)*ny*nz);
alloc.cu:  FC_d->y_et   = (float *) cuda_malloc(sizeof(float)*ny*nz);
alloc.cu:  FC_d->z_et   = (float *) cuda_malloc(sizeof(float)*ny*nz);
alloc.cu:  FC_d->matMin2Plus1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matMin2Plus2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matMin2Plus3 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matMin2Plus4 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matMin2Plus5 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matPlus2Min1 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matPlus2Min2 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matPlus2Min3 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matPlus2Min4 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matPlus2Min5 = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matT1toVx_Min  = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matVytoVx_Min  = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matVztoVx_Min  = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matT1toVx_Plus = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matVytoVx_Plus = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matVztoVx_Plus = (float *) cuda_malloc(sizeof(float)*ny*nz*3*3);
alloc.cu:  FC_d->matVx2Vz1     = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matVy2Vz1     = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matVx2Vz2     = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matVy2Vz2     = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matPlus2Min1f = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matPlus2Min2f = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matPlus2Min3f = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matMin2Plus1f = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matMin2Plus2f = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matMin2Plus3f = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matT1toVxf_Min  = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matVytoVxf_Min  = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matT1toVxf_Plus = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  FC_d->matVytoVxf_Plus = (float *) cuda_malloc(sizeof(float)*ny*3*3);
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->rho_f, FC->rho_f, sizeof(float)*ny*nz*2, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->mu_f,  FC->mu_f,  sizeof(float)*ny*nz*2, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->lam_f, FC->lam_f, sizeof(float)*ny*nz*2, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D21_1, FC->D21_1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D22_1, FC->D22_1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D23_1, FC->D23_1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D31_1, FC->D31_1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D32_1, FC->D32_1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D33_1, FC->D33_1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D21_2, FC->D21_2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D22_2, FC->D22_2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D23_2, FC->D23_2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D31_2, FC->D31_2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D32_2, FC->D32_2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->D33_2, FC->D33_2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->vec_n,  FC->vec_n,  sizeof(float)*ny*nz*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->vec_s1, FC->vec_s1, sizeof(float)*ny*nz*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->vec_s2, FC->vec_s2, sizeof(float)*ny*nz*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->x_et, FC->x_et, sizeof(float)*ny*nz, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->y_et, FC->y_et, sizeof(float)*ny*nz, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->z_et, FC->z_et, sizeof(float)*ny*nz, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus1, FC->matMin2Plus1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus2, FC->matMin2Plus2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus3, FC->matMin2Plus3, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus4, FC->matMin2Plus4, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus5, FC->matMin2Plus5, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min1, FC->matPlus2Min1, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min2, FC->matPlus2Min2, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min3, FC->matPlus2Min3, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min4, FC->matPlus2Min4, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min5, FC->matPlus2Min5, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matT1toVx_Min, FC->matT1toVx_Min, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVytoVx_Min, FC->matVytoVx_Min, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVztoVx_Min, FC->matVztoVx_Min, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matT1toVx_Plus, FC->matT1toVx_Plus, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVytoVx_Plus, FC->matVytoVx_Plus, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVztoVx_Plus, FC->matVztoVx_Plus, sizeof(float)*ny*nz*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVx2Vz1, FC->matVx2Vz1, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVy2Vz1, FC->matVy2Vz1, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVx2Vz2, FC->matVx2Vz2, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVy2Vz2, FC->matVy2Vz2, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min1f, FC->matPlus2Min1f, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min2f, FC->matPlus2Min2f, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matPlus2Min3f, FC->matPlus2Min3f, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus1f, FC->matMin2Plus1f, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus2f, FC->matMin2Plus2f, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matMin2Plus3f, FC->matMin2Plus3f, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matT1toVxf_Min,  FC->matT1toVxf_Min, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVytoVxf_Min,  FC->matVytoVxf_Min, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matT1toVxf_Plus, FC->matT1toVxf_Plus, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(FC_d->matVytoVxf_Plus, FC->matVytoVxf_Plus, sizeof(float)*ny*3*3, cudaMemcpyHostToDevice) );
alloc.cu:  int nj = gdcurv->nj;
alloc.cu:  int nk = gdcurv->nk;
alloc.cu:  F_d->T0x   = (float *) cuda_malloc(sizeof(float)*nj*nk);  // stress_init_x
alloc.cu:  F_d->T0y   = (float *) cuda_malloc(sizeof(float)*nj*nk);  // stress_init_y
alloc.cu:  F_d->T0z   = (float *) cuda_malloc(sizeof(float)*nj*nk);  // stress_init_z
alloc.cu:  F_d->mu_s  = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->mu_d  = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->Dc    = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->C0    = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->Tn         = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->Ts1        = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->Ts2        = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->slip       = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->slip1      = (float *) cuda_malloc(sizeof(float)*nj*nk); 
alloc.cu:  F_d->slip2      = (float *) cuda_malloc(sizeof(float)*nj*nk);  
alloc.cu:  F_d->Vs         = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->Vs1        = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->Vs2        = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->peak_Vs    = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->init_t0    = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->tTn          = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->tTs1         = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->tTs2         = (float *) cuda_malloc(sizeof(float)*nj*nk);
alloc.cu:  F_d->united       = (int *)   cuda_malloc(sizeof(int)*nj*nk);
alloc.cu:  F_d->faultgrid    = (int *)   cuda_malloc(sizeof(int)*nj*nk);
alloc.cu:  F_d->rup_index_y  = (int *)   cuda_malloc(sizeof(int)*nj*nk);
alloc.cu:  F_d->rup_index_z  = (int *)   cuda_malloc(sizeof(int)*nj*nk);
alloc.cu:  F_d->flag_rup     = (int *)   cuda_malloc(sizeof(int)*nj*nk);
alloc.cu:  F_d->init_t0_flag = (int *)   cuda_malloc(sizeof(int)*nj*nk);
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->T0x,  F->T0x,  sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->T0y,  F->T0y,  sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->T0z,  F->T0z,  sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->mu_s, F->mu_s, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->mu_d, F->mu_d, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Dc,   F->Dc,   sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->C0,   F->C0,   sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Tn,    F->Tn,    sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Ts1,   F->Ts1,   sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Ts2,   F->Ts2,   sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->slip,  F->slip,  sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->slip1, F->slip1, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->slip2, F->slip2, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Vs,    F->Vs,    sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Vs1,   F->Vs1,   sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->Vs2,   F->Vs2,   sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->peak_Vs, F->peak_Vs, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->init_t0, F->init_t0, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->tTn,  F->tTn,  sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->tTs1, F->tTs1, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->tTs2, F->tTs2, sizeof(float)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->united,       F->united,       sizeof(int)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->faultgrid,    F->faultgrid,    sizeof(int)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->rup_index_y,  F->rup_index_y,  sizeof(int)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->rup_index_z,  F->rup_index_z,  sizeof(int)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->flag_rup,     F->flag_rup,     sizeof(int)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  CUDACHECK( cudaMemcpy(F_d->init_t0_flag, F->init_t0_flag, sizeof(int)*nj*nk, cudaMemcpyHostToDevice) );
alloc.cu:  int ny = FW->ny;
alloc.cu:  int nz = FW->nz;
alloc.cu:  int nlevel = FW->nlevel;
alloc.cu:  size_t siz_ilevel = FW->siz_ilevel;
alloc.cu:  FW_d->v5d  = (float *) cuda_malloc(sizeof(float)*siz_ilevel*nlevel);
alloc.cu:  FW_d->T1x  = (float *) cuda_malloc(sizeof(float)*7*ny*nz); 
alloc.cu:  FW_d->T1y  = (float *) cuda_malloc(sizeof(float)*7*ny*nz); 
alloc.cu:  FW_d->T1z  = (float *) cuda_malloc(sizeof(float)*7*ny*nz); 
alloc.cu:  FW_d->hT1x = (float *) cuda_malloc(sizeof(float)*ny*nz); 
alloc.cu:  FW_d->hT1y = (float *) cuda_malloc(sizeof(float)*ny*nz); 
alloc.cu:  FW_d->hT1z = (float *) cuda_malloc(sizeof(float)*ny*nz); 
alloc.cu:  FW_d->mT1x = (float *) cuda_malloc(sizeof(float)*ny*nz); 
alloc.cu:  FW_d->mT1y = (float *) cuda_malloc(sizeof(float)*ny*nz); 
alloc.cu:  FW_d->mT1z = (float *) cuda_malloc(sizeof(float)*ny*nz); 
alloc.cu:  CUDACHECK(cudaMemset(FW_d->v5d,  0, sizeof(float)*siz_ilevel*nlevel));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->T1x,  0, sizeof(float)*7*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->T1y,  0, sizeof(float)*7*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->T1z,  0, sizeof(float)*7*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->hT1x, 0, sizeof(float)*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->hT1y, 0, sizeof(float)*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->hT1z, 0, sizeof(float)*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->mT1x, 0, sizeof(float)*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->mT1y, 0, sizeof(float)*ny*nz));
alloc.cu:  CUDACHECK(cudaMemset(FW_d->mT1z, 0, sizeof(float)*ny*nz));
alloc.cu:  int nx = gdcurv->nx;
alloc.cu:  int ny = gdcurv->ny;
alloc.cu:  if (bdryfree->is_at_sides[CONST_NDIM-1][1] == 1)
alloc.cu:    bdryfree_d->matVx2Vz2 = (float *) cuda_malloc(sizeof(float)*nx*ny*CONST_NDIM*CONST_NDIM);
alloc.cu:    bdryfree_d->matVy2Vz2 = (float *) cuda_malloc(sizeof(float)*nx*ny*CONST_NDIM*CONST_NDIM);
alloc.cu:    CUDACHECK(cudaMemcpy(bdryfree_d->matVx2Vz2, bdryfree->matVx2Vz2, sizeof(float)*nx*ny*CONST_NDIM*CONST_NDIM, cudaMemcpyHostToDevice));
alloc.cu:    CUDACHECK(cudaMemcpy(bdryfree_d->matVy2Vz2, bdryfree->matVy2Vz2, sizeof(float)*nx*ny*CONST_NDIM*CONST_NDIM, cudaMemcpyHostToDevice));
alloc.cu:      if(bdrypml_d->is_at_sides[idim][iside] == 1){
alloc.cu:        int npoints = bdrypml_d->num_of_layers[idim][iside] + 1;
alloc.cu:        bdrypml_d->A[idim][iside]   = (float *) cuda_malloc(npoints * sizeof(float));
alloc.cu:        bdrypml_d->B[idim][iside]   = (float *) cuda_malloc(npoints * sizeof(float));
alloc.cu:        bdrypml_d->D[idim][iside]   = (float *) cuda_malloc(npoints * sizeof(float));
alloc.cu:        CUDACHECK(cudaMemcpy(bdrypml_d->A[idim][iside],bdrypml->A[idim][iside],npoints*sizeof(float),cudaMemcpyHostToDevice));
alloc.cu:        CUDACHECK(cudaMemcpy(bdrypml_d->B[idim][iside],bdrypml->B[idim][iside],npoints*sizeof(float),cudaMemcpyHostToDevice));
alloc.cu:        CUDACHECK(cudaMemcpy(bdrypml_d->D[idim][iside],bdrypml->D[idim][iside],npoints*sizeof(float),cudaMemcpyHostToDevice));
alloc.cu:        bdrypml_d->A[idim][iside]   = NULL;
alloc.cu:        bdrypml_d->B[idim][iside]   = NULL;
alloc.cu:        bdrypml_d->D[idim][iside]   = NULL;
alloc.cu:      bdrypml_auxvar_t *auxvar_d = &(bdrypml_d->auxvar[idim][iside]);
alloc.cu:      if(auxvar_d->siz_icmp > 0){
alloc.cu:        auxvar_d->var = (float *) cuda_malloc(sizeof(float)*auxvar_d->siz_ilevel*auxvar_d->nlevel); 
alloc.cu:        CUDACHECK(cudaMemset(auxvar_d->var,0,sizeof(float)*auxvar_d->siz_ilevel*auxvar_d->nlevel));
alloc.cu:      auxvar_d->var = NULL;
alloc.cu:  size_t siz_ilevel = wav->siz_ilevel;
alloc.cu:  int nlevel = wav->nlevel;
alloc.cu:  wav_d->v5d   = (float *) cuda_malloc(sizeof(float)*siz_ilevel*nlevel);
alloc.cu:  CUDACHECK(cudaMemset(wav_d->v5d,0,sizeof(float)*siz_ilevel*nlevel));
alloc.cu:  int nx = gdcurv->nx;
alloc.cu:  int ny = gdcurv->ny;
alloc.cu:  int nx = gdcurv->nx;
alloc.cu:  int ny = gdcurv->ny;
alloc.cu:  if (bdryfree_d.is_at_sides[CONST_NDIM-1][1] == 1)
alloc.cu:      if(auxvar_d->siz_icmp > 0){
alloc.cu:        CUDACHECK(cudaFree(auxvar_d->var)); 
bdry_free.cu:  size_t siz_iz  = gdcurv->siz_iz;
bdry_free.cu:  bdryfree->is_enable = 0;
bdry_free.cu:      bdryfree->is_at_sides  [idim][iside] = in_is_sides[idim][iside];
bdry_free.cu:        bdryfree->is_at_sides  [idim][iside] = 0;
bdry_free.cu:      if (bdryfree->is_at_sides  [idim][iside] == 1) {
bdry_free.cu:        bdryfree->is_enable = 1;
bdry_free.cu:  bdryfree->matVx2Vz2 = matVx2Vz;
bdry_free.cu:  bdryfree->matVy2Vz2 = matVy2Vz;
bdry_pml.cu://- may move to par file
bdry_pml.cu: * set up abs_coefs for cfs-pml
bdry_pml.cu:  return (float) (pow(10, -( (log10((double)num_lay)-1.0)/log10(2.0) + 4.0)));
bdry_pml.cu:  return (float) (-Vp / (2.0 * L) * log(Rpp) * (CONSPD + 1.0));
bdry_pml.cu:  return (x<0) ? 0.0f : (float) (amax * (1.0 - pow(x/L, CONSPA)));
bdry_pml.cu:  return (x<0) ? 1.0f : (float) (1.0 + (bmax-1.0) * pow(x/L, CONSPB));
bdry_pml.cu:  int ni1 = gdcurv->ni1;
bdry_pml.cu:  int ni2 = gdcurv->ni2;
bdry_pml.cu:  int nj1 = gdcurv->nj1;
bdry_pml.cu:  int nj2 = gdcurv->nj2;
bdry_pml.cu:  int nk1 = gdcurv->nk1;
bdry_pml.cu:  int nk2 = gdcurv->nk2;
bdry_pml.cu:  int nx  = gdcurv->nx ;
bdry_pml.cu:  int ny  = gdcurv->ny ;
bdry_pml.cu:  int nz  = gdcurv->nz ;
bdry_pml.cu:  int siz_iy = gdcurv->siz_iy;
bdry_pml.cu:  int siz_iz = gdcurv->siz_iz;
bdry_pml.cu:  bdrypml->is_enable = 0;
bdry_pml.cu:      bdrypml->is_at_sides  [idim][iside] = in_is_sides[idim][iside];
bdry_pml.cu:      bdrypml->num_of_layers[idim][iside] = in_num_layers[idim][iside];
bdry_pml.cu:        bdrypml->is_at_sides  [idim][iside] = 0;
bdry_pml.cu:        bdrypml->num_of_layers[idim][iside] = 0;
bdry_pml.cu:      bdrypml->ni1[idim][iside] = ni1;
bdry_pml.cu:      bdrypml->ni2[idim][iside] = ni2;
bdry_pml.cu:      bdrypml->nj1[idim][iside] = nj1;
bdry_pml.cu:      bdrypml->nj2[idim][iside] = nj2;
bdry_pml.cu:      bdrypml->nk1[idim][iside] = nk1;
bdry_pml.cu:      bdrypml->nk2[idim][iside] = nk2;
bdry_pml.cu:        bdrypml->ni2[idim][iside] = ni1 + bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->ni1[idim][iside] = ni2 - bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nj2[idim][iside] = nj1 + bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nj1[idim][iside] = nj2 - bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nk2[idim][iside] = nk1 + bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nk1[idim][iside] = nk2 - bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:      if (bdrypml->is_at_sides  [idim][iside] == 1) {
bdry_pml.cu:        bdrypml->is_enable = 1;
bdry_pml.cu:      if (bdrypml->is_at_sides[idim][iside] == 1) {
bdry_pml.cu:        int npoints = bdrypml->num_of_layers[idim][iside] + 1;
bdry_pml.cu:        bdrypml->A[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->B[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->D[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->A[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->B[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->D[idim][iside] = NULL;
bdry_pml.cu:      if (bdrypml->is_at_sides[idim][iside] == 0) continue;
bdry_pml.cu:      float *A = bdrypml->A[idim][iside];
bdry_pml.cu:      float *B = bdrypml->B[idim][iside];
bdry_pml.cu:      float *D = bdrypml->D[idim][iside];
bdry_pml.cu:      bdry_pml_cal_len_dh(gdcurv,bdrypml->ni1[idim][iside],
bdry_pml.cu:                                 bdrypml->ni2[idim][iside],
bdry_pml.cu:                                 bdrypml->nj1[idim][iside],
bdry_pml.cu:                                 bdrypml->nj2[idim][iside],
bdry_pml.cu:                                 bdrypml->nk1[idim][iside],
bdry_pml.cu:                                 bdrypml->nk2[idim][iside],
bdry_pml.cu:      int npoints = bdrypml->num_of_layers[idim][iside] + 1;
bdry_pml.cu:      float num_lay = npoints - 1;
bdry_pml.cu:      // from PML-interior to outer side
bdry_pml.cu:        // first point has non-zero value
bdry_pml.cu:          i = npoints - 1 - n;
bdry_pml.cu:      int nx = (bdrypml->ni2[idim][iside] - bdrypml->ni1[idim][iside] + 1);
bdry_pml.cu:      int ny = (bdrypml->nj2[idim][iside] - bdrypml->nj1[idim][iside] + 1);
bdry_pml.cu:      int nz = (bdrypml->nk2[idim][iside] - bdrypml->nk1[idim][iside] + 1);
bdry_pml.cu:                           &(bdrypml->auxvar[idim][iside]),verbose);
bdry_pml.cu:  int ni1 = gdcurv->ni1;
bdry_pml.cu:  int ni2 = gdcurv->ni2;
bdry_pml.cu:  int nj1 = gdcurv->nj1;
bdry_pml.cu:  int nj2 = gdcurv->nj2;
bdry_pml.cu:  int nk1 = gdcurv->nk1;
bdry_pml.cu:  int nk2 = gdcurv->nk2;
bdry_pml.cu:  int nx  = gdcurv->nx ;
bdry_pml.cu:  int ny  = gdcurv->ny ;
bdry_pml.cu:  int nz  = gdcurv->nz ;
bdry_pml.cu:  int siz_iy = gdcurv->siz_iy;
bdry_pml.cu:  int siz_iz = gdcurv->siz_iz;
bdry_pml.cu:  bdrypml->is_enable = 0;
bdry_pml.cu:      bdrypml->is_at_sides  [idim][iside] = in_is_sides[idim][iside];
bdry_pml.cu:      bdrypml->num_of_layers[idim][iside] = in_num_layers[idim][iside];
bdry_pml.cu:        bdrypml->is_at_sides  [idim][iside] = 0;
bdry_pml.cu:        bdrypml->num_of_layers[idim][iside] = 0;
bdry_pml.cu:      bdrypml->ni1[idim][iside] = ni1;
bdry_pml.cu:      bdrypml->ni2[idim][iside] = ni2;
bdry_pml.cu:      bdrypml->nj1[idim][iside] = nj1;
bdry_pml.cu:      bdrypml->nj2[idim][iside] = nj2;
bdry_pml.cu:      bdrypml->nk1[idim][iside] = nk1;
bdry_pml.cu:      bdrypml->nk2[idim][iside] = nk2;
bdry_pml.cu:        bdrypml->ni2[idim][iside] = ni1 + bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->ni1[idim][iside] = ni2 - bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nj2[idim][iside] = nj1 + bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nj1[idim][iside] = nj2 - bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nk2[idim][iside] = nk1 + bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:        bdrypml->nk1[idim][iside] = nk2 - bdrypml->num_of_layers[idim][iside];
bdry_pml.cu:      if (bdrypml->is_at_sides  [idim][iside] == 1) {
bdry_pml.cu:        bdrypml->is_enable = 1;
bdry_pml.cu:      if (bdrypml->is_at_sides[idim][iside] == 1) {
bdry_pml.cu:        int npoints = bdrypml->num_of_layers[idim][iside] + 1;
bdry_pml.cu:        bdrypml->A[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->B[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->D[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->Am[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->Bm[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->Dm[idim][iside] = (float *)malloc( npoints * sizeof(float));
bdry_pml.cu:        bdrypml->A[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->B[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->D[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->Am[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->Bm[idim][iside] = NULL;
bdry_pml.cu:        bdrypml->Dm[idim][iside] = NULL;
bdry_pml.cu:      if (bdrypml->is_at_sides[idim][iside] == 0) continue;
bdry_pml.cu:      float *A = bdrypml->A[idim][iside];
bdry_pml.cu:      float *B = bdrypml->B[idim][iside];
bdry_pml.cu:      float *D = bdrypml->D[idim][iside];
bdry_pml.cu:      float *Am = bdrypml->Am[idim][iside];
bdry_pml.cu:      float *Bm = bdrypml->Bm[idim][iside];
bdry_pml.cu:      float *Dm = bdrypml->Dm[idim][iside];
bdry_pml.cu:      bdry_pml_cal_len_dh(gdcurv,bdrypml->ni1[idim][iside],
bdry_pml.cu:                                 bdrypml->ni2[idim][iside],
bdry_pml.cu:                                 bdrypml->nj1[idim][iside],
bdry_pml.cu:                                 bdrypml->nj2[idim][iside],
bdry_pml.cu:                                 bdrypml->nk1[idim][iside],
bdry_pml.cu:                                 bdrypml->nk2[idim][iside],
bdry_pml.cu:      int npoints = bdrypml->num_of_layers[idim][iside] + 1;
bdry_pml.cu:      float num_lay = npoints - 1 + 0.5; // staggered grid
bdry_pml.cu:      // from PML-interior to outer side
bdry_pml.cu:          i = npoints - 1 - n;
bdry_pml.cu:      int nx = (bdrypml->ni2[idim][iside] - bdrypml->ni1[idim][iside] + 1);
bdry_pml.cu:      int ny = (bdrypml->nj2[idim][iside] - bdrypml->nj1[idim][iside] + 1);
bdry_pml.cu:      int nz = (bdrypml->nk2[idim][iside] - bdrypml->nk1[idim][iside] + 1);
bdry_pml.cu:                           &(bdrypml->auxvar[idim][iside]),verbose);
bdry_pml.cu:  auxvar->nx   = nx;
bdry_pml.cu:  auxvar->ny   = ny;
bdry_pml.cu:  auxvar->nz   = nz;
bdry_pml.cu:  auxvar->ncmp = wav->ncmp;
bdry_pml.cu:  auxvar->nlevel = wav->nlevel;
bdry_pml.cu:  auxvar->siz_iy   = auxvar->nx;
bdry_pml.cu:  auxvar->siz_iz   = auxvar->nx * auxvar->ny;
bdry_pml.cu:  auxvar->siz_icmp = auxvar->nx * auxvar->ny * auxvar->nz;
bdry_pml.cu:  auxvar->siz_ilevel = auxvar->siz_icmp * auxvar->ncmp;
bdry_pml.cu:  auxvar->Vx_pos  = wav->Vx_seq  * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Vy_pos  = wav->Vy_seq  * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Vz_pos  = wav->Vz_seq  * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Txx_pos = wav->Txx_seq * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Tyy_pos = wav->Tyy_seq * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Tzz_pos = wav->Tzz_seq * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Tyz_pos = wav->Tyz_seq * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Txz_pos = wav->Txz_seq * auxvar->siz_icmp;
bdry_pml.cu:  auxvar->Txy_pos = wav->Txy_seq * auxvar->siz_icmp;
bdry_pml.cu:  if (auxvar->siz_icmp > 0 ) { // valid pml layer
bdry_pml.cu:    auxvar->var = (float *) fdlib_mem_calloc_1d_float( 
bdry_pml.cu:                 auxvar->siz_ilevel * auxvar->nlevel,
bdry_pml.cu:    auxvar->var = NULL;
bdry_pml.cu:  int siz_iy  = gdcurv->siz_iy;
bdry_pml.cu:  int siz_iz  = gdcurv->siz_iz;
bdry_pml.cu:  float *x3d = gdcurv->x3d;
bdry_pml.cu:  float *y3d = gdcurv->y3d;
bdry_pml.cu:  float *z3d = gdcurv->z3d;
bdry_pml.cu:  if (idim == 0) // x-axis
bdry_pml.cu:          L += sqrt( (x1-x0)*(x1-x0) + (y1-y0)*(y1-y0) + (z1-z0)*(z1-z0) );
bdry_pml.cu:    *avg_L = (*avg_dh) * (abs_ni2 - abs_ni1);
bdry_pml.cu:  else if (idim == 1) // y-axis
bdry_pml.cu:          L += sqrt( (x1-x0)*(x1-x0) + (y1-y0)*(y1-y0) + (z1-z0)*(z1-z0) );
bdry_pml.cu:    *avg_L = (*avg_dh) * (abs_nj2 - abs_nj1);
bdry_pml.cu:  else // z-axis
bdry_pml.cu:          L += sqrt( (x1-x0)*(x1-x0) + (y1-y0)*(y1-y0) + (z1-z0)*(z1-z0) );
bdry_pml.cu:    *avg_L = (*avg_dh) * (abs_nk2 - abs_nk1);
blk_t.cu:  blk->fd         = (fd_t         *) malloc(sizeof(fd_t));
blk_t.cu:  blk->mympi      = (mympi_t      *) malloc(sizeof(mympi_t));
blk_t.cu:  blk->gdcurv     = (gdcurv_t     *) malloc(sizeof(gdcurv_t));
blk_t.cu:  blk->gd_metric  = (gd_metric_t  *) malloc(sizeof(gd_metric_t));
blk_t.cu:  blk->md         = (md_t         *) malloc(sizeof(md_t));
blk_t.cu:  blk->wav        = (wav_t        *) malloc(sizeof(wav_t));
blk_t.cu:  blk->bdryfree   = (bdryfree_t   *) malloc(sizeof(bdryfree_t));
blk_t.cu:  blk->bdrypml    = (bdrypml_t    *) malloc(sizeof(bdrypml_t));
blk_t.cu:  blk->iorecv     = (iorecv_t     *) malloc(sizeof(iorecv_t));
blk_t.cu:  blk->ioline     = (ioline_t     *) malloc(sizeof(ioline_t));
blk_t.cu:  blk->iofault    = (iofault_t    *) malloc(sizeof(iofault_t));
blk_t.cu:  blk->ioslice    = (ioslice_t    *) malloc(sizeof(ioslice_t));
blk_t.cu:  blk->iosnap     = (iosnap_t     *) malloc(sizeof(iosnap_t));
blk_t.cu:  blk->fault      = (fault_t      *) malloc(sizeof(fault_t));
blk_t.cu:  blk->fault_coef = (fault_coef_t *) malloc(sizeof(fault_coef_t));
blk_t.cu:  blk->fault_wav  = (fault_wav_t  *) malloc(sizeof(fault_wav_t));
blk_t.cu:  sprintf(blk->name, "%s", "single");
blk_t.cu:  //sprintf(blk->name, "%s", name);
blk_t.cu:  sprintf(blk->output_fname_part,"px%d_py%d_pz%d", mympi->topoid[0],mympi->topoid[1],mympi->topoid[2]);
blk_t.cu:  sprintf(blk->output_dir, "%s", output_dir);
blk_t.cu:  sprintf(blk->grid_export_dir, "%s", grid_export_dir);
blk_t.cu:  sprintf(blk->media_export_dir, "%s", media_export_dir);
blk_t.cu:  mympi->pair_siz_sbuff_y1 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_y2 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_z1 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_z2 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_y1 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_y2 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_z1 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_z2 = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_y1_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_y2_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_z1_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_sbuff_z2_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_y1_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_y2_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_z1_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_siz_rbuff_z2_fault = (size_t **)malloc(fd->num_of_pairs * sizeof(size_t *));
blk_t.cu:  mympi->pair_s_reqs       = (MPI_Request ***)malloc(fd->num_of_pairs * sizeof(MPI_Request **));
blk_t.cu:  mympi->pair_r_reqs       = (MPI_Request ***)malloc(fd->num_of_pairs * sizeof(MPI_Request **));
blk_t.cu:  for (int ipair = 0; ipair < fd->num_of_pairs; ipair++)
blk_t.cu:    mympi->pair_siz_sbuff_y1[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_y2[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_z1[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_z2[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_y1[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_y2[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_z1[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_z2[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_y1_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_y2_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_z1_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_sbuff_z2_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_y1_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_y2_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_z1_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_siz_rbuff_z2_fault[ipair] = (size_t *)malloc(fd->num_rk_stages * sizeof(size_t));
blk_t.cu:    mympi->pair_s_reqs[ipair] = (MPI_Request **)malloc(fd->num_rk_stages * sizeof(MPI_Request *));
blk_t.cu:    mympi->pair_r_reqs[ipair] = (MPI_Request **)malloc(fd->num_rk_stages * sizeof(MPI_Request *));
blk_t.cu:    for (int istage = 0; istage < fd->num_rk_stages; istage++)
blk_t.cu:      mympi->pair_s_reqs[ipair][istage] = (MPI_Request *)malloc(8 * sizeof(MPI_Request));
blk_t.cu:      mympi->pair_r_reqs[ipair][istage] = (MPI_Request *)malloc(8 * sizeof(MPI_Request));
blk_t.cu:  mympi->siz_sbuff = 0;
blk_t.cu:  mympi->siz_rbuff = 0;
blk_t.cu:  for (int ipair = 0; ipair < fd->num_of_pairs; ipair++)
blk_t.cu:    for (int istage = 0; istage < fd->num_rk_stages; istage++)
blk_t.cu:      fd_op_t *fdy_op = fd->pair_fdy_op[ipair][istage];
blk_t.cu:      fd_op_t *fdz_op = fd->pair_fdz_op[ipair][istage];
blk_t.cu:      mympi->pair_siz_sbuff_y1[ipair][istage] = (ni * nk * fdy_op->right_len) * num_of_vars;
blk_t.cu:      mympi->pair_siz_sbuff_y2[ipair][istage] = (ni * nk * fdy_op->left_len ) * num_of_vars;
blk_t.cu:      mympi->pair_siz_sbuff_z1[ipair][istage] = (ni * nj * fdz_op->right_len) * num_of_vars;
blk_t.cu:      mympi->pair_siz_sbuff_z2[ipair][istage] = (ni * nj * fdz_op->left_len ) * num_of_vars;
blk_t.cu:      mympi->pair_siz_rbuff_y1[ipair][istage] = (ni * nk * fdy_op->left_len ) * num_of_vars;
blk_t.cu:      mympi->pair_siz_rbuff_y2[ipair][istage] = (ni * nk * fdy_op->right_len) * num_of_vars;
blk_t.cu:      mympi->pair_siz_rbuff_z1[ipair][istage] = (ni * nj * fdz_op->left_len ) * num_of_vars;
blk_t.cu:      mympi->pair_siz_rbuff_z2[ipair][istage] = (ni * nj * fdz_op->right_len) * num_of_vars;
blk_t.cu:      mympi->pair_siz_sbuff_y1_fault[ipair][istage] = (nk * fdy_op->right_len) * 2 * num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_sbuff_y2_fault[ipair][istage] = (nk * fdy_op->left_len ) * 2 * num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_sbuff_z1_fault[ipair][istage] = (nj * fdz_op->right_len) * 2 *  num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_sbuff_z2_fault[ipair][istage] = (nj * fdz_op->left_len ) * 2 *  num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_rbuff_y1_fault[ipair][istage] = (nk * fdy_op->left_len ) * 2 * num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_rbuff_y2_fault[ipair][istage] = (nk * fdy_op->right_len) * 2 * num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_rbuff_z1_fault[ipair][istage] = (nj * fdz_op->left_len ) * 2 * num_of_vars_fault;
blk_t.cu:      mympi->pair_siz_rbuff_z2_fault[ipair][istage] = (nj * fdz_op->right_len) * 2 * num_of_vars_fault;
blk_t.cu:      size_t siz_s =  mympi->pair_siz_sbuff_y1[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_y2[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_z1[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_z2[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_y1_fault[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_y2_fault[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_z1_fault[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_sbuff_z2_fault[ipair][istage];
blk_t.cu:      size_t siz_r =  mympi->pair_siz_rbuff_y1[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_y2[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_z1[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_z2[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_y1_fault[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_y2_fault[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_z1_fault[ipair][istage]
blk_t.cu:                    + mympi->pair_siz_rbuff_z2_fault[ipair][istage];
blk_t.cu:      if (siz_s > mympi->siz_sbuff) mympi->siz_sbuff = siz_s;
blk_t.cu:      if (siz_r > mympi->siz_rbuff) mympi->siz_rbuff = siz_r;
blk_t.cu:  mympi->sbuff = (float *) cuda_malloc(mympi->siz_sbuff * sizeof(MPI_FLOAT));
blk_t.cu:  mympi->rbuff = (float *) cuda_malloc(mympi->siz_rbuff * sizeof(MPI_FLOAT));
blk_t.cu:  for (int ipair = 0; ipair < fd->num_of_pairs; ipair++)
blk_t.cu:    for (int istage = 0; istage < fd->num_rk_stages; istage++)
blk_t.cu:      size_t siz_s_y1 = mympi->pair_siz_sbuff_y1[ipair][istage];
blk_t.cu:      size_t siz_s_y2 = mympi->pair_siz_sbuff_y2[ipair][istage];
blk_t.cu:      size_t siz_s_z1 = mympi->pair_siz_sbuff_z1[ipair][istage];
blk_t.cu:      size_t siz_s_z2 = mympi->pair_siz_sbuff_z2[ipair][istage];
blk_t.cu:      size_t siz_s_y1_fault = mympi->pair_siz_sbuff_y1_fault[ipair][istage];
blk_t.cu:      size_t siz_s_y2_fault = mympi->pair_siz_sbuff_y2_fault[ipair][istage];
blk_t.cu:      size_t siz_s_z1_fault = mympi->pair_siz_sbuff_z1_fault[ipair][istage];
blk_t.cu:      size_t siz_s_z2_fault = mympi->pair_siz_sbuff_z2_fault[ipair][istage];
blk_t.cu:      float *sbuff_y1 = mympi->sbuff;
blk_t.cu:      MPI_Send_init(sbuff_y1, siz_s_y1, MPI_FLOAT, mympi->neighid[2], tag[0], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][0]));
blk_t.cu:      MPI_Send_init(sbuff_y2, siz_s_y2, MPI_FLOAT, mympi->neighid[3], tag[1], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][1]));
blk_t.cu:      MPI_Send_init(sbuff_z1, siz_s_z1, MPI_FLOAT, mympi->neighid[4], tag[2], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][2]));
blk_t.cu:      MPI_Send_init(sbuff_z2, siz_s_z2, MPI_FLOAT, mympi->neighid[5], tag[3], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][3]));
blk_t.cu:      MPI_Send_init(sbuff_y1_fault, siz_s_y1_fault, MPI_FLOAT, mympi->neighid[2], tag[4], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][4]));
blk_t.cu:      MPI_Send_init(sbuff_y2_fault, siz_s_y2_fault, MPI_FLOAT, mympi->neighid[3], tag[5], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][5]));
blk_t.cu:      MPI_Send_init(sbuff_z1_fault, siz_s_z1_fault, MPI_FLOAT, mympi->neighid[4], tag[6], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][6]));
blk_t.cu:      MPI_Send_init(sbuff_z2_fault, siz_s_z2_fault, MPI_FLOAT, mympi->neighid[5], tag[7], mympi->topocomm, &(mympi->pair_s_reqs[ipair][istage][7]));
blk_t.cu:      size_t siz_r_y1 = mympi->pair_siz_rbuff_y1[ipair][istage];
blk_t.cu:      size_t siz_r_y2 = mympi->pair_siz_rbuff_y2[ipair][istage];
blk_t.cu:      size_t siz_r_z1 = mympi->pair_siz_rbuff_z1[ipair][istage];
blk_t.cu:      size_t siz_r_z2 = mympi->pair_siz_rbuff_z2[ipair][istage];
blk_t.cu:      size_t siz_r_y1_fault = mympi->pair_siz_rbuff_y1_fault[ipair][istage];
blk_t.cu:      size_t siz_r_y2_fault = mympi->pair_siz_rbuff_y2_fault[ipair][istage];
blk_t.cu:      size_t siz_r_z1_fault = mympi->pair_siz_rbuff_z1_fault[ipair][istage];
blk_t.cu:      size_t siz_r_z2_fault = mympi->pair_siz_rbuff_z2_fault[ipair][istage];
blk_t.cu:      float *rbuff_y1 = mympi->rbuff;
blk_t.cu:      MPI_Recv_init(rbuff_y1, siz_r_y1, MPI_FLOAT, mympi->neighid[2], tag[1], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][0]));
blk_t.cu:      MPI_Recv_init(rbuff_y2, siz_r_y2, MPI_FLOAT, mympi->neighid[3], tag[0], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][1]));
blk_t.cu:      MPI_Recv_init(rbuff_z1, siz_r_z1, MPI_FLOAT, mympi->neighid[4], tag[3], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][2]));
blk_t.cu:      MPI_Recv_init(rbuff_z2, siz_r_z2, MPI_FLOAT, mympi->neighid[5], tag[2], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][3]));
blk_t.cu:      MPI_Recv_init(rbuff_y1_fault, siz_r_y1_fault, MPI_FLOAT, mympi->neighid[2], tag[5], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][4]));
blk_t.cu:      MPI_Recv_init(rbuff_y2_fault, siz_r_y2_fault, MPI_FLOAT, mympi->neighid[3], tag[4], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][5]));
blk_t.cu:      MPI_Recv_init(rbuff_z1_fault, siz_r_z1_fault, MPI_FLOAT, mympi->neighid[4], tag[7], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][6]));
blk_t.cu:      MPI_Recv_init(rbuff_z2_fault, siz_r_z2_fault, MPI_FLOAT, mympi->neighid[5], tag[6], mympi->topocomm, &(mympi->pair_r_reqs[ipair][istage][7]));
blk_t.cu:  int ni1 = gdcurv->ni1;
blk_t.cu:  int ni2 = gdcurv->ni2;
blk_t.cu:  int nj1 = gdcurv->nj1;
blk_t.cu:  int nj2 = gdcurv->nj2;
blk_t.cu:  int nk1 = gdcurv->nk1;
blk_t.cu:  int nk2 = gdcurv->nk2;
blk_t.cu:  size_t siz_iy  = gdcurv->siz_iy;
blk_t.cu:  size_t siz_iz  = gdcurv->siz_iz;
blk_t.cu:  size_t siz_icmp = gdcurv->siz_icmp;
blk_t.cu:  int ni = gdcurv->ni;
blk_t.cu:  int nj = gdcurv->nj;
blk_t.cu:  int nk = gdcurv->nk;
blk_t.cu:  fd_op_t *fdy_op = fd->pair_fdy_op[ipair_mpi][istage_mpi];
blk_t.cu:  fd_op_t *fdz_op = fd->pair_fdz_op[ipair_mpi][istage_mpi];
blk_t.cu:  int ny1_g = fdy_op->right_len;
blk_t.cu:  int ny2_g = fdy_op->left_len;
blk_t.cu:  int nz1_g = fdz_op->right_len;
blk_t.cu:  int nz2_g = fdz_op->left_len;
blk_t.cu:  size_t siz_sbuff_y1 = mympi->pair_siz_sbuff_y1[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_y2 = mympi->pair_siz_sbuff_y2[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_z1 = mympi->pair_siz_sbuff_z1[ipair_mpi][istage_mpi];
blk_t.cu:  float *sbuff_y1 = mympi->sbuff;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (ny1_g + block.y -1) / block.y;
blk_t.cu:    grid.z = (nk + block.z - 1) / block.z;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (ny2_g + block.y -1) / block.y;
blk_t.cu:    grid.z = (nk + block.z - 1) / block.z;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (nj + block.y - 1) / block.y;
blk_t.cu:    grid.z = (nz1_g + block.z - 1) / block.z;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (nj + block.y - 1) / block.y;
blk_t.cu:    grid.z = (nz2_g + block.z - 1) / block.z;
blk_t.cu:    iptr     = (iz+nk1) * siz_iz + (iy+nj2-ny2_g+1) * siz_iy + (ix+ni1);
blk_t.cu:    iptr     = (iz+nk2-nz2_g+1) * siz_iz + (iy+nj1) * siz_iy + (ix+ni1);
blk_t.cu:  int ni1 = gdcurv->ni1;
blk_t.cu:  int ni2 = gdcurv->ni2;
blk_t.cu:  int nj1 = gdcurv->nj1;
blk_t.cu:  int nj2 = gdcurv->nj2;
blk_t.cu:  int nk1 = gdcurv->nk1;
blk_t.cu:  int nk2 = gdcurv->nk2;
blk_t.cu:  size_t siz_iy  = gdcurv->siz_iy;
blk_t.cu:  size_t siz_iz  = gdcurv->siz_iz;
blk_t.cu:  size_t siz_icmp = gdcurv->siz_icmp;
blk_t.cu:  int ni = gdcurv->ni;
blk_t.cu:  int nj = gdcurv->nj;
blk_t.cu:  int nk = gdcurv->nk;
blk_t.cu:  fd_op_t *fdy_op = fd->pair_fdy_op[ipair_mpi][istage_mpi];
blk_t.cu:  fd_op_t *fdz_op = fd->pair_fdz_op[ipair_mpi][istage_mpi];
blk_t.cu:  int ny1_g = fdy_op->right_len;
blk_t.cu:  int ny2_g = fdy_op->left_len;
blk_t.cu:  int nz1_g = fdz_op->right_len;
blk_t.cu:  int nz2_g = fdz_op->left_len;
blk_t.cu:  size_t siz_rbuff_y1 = mympi->pair_siz_rbuff_y1[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_y2 = mympi->pair_siz_rbuff_y2[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_z1 = mympi->pair_siz_rbuff_z1[ipair_mpi][istage_mpi];
blk_t.cu:  float *rbuff_y1 = mympi->rbuff;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (ny2_g + block.y -1) / block.y;
blk_t.cu:    grid.z = (nk + block.z - 1) / block.z;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (ny1_g + block.y -1) / block.y;
blk_t.cu:    grid.z = (nk + block.z - 1) / block.z;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (nj + block.y -1) / block.y;
blk_t.cu:    grid.z = (nz2_g + block.z - 1) / block.z;
blk_t.cu:    grid.x = (ni + block.x - 1) / block.x;
blk_t.cu:    grid.y = (nj + block.y -1) / block.y;
blk_t.cu:    grid.z = (nz1_g + block.z - 1) / block.z;
blk_t.cu:      iptr   = (iz+nk1) * siz_iz + (iy+nj1-ny2_g) * siz_iy + (ix+ni1);
blk_t.cu:      iptr   = (ix+ni1) + (iy+nj1) * siz_iy + (iz+nk1-nz2_g) * siz_iz;
blk_t.cu:  int nj1 = gdcurv->nj1;
blk_t.cu:  int nj2 = gdcurv->nj2;
blk_t.cu:  int nk1 = gdcurv->nk1;
blk_t.cu:  int nk2 = gdcurv->nk2;
blk_t.cu:  int nj = gdcurv->nj;
blk_t.cu:  int nk = gdcurv->nk;
blk_t.cu:  int ny = gdcurv->ny;
blk_t.cu:  size_t siz_iz_yz = gdcurv->siz_iz_yz;
blk_t.cu:  fd_op_t *fdy_op = fd->pair_fdy_op[ipair_mpi][istage_mpi];
blk_t.cu:  fd_op_t *fdz_op = fd->pair_fdz_op[ipair_mpi][istage_mpi];
blk_t.cu:  int ny1_g = fdy_op->right_len;
blk_t.cu:  int ny2_g = fdy_op->left_len;
blk_t.cu:  int nz1_g = fdz_op->right_len;
blk_t.cu:  int nz2_g = fdz_op->left_len;
blk_t.cu:  size_t siz_sbuff_y1 = mympi->pair_siz_sbuff_y1[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_y2 = mympi->pair_siz_sbuff_y2[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_z1 = mympi->pair_siz_sbuff_z1[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_z2 = mympi->pair_siz_sbuff_z2[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_y1_fault = mympi->pair_siz_sbuff_y1_fault[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_y2_fault = mympi->pair_siz_sbuff_y2_fault[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_sbuff_z1_fault = mympi->pair_siz_sbuff_z1_fault[ipair_mpi][istage_mpi];
blk_t.cu:  mympi->sbuff_fault = mympi->sbuff + siz_sbuff_y1 + siz_sbuff_y2 + siz_sbuff_z1 + siz_sbuff_z2;
blk_t.cu:  float *sbuff_y1_fault = mympi->sbuff_fault;
blk_t.cu:    grid.x = (ny1_g + block.x -1) / block.x;
blk_t.cu:    grid.y = (nk + block.y - 1) / block.y;
blk_t.cu:    grid.x = (ny2_g + block.x -1) / block.x;
blk_t.cu:    grid.y = (nk + block.y - 1) / block.y;
blk_t.cu:    grid.x = (nj + block.x - 1) / block.x;
blk_t.cu:    grid.y = (nz1_g + block.y - 1) / block.y;
blk_t.cu:    grid.x = (nj + block.x - 1) / block.x;
blk_t.cu:    grid.y = (nz2_g + block.y - 1) / block.y;
blk_t.cu:    iptr     = (iz+nk1) * ny + (iy+nj2-ny2_g+1);
blk_t.cu:    iptr     = (iz+nk2-nz2_g+1) * ny + (iy+nj1);
blk_t.cu:  int nj1 = gdcurv->nj1;
blk_t.cu:  int nj2 = gdcurv->nj2;
blk_t.cu:  int nk1 = gdcurv->nk1;
blk_t.cu:  int nk2 = gdcurv->nk2;
blk_t.cu:  int nj = gdcurv->nj;
blk_t.cu:  int nk = gdcurv->nk;
blk_t.cu:  int ny = gdcurv->ny;
blk_t.cu:  size_t siz_iz_yz = gdcurv->siz_iz_yz;
blk_t.cu:  fd_op_t *fdy_op = fd->pair_fdy_op[ipair_mpi][istage_mpi];
blk_t.cu:  fd_op_t *fdz_op = fd->pair_fdz_op[ipair_mpi][istage_mpi];
blk_t.cu:  int ny1_g = fdy_op->right_len;
blk_t.cu:  int ny2_g = fdy_op->left_len;
blk_t.cu:  int nz1_g = fdz_op->right_len;
blk_t.cu:  int nz2_g = fdz_op->left_len;
blk_t.cu:  size_t siz_rbuff_y1 = mympi->pair_siz_rbuff_y1[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_y2 = mympi->pair_siz_rbuff_y2[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_z1 = mympi->pair_siz_rbuff_z1[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_z2 = mympi->pair_siz_rbuff_z2[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_y1_fault = mympi->pair_siz_rbuff_y1_fault[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_y2_fault = mympi->pair_siz_rbuff_y2_fault[ipair_mpi][istage_mpi];
blk_t.cu:  size_t siz_rbuff_z1_fault = mympi->pair_siz_rbuff_z1_fault[ipair_mpi][istage_mpi];
blk_t.cu:  mympi->rbuff_fault = mympi->rbuff + siz_rbuff_y1 + siz_rbuff_y2 + siz_rbuff_z1 + siz_rbuff_z2;
blk_t.cu:  float *rbuff_y1_fault = mympi->rbuff_fault;
blk_t.cu:    grid.x = (ny2_g + block.x -1) / block.x;
blk_t.cu:    grid.y = (nk + block.y - 1) / block.y;
blk_t.cu:    grid.x = (ny1_g + block.x -1) / block.x;
blk_t.cu:    grid.y = (nk + block.y - 1) / block.y;
blk_t.cu:    grid.x = (nj + block.x -1) / block.x;
blk_t.cu:    grid.y = (nz2_g + block.y - 1) / block.y;
blk_t.cu:    grid.x = (nj + block.x -1) / block.x;
blk_t.cu:    grid.y = (nz1_g + block.y - 1) / block.y;
blk_t.cu:      iptr   = (iz+nk1) * ny + (iy+nj1-ny2_g);
blk_t.cu:      iptr   = (iz+nk1-nz2_g) * ny + (iy+nj1);
blk_t.cu:  float *x3d = gdcurv->x3d;
blk_t.cu:  float *y3d = gdcurv->y3d;
blk_t.cu:  float *z3d = gdcurv->z3d;
blk_t.cu:  for (int k = gdcurv->nk1; k <= gdcurv->nk2; k++)
blk_t.cu:    for (int j = gdcurv->nj1; j <= gdcurv->nj2; j++)
blk_t.cu:      for (int i = gdcurv->ni1; i <= gdcurv->ni2; i++)
blk_t.cu:        size_t iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
blk_t.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_ISO) {
blk_t.cu:          Vp = sqrt( (md->lambda[iptr] + 2.0 * md->mu[iptr]) / md->rho[iptr] );
blk_t.cu:        } else if (md->medium_type == CONST_MEDIUM_ELASTIC_VTI) {
blk_t.cu:          float Vpv = sqrt( md->c33[iptr] / md->rho[iptr] );
blk_t.cu:          float Vph = sqrt( md->c11[iptr] / md->rho[iptr] );
blk_t.cu:        } else if (md->medium_type == CONST_MEDIUM_ELASTIC_ANISO) {
blk_t.cu:          Vp = sqrt( md->c11[iptr] / md->rho[iptr] );
blk_t.cu:        } else if (md->medium_type == CONST_MEDIUM_ACOUSTIC_ISO) {
blk_t.cu:          Vp = sqrt( md->kappa[iptr] / md->rho[iptr] );
blk_t.cu:        for (int kk = -1; kk <=1; kk++) {
blk_t.cu:          for (int jj = -1; jj <= 1; jj++) {
blk_t.cu:            for (int ii = -1; ii <= 1; ii++) {
blk_t.cu:                float p1[] = { x3d[iptr-ii], y3d[iptr-ii], z3d[iptr-ii] };
blk_t.cu:                float p2[] = { x3d[iptr-jj*gdcurv->siz_iy],
blk_t.cu:                               y3d[iptr-jj*gdcurv->siz_iy],
blk_t.cu:                               z3d[iptr-jj*gdcurv->siz_iy] };
blk_t.cu:                float p3[] = { x3d[iptr-kk*gdcurv->siz_iz],
blk_t.cu:                               y3d[iptr-kk*gdcurv->siz_iz],
blk_t.cu:                               z3d[iptr-kk*gdcurv->siz_iz] };
blk_t.h:  // point-to-point values
constants.h:     exit(-1);                                   \
drv_rk_curv_col.cu: * solver of isotropic elastic 1st-order eqn using curv grid and macdrp schem
drv_rk_curv_col.cu: *  simple MPI exchange without computing-communication overlapping
drv_rk_curv_col.cu:  int num_rk_stages = fd->num_rk_stages;
drv_rk_curv_col.cu:  int num_of_pairs =  fd->num_of_pairs;
drv_rk_curv_col.cu:  float *rk_a = fd->rk_a;
drv_rk_curv_col.cu:  float *rk_b = fd->rk_b;
drv_rk_curv_col.cu:  int ni = gdcurv->ni;
drv_rk_curv_col.cu:  int nj = gdcurv->nj;
drv_rk_curv_col.cu:  int nk = gdcurv->nk;
drv_rk_curv_col.cu:  int i0 = fault_i_global_indx + gdcurv->fdx_nghosts;
drv_rk_curv_col.cu:  int myid = mympi->myid;
drv_rk_curv_col.cu:  int *topoid = mympi->topoid;
drv_rk_curv_col.cu:  MPI_Comm comm = mympi->comm;
drv_rk_curv_col.cu:  int *neighid_d = init_neighid_device(mympi->neighid);
drv_rk_curv_col.cu:  float *w_buff = wav->v5d; // size number is V->siz_icmp * (V->ncmp+6)
drv_rk_curv_col.cu:                     gdcurv->ni, gdcurv->nj, gdcurv->nk, topoid,
drv_rk_curv_col.cu:  io_slice_nc_create(ioslice, wav->ncmp, wav->cmp_name,
drv_rk_curv_col.cu:                     gdcurv->ni, gdcurv->nj, gdcurv->nk, topoid,
drv_rk_curv_col.cu:        auxvar_d->pre = auxvar_d->var + auxvar_d->siz_ilevel * 0;
drv_rk_curv_col.cu:        auxvar_d->tmp = auxvar_d->var + auxvar_d->siz_ilevel * 1;
drv_rk_curv_col.cu:        auxvar_d->rhs = auxvar_d->var + auxvar_d->siz_ilevel * 2;
drv_rk_curv_col.cu:        auxvar_d->end = auxvar_d->var + auxvar_d->siz_ilevel * 3;
drv_rk_curv_col.cu:  int isfree = bdryfree_d.is_at_sides[CONST_NDIM-1][1];
drv_rk_curv_col.cu:    PG = (float *) fdlib_mem_calloc_1d_float(CONST_NDIM_5*gdcurv->ny*gdcurv->nx,0.0,"PGV,A,D malloc");
drv_rk_curv_col.cu:      grid.x = (ni+block.x-1)/block.x;
drv_rk_curv_col.cu:      grid.y = (nj+block.y-1)/block.y;
drv_rk_curv_col.cu:                    md->medium_type);
drv_rk_curv_col.cu:  //--------------------------------------------------------
drv_rk_curv_col.cu:  //--------------------------------------------------------
drv_rk_curv_col.cu:    if (myid==0 && verbose>10) fprintf(stdout,"-> it=%d, t=%f\n", it, t_cur);
drv_rk_curv_col.cu:    if (myid==0 && verbose>10) fprintf(stdout, " --> ipair=%d\n",ipair);
drv_rk_curv_col.cu:      if (myid==0 && verbose>10) fprintf(stdout, " --> istage=%d\n",istage);
drv_rk_curv_col.cu:      if (istage != num_rk_stages-1) {
drv_rk_curv_col.cu:                        fd->pair_fdy_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdz_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdx_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdy_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdz_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdx_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdy_op[ipair][istage],
drv_rk_curv_col.cu:                        fd->pair_fdz_op[ipair][istage],
drv_rk_curv_col.cu:      MPI_Startall(num_of_r_reqs, mympi->pair_r_reqs[ipair_mpi][istage_mpi]);
drv_rk_curv_col.cu:          grid.x = (wav_d.siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.x = (2*fault_wav->ncmp + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nj + block.y - 1) / block.y;
drv_rk_curv_col.cu:          grid.z = (nk + block.z - 1) / block.z;
drv_rk_curv_col.cu:          fault_wav_update <<<grid, block>>> (gdcurv_d, fault_wav->ncmp, coef_a, 
drv_rk_curv_col.cu:        blk_macdrp_pack_mesg_gpu(w_tmp_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, wav->ncmp, myid);
drv_rk_curv_col.cu:        blk_macdrp_pack_fault_mesg_gpu(f_tmp_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, fault_wav->ncmp, myid);
drv_rk_curv_col.cu:        MPI_Startall(num_of_s_reqs, mympi->pair_s_reqs[ipair_mpi][istage_mpi]);
drv_rk_curv_col.cu:              grid.x = (auxvar_d->siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:                         auxvar_d->siz_ilevel, coef_a, auxvar_d->tmp, auxvar_d->pre, auxvar_d->rhs);
drv_rk_curv_col.cu:          grid.x = (wav_d.siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.x = (2*fault_wav->ncmp + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nj + block.y - 1) / block.y;
drv_rk_curv_col.cu:          grid.z = (nk + block.z - 1) / block.z;
drv_rk_curv_col.cu:          fault_wav_update <<<grid, block>>> (gdcurv_d, fault_wav->ncmp, coef_b, 
drv_rk_curv_col.cu:          grid.x = (nj + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nk + block.y - 1) / block.y;
drv_rk_curv_col.cu:              grid.x = (auxvar_d->siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:                          auxvar_d->siz_ilevel, coef_b, auxvar_d->end, auxvar_d->pre, auxvar_d->rhs);
drv_rk_curv_col.cu:      else if (istage<num_rk_stages-1)
drv_rk_curv_col.cu:          grid.x = (wav_d.siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.x = (2*fault_wav->ncmp + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nj + block.y - 1) / block.y;
drv_rk_curv_col.cu:          grid.z = (nk + block.z - 1) / block.z;
drv_rk_curv_col.cu:          fault_wav_update <<<grid, block>>> (gdcurv_d, fault_wav->ncmp, coef_a, 
drv_rk_curv_col.cu:        blk_macdrp_pack_mesg_gpu(w_tmp_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, wav->ncmp, myid);
drv_rk_curv_col.cu:        blk_macdrp_pack_fault_mesg_gpu(f_tmp_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, fault_wav->ncmp, myid);
drv_rk_curv_col.cu:        MPI_Startall(num_of_s_reqs, mympi->pair_s_reqs[ipair_mpi][istage_mpi]);
drv_rk_curv_col.cu:              grid.x = (auxvar_d->siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:                         auxvar_d->siz_ilevel, coef_a, auxvar_d->tmp, auxvar_d->pre, auxvar_d->rhs);
drv_rk_curv_col.cu:          grid.x = (wav_d.siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.x = (2*fault_wav->ncmp + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nj + block.y - 1) / block.y;
drv_rk_curv_col.cu:          grid.z = (nk + block.z - 1) / block.z;
drv_rk_curv_col.cu:          fault_wav_update_end <<<grid, block>>> (gdcurv_d, fault_wav->ncmp, coef_b, 
drv_rk_curv_col.cu:          grid.x = (nj + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nk + block.y - 1) / block.y;
drv_rk_curv_col.cu:              grid.x = (auxvar_d->siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:                         auxvar_d->siz_ilevel, coef_b, auxvar_d->end, auxvar_d->rhs);
drv_rk_curv_col.cu:          grid.x = (wav_d.siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.x = (2*fault_wav->ncmp + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nj + block.y - 1) / block.y;
drv_rk_curv_col.cu:          grid.z = (nk + block.z - 1) / block.z;
drv_rk_curv_col.cu:          fault_wav_update_end <<<grid, block>>> (gdcurv_d, fault_wav->ncmp, coef_b, 
drv_rk_curv_col.cu:          grid.x = (nj + block.x - 1) / block.x;
drv_rk_curv_col.cu:          grid.y = (nk + block.y - 1) / block.y;
drv_rk_curv_col.cu:        blk_macdrp_pack_mesg_gpu(w_end_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, wav->ncmp, myid);
drv_rk_curv_col.cu:        blk_macdrp_pack_fault_mesg_gpu(f_end_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, fault_wav->ncmp, myid);
drv_rk_curv_col.cu:        MPI_Startall(num_of_s_reqs, mympi->pair_s_reqs[ipair_mpi][istage_mpi]);
drv_rk_curv_col.cu:            if (bdrypml->is_at_sides[idim][iside]==1) {
drv_rk_curv_col.cu:              grid.x = (auxvar_d->siz_ilevel + block.x - 1) / block.x;
drv_rk_curv_col.cu:                         auxvar_d->siz_ilevel, coef_b, auxvar_d->end, auxvar_d->rhs);
drv_rk_curv_col.cu:      MPI_Waitall(num_of_s_reqs, mympi->pair_s_reqs[ipair_mpi][istage_mpi], MPI_STATUS_IGNORE);
drv_rk_curv_col.cu:      MPI_Waitall(num_of_r_reqs, mympi->pair_r_reqs[ipair_mpi][istage_mpi], MPI_STATUS_IGNORE);
drv_rk_curv_col.cu:      if (istage != num_rk_stages-1) 
drv_rk_curv_col.cu:        blk_macdrp_unpack_mesg_gpu(w_tmp_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, wav->ncmp, neighid_d);
drv_rk_curv_col.cu:        blk_macdrp_unpack_fault_mesg_gpu(f_tmp_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, fault_wav->ncmp, neighid_d);
drv_rk_curv_col.cu:        blk_macdrp_unpack_mesg_gpu(w_end_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, wav->ncmp,neighid_d);
drv_rk_curv_col.cu:        blk_macdrp_unpack_fault_mesg_gpu(f_end_d, fd, gdcurv, mympi, ipair_mpi, istage_mpi, fault_wav->ncmp, neighid_d);
drv_rk_curv_col.cu:    //--------------------------------------------
drv_rk_curv_col.cu:    //--------------------------------------------
drv_rk_curv_col.cu:      if (myid==0 && verbose>10) fprintf(stdout,"-> check value nan\n");
drv_rk_curv_col.cu:    //--------------------------------------------
drv_rk_curv_col.cu:    //--------------------------------------------
drv_rk_curv_col.cu:      grid.x = (ni + block.x - 1) / block.x;
drv_rk_curv_col.cu:      grid.y = (nj + block.y - 1) / block.y;
drv_rk_curv_col.cu:    //-- recv by interp
drv_rk_curv_col.cu:    io_recv_keep(iorecv, w_end_d, w_buff, it, wav->ncmp, wav->siz_icmp);
drv_rk_curv_col.cu:    //-- line values
drv_rk_curv_col.cu:    io_line_keep(ioline, w_end_d, w_buff, it, wav->ncmp, wav->siz_icmp);
drv_rk_curv_col.cu:      io_slice_nc_put(ioslice,&ioslice_nc,gdcurv,w_end_d,w_buff,it_skip,t_end,0,wav->ncmp-1);
drv_rk_curv_col.cu:        auxvar_d->cur = auxvar_d->pre;
drv_rk_curv_col.cu:        auxvar_d->pre = auxvar_d->end;
drv_rk_curv_col.cu:        auxvar_d->end = auxvar_d->cur;
drv_rk_curv_col.cu:  cudaMemcpy(PG,PG_d,sizeof(float)*CONST_NDIM_5*gdcurv->ny*gdcurv->nx,cudaMemcpyDeviceToHost);
fault_info.cu:  int ny = gdcurv->ny;
fault_info.cu:  int nz = gdcurv->nz;
fault_info.cu:  FC->rho_f = (float *) malloc(sizeof(float)*ny*nz*2);
fault_info.cu:  FC->mu_f  = (float *) malloc(sizeof(float)*ny*nz*2);
fault_info.cu:  FC->lam_f = (float *) malloc(sizeof(float)*ny*nz*2);
fault_info.cu:  FC->D21_1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D22_1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D23_1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D31_1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D32_1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D33_1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D21_2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D22_2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D23_2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D31_2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D32_2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->D33_2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matMin2Plus1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matMin2Plus2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matMin2Plus3 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matMin2Plus4 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matMin2Plus5 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matPlus2Min1 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matPlus2Min2 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matPlus2Min3 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matPlus2Min4 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matPlus2Min5 = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matT1toVx_Min  = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matVytoVx_Min  = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matVztoVx_Min  = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matT1toVx_Plus = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matVytoVx_Plus = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->matVztoVx_Plus = (float *) malloc(sizeof(float)*ny*nz*3*3);
fault_info.cu:  FC->vec_n  = (float *) malloc(sizeof(float)*ny*nz*3);
fault_info.cu:  FC->vec_s1 = (float *) malloc(sizeof(float)*ny*nz*3);
fault_info.cu:  FC->vec_s2 = (float *) malloc(sizeof(float)*ny*nz*3);
fault_info.cu:  FC->x_et   = (float *) malloc(sizeof(float)*ny*nz);
fault_info.cu:  FC->y_et   = (float *) malloc(sizeof(float)*ny*nz);
fault_info.cu:  FC->z_et   = (float *) malloc(sizeof(float)*ny*nz);
fault_info.cu:  FC->matVx2Vz1     = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matVy2Vz1     = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matVx2Vz2     = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matVy2Vz2     = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matPlus2Min1f = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matPlus2Min2f = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matPlus2Min3f = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matMin2Plus1f = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matMin2Plus2f = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matMin2Plus3f = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matT1toVxf_Min  = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matVytoVxf_Min  = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matT1toVxf_Plus = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  FC->matVytoVxf_Plus = (float *) malloc(sizeof(float)*ny*3*3);
fault_info.cu:  int ny = gdcurv->ny;
fault_info.cu:  int nz = gdcurv->nz;
fault_info.cu:  size_t siz_iy = gdcurv->siz_iy;
fault_info.cu:  size_t siz_iz = gdcurv->siz_iz;
fault_info.cu:  size_t siz_iz_yz = gdcurv->siz_iz_yz;
fault_info.cu:  int npoint_z = gdcurv->npoint_z;
fault_info.cu:  int gnk1 = gdcurv->gnk1;
fault_info.cu:  float *jac3d = metric->jac;
fault_info.cu:  float *xi_x  = metric->xi_x;
fault_info.cu:  float *xi_y  = metric->xi_y;
fault_info.cu:  float *xi_z  = metric->xi_z;
fault_info.cu:  float *et_x  = metric->eta_x;
fault_info.cu:  float *et_y  = metric->eta_y;
fault_info.cu:  float *et_z  = metric->eta_z;
fault_info.cu:  float *zt_x  = metric->zeta_x;
fault_info.cu:  float *zt_y  = metric->zeta_y;
fault_info.cu:  float *zt_z  = metric->zeta_z;
fault_info.cu:  float *lam3d = md->lambda;
fault_info.cu:  float *mu3d  = md->mu;
fault_info.cu:  float *rho3d = md->rho;
fault_info.cu:      FC->rho_f[iptr_f+0*siz_iz_yz] = rho;
fault_info.cu:      FC->lam_f[iptr_f+0*siz_iz_yz] = lam;
fault_info.cu:      FC->mu_f [iptr_f+0*siz_iz_yz] = mu;
fault_info.cu:      FC->rho_f[iptr_f+1*siz_iz_yz] = rho;
fault_info.cu:      FC->lam_f[iptr_f+1*siz_iz_yz] = lam;
fault_info.cu:      FC->mu_f [iptr_f+1*siz_iz_yz] = mu;
fault_info.cu:      // minus -
fault_info.cu:      FC->D21_1[iptr_f*9+0] = lam2mu*e21*e11+mu*(e22*e12+e23*e13);
fault_info.cu:      FC->D21_1[iptr_f*9+1] = lam*e21*e12+mu*e22*e11;
fault_info.cu:      FC->D21_1[iptr_f*9+2] = lam*e21*e13+mu*e23*e11;
fault_info.cu:      FC->D21_1[iptr_f*9+3] = mu*e21*e12+lam*e22*e11;
fault_info.cu:      FC->D21_1[iptr_f*9+4] = lam2mu*e22*e12+mu*(e21*e11+e23*e13);
fault_info.cu:      FC->D21_1[iptr_f*9+5] = lam*e22*e13+mu*e23*e12;
fault_info.cu:      FC->D21_1[iptr_f*9+6] = mu*e21*e13+lam*e23*e11;
fault_info.cu:      FC->D21_1[iptr_f*9+7] = mu*e22*e13+lam*e23*e12;
fault_info.cu:      FC->D21_1[iptr_f*9+8] = lam2mu*e23*e13+mu*(e21*e11+e22*e12);
fault_info.cu:      FC->D22_1[iptr_f*9+0] = lam2mu*e21*e21+mu*(e22*e22+e23*e23);
fault_info.cu:      FC->D22_1[iptr_f*9+1] = lam*e21*e22+mu*e22*e21;
fault_info.cu:      FC->D22_1[iptr_f*9+2] = lam*e21*e23+mu*e23*e21;
fault_info.cu:      FC->D22_1[iptr_f*9+3] = mu*e21*e22+lam*e22*e21;
fault_info.cu:      FC->D22_1[iptr_f*9+4] = lam2mu*e22*e22+mu*(e21*e21+e23*e23);
fault_info.cu:      FC->D22_1[iptr_f*9+5] = lam*e22*e23+mu*e23*e22;
fault_info.cu:      FC->D22_1[iptr_f*9+6] = mu*e21*e23+lam*e23*e21;
fault_info.cu:      FC->D22_1[iptr_f*9+7] = mu*e22*e23+lam*e23*e22;
fault_info.cu:      FC->D22_1[iptr_f*9+8] = lam2mu*e23*e23+mu*(e21*e21+e22*e22);
fault_info.cu:      FC->D23_1[iptr_f*9+0] = lam2mu*e21*e31+mu*(e22*e32+e23*e33);
fault_info.cu:      FC->D23_1[iptr_f*9+1] = lam*e21*e32+mu*e22*e31;
fault_info.cu:      FC->D23_1[iptr_f*9+2] = lam*e21*e33+mu*e23*e31;
fault_info.cu:      FC->D23_1[iptr_f*9+3] = mu*e21*e32+lam*e22*e31;
fault_info.cu:      FC->D23_1[iptr_f*9+4] = lam2mu*e22*e32+mu*(e21*e31+e23*e33);
fault_info.cu:      FC->D23_1[iptr_f*9+5] = lam*e22*e33+mu*e23*e32;
fault_info.cu:      FC->D23_1[iptr_f*9+6] = mu*e21*e33+lam*e23*e31;
fault_info.cu:      FC->D23_1[iptr_f*9+7] = mu*e22*e33+lam*e23*e32;
fault_info.cu:      FC->D23_1[iptr_f*9+8] = lam2mu*e23*e33+mu*(e21*e31+e22*e32);
fault_info.cu:      FC->D31_1[iptr_f*9+0] = lam2mu*e31*e11+mu*(e32*e12+e33*e13);
fault_info.cu:      FC->D31_1[iptr_f*9+1] = lam*e31*e12+mu*e32*e11;
fault_info.cu:      FC->D31_1[iptr_f*9+2] = lam*e31*e13+mu*e33*e11;
fault_info.cu:      FC->D31_1[iptr_f*9+3] = mu*e31*e12+lam*e32*e11;
fault_info.cu:      FC->D31_1[iptr_f*9+4] = lam2mu*e32*e12+mu*(e31*e11+e33*e13);
fault_info.cu:      FC->D31_1[iptr_f*9+5] = lam*e32*e13+mu*e33*e12;
fault_info.cu:      FC->D31_1[iptr_f*9+6] = mu*e31*e13+lam*e33*e11;
fault_info.cu:      FC->D31_1[iptr_f*9+7] = mu*e32*e13+lam*e33*e12;
fault_info.cu:      FC->D31_1[iptr_f*9+8] = lam2mu*e33*e13+mu*(e31*e11+e32*e12);
fault_info.cu:      FC->D32_1[iptr_f*9+0] = lam2mu*e31*e21+mu*(e32*e22+e33*e23);
fault_info.cu:      FC->D32_1[iptr_f*9+1] = lam*e31*e22+mu*e32*e21;
fault_info.cu:      FC->D32_1[iptr_f*9+2] = lam*e31*e23+mu*e33*e21;
fault_info.cu:      FC->D32_1[iptr_f*9+3] = mu*e31*e22+lam*e32*e21;
fault_info.cu:      FC->D32_1[iptr_f*9+4] = lam2mu*e32*e22+mu*(e31*e21+e33*e23);
fault_info.cu:      FC->D32_1[iptr_f*9+5] = lam*e32*e23+mu*e33*e22;
fault_info.cu:      FC->D32_1[iptr_f*9+6] = mu*e31*e23+lam*e33*e21;
fault_info.cu:      FC->D32_1[iptr_f*9+7] = mu*e32*e23+lam*e33*e22;
fault_info.cu:      FC->D32_1[iptr_f*9+8] = lam2mu*e33*e23+mu*(e31*e21+e32*e22);
fault_info.cu:      FC->D33_1[iptr_f*9+0] = lam2mu*e31*e31+mu*(e32*e32+e33*e33);
fault_info.cu:      FC->D33_1[iptr_f*9+1] = lam*e31*e32+mu*e32*e31;
fault_info.cu:      FC->D33_1[iptr_f*9+2] = lam*e31*e33+mu*e33*e31;
fault_info.cu:      FC->D33_1[iptr_f*9+3] = mu*e31*e32+lam*e32*e31;
fault_info.cu:      FC->D33_1[iptr_f*9+4] = lam2mu*e32*e32+mu*(e31*e31+e33*e33);
fault_info.cu:      FC->D33_1[iptr_f*9+5] = lam*e32*e33+mu*e33*e32;
fault_info.cu:      FC->D33_1[iptr_f*9+6] = mu*e31*e33+lam*e33*e31;
fault_info.cu:      FC->D33_1[iptr_f*9+7] = mu*e32*e33+lam*e33*e32;
fault_info.cu:      FC->D33_1[iptr_f*9+8] = lam2mu*e33*e33+mu*(e31*e31+e32*e32);
fault_info.cu:      //->plus +
fault_info.cu:      FC->D21_2[iptr_f*9+0] = lam2mu*e21*e11+mu*(e22*e12+e23*e13);
fault_info.cu:      FC->D21_2[iptr_f*9+1] = lam*e21*e12+mu*e22*e11;
fault_info.cu:      FC->D21_2[iptr_f*9+2] = lam*e21*e13+mu*e23*e11;
fault_info.cu:      FC->D21_2[iptr_f*9+3] = mu*e21*e12+lam*e22*e11;
fault_info.cu:      FC->D21_2[iptr_f*9+4] = lam2mu*e22*e12+mu*(e21*e11+e23*e13);
fault_info.cu:      FC->D21_2[iptr_f*9+5] = lam*e22*e13+mu*e23*e12;
fault_info.cu:      FC->D21_2[iptr_f*9+6] = mu*e21*e13+lam*e23*e11;
fault_info.cu:      FC->D21_2[iptr_f*9+7] = mu*e22*e13+lam*e23*e12;
fault_info.cu:      FC->D21_2[iptr_f*9+8] = lam2mu*e23*e13+mu*(e21*e11+e22*e12);
fault_info.cu:      FC->D22_2[iptr_f*9+0] = lam2mu*e21*e21+mu*(e22*e22+e23*e23);
fault_info.cu:      FC->D22_2[iptr_f*9+1] = lam*e21*e22+mu*e22*e21;
fault_info.cu:      FC->D22_2[iptr_f*9+2] = lam*e21*e23+mu*e23*e21;
fault_info.cu:      FC->D22_2[iptr_f*9+3] = mu*e21*e22+lam*e22*e21;
fault_info.cu:      FC->D22_2[iptr_f*9+4] = lam2mu*e22*e22+mu*(e21*e21+e23*e23);
fault_info.cu:      FC->D22_2[iptr_f*9+5] = lam*e22*e23+mu*e23*e22;
fault_info.cu:      FC->D22_2[iptr_f*9+6] = mu*e21*e23+lam*e23*e21;
fault_info.cu:      FC->D22_2[iptr_f*9+7] = mu*e22*e23+lam*e23*e22;
fault_info.cu:      FC->D22_2[iptr_f*9+8] = lam2mu*e23*e23+mu*(e21*e21+e22*e22);
fault_info.cu:      FC->D23_2[iptr_f*9+0] = lam2mu*e21*e31+mu*(e22*e32+e23*e33);
fault_info.cu:      FC->D23_2[iptr_f*9+1] = lam*e21*e32+mu*e22*e31;
fault_info.cu:      FC->D23_2[iptr_f*9+2] = lam*e21*e33+mu*e23*e31;
fault_info.cu:      FC->D23_2[iptr_f*9+3] = mu*e21*e32+lam*e22*e31;
fault_info.cu:      FC->D23_2[iptr_f*9+4] = lam2mu*e22*e32+mu*(e21*e31+e23*e33);
fault_info.cu:      FC->D23_2[iptr_f*9+5] = lam*e22*e33+mu*e23*e32;
fault_info.cu:      FC->D23_2[iptr_f*9+6] = mu*e21*e33+lam*e23*e31;
fault_info.cu:      FC->D23_2[iptr_f*9+7] = mu*e22*e33+lam*e23*e32;
fault_info.cu:      FC->D23_2[iptr_f*9+8] = lam2mu*e23*e33+mu*(e21*e31+e22*e32);
fault_info.cu:      FC->D31_2[iptr_f*9+0] = lam2mu*e31*e11+mu*(e32*e12+e33*e13);
fault_info.cu:      FC->D31_2[iptr_f*9+1] = lam*e31*e12+mu*e32*e11;
fault_info.cu:      FC->D31_2[iptr_f*9+2] = lam*e31*e13+mu*e33*e11;
fault_info.cu:      FC->D31_2[iptr_f*9+3] = mu*e31*e12+lam*e32*e11;
fault_info.cu:      FC->D31_2[iptr_f*9+4] = lam2mu*e32*e12+mu*(e31*e11+e33*e13);
fault_info.cu:      FC->D31_2[iptr_f*9+5] = lam*e32*e13+mu*e33*e12;
fault_info.cu:      FC->D31_2[iptr_f*9+6] = mu*e31*e13+lam*e33*e11;
fault_info.cu:      FC->D31_2[iptr_f*9+7] = mu*e32*e13+lam*e33*e12;
fault_info.cu:      FC->D31_2[iptr_f*9+8] = lam2mu*e33*e13+mu*(e31*e11+e32*e12);
fault_info.cu:      FC->D32_2[iptr_f*9+0] = lam2mu*e31*e21+mu*(e32*e22+e33*e23);
fault_info.cu:      FC->D32_2[iptr_f*9+1] = lam*e31*e22+mu*e32*e21;
fault_info.cu:      FC->D32_2[iptr_f*9+2] = lam*e31*e23+mu*e33*e21;
fault_info.cu:      FC->D32_2[iptr_f*9+3] = mu*e31*e22+lam*e32*e21;
fault_info.cu:      FC->D32_2[iptr_f*9+4] = lam2mu*e32*e22+mu*(e31*e21+e33*e23);
fault_info.cu:      FC->D32_2[iptr_f*9+5] = lam*e32*e23+mu*e33*e22;
fault_info.cu:      FC->D32_2[iptr_f*9+6] = mu*e31*e23+lam*e33*e21;
fault_info.cu:      FC->D32_2[iptr_f*9+7] = mu*e32*e23+lam*e33*e22;
fault_info.cu:      FC->D32_2[iptr_f*9+8] = lam2mu*e33*e23+mu*(e31*e21+e32*e22);
fault_info.cu:      FC->D33_2[iptr_f*9+0] = lam2mu*e31*e31+mu*(e32*e32+e33*e33);
fault_info.cu:      FC->D33_2[iptr_f*9+1] = lam*e31*e32+mu*e32*e31;
fault_info.cu:      FC->D33_2[iptr_f*9+2] = lam*e31*e33+mu*e33*e31;
fault_info.cu:      FC->D33_2[iptr_f*9+3] = mu*e31*e32+lam*e32*e31;
fault_info.cu:      FC->D33_2[iptr_f*9+4] = lam2mu*e32*e32+mu*(e31*e31+e33*e33);
fault_info.cu:      FC->D33_2[iptr_f*9+5] = lam*e32*e33+mu*e33*e32;
fault_info.cu:      FC->D33_2[iptr_f*9+6] = mu*e31*e33+lam*e33*e31;
fault_info.cu:      FC->D33_2[iptr_f*9+7] = mu*e32*e33+lam*e33*e32;
fault_info.cu:      FC->D33_2[iptr_f*9+8] = lam2mu*e33*e33+mu*(e31*e31+e32*e32);
fault_info.cu:          FC->D21_1[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D22_1[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D23_1[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D31_1[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D32_1[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D33_1[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D21_2[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D22_2[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D23_2[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D31_2[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D32_2[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->D33_2[iptr_f*9+ij] *= jac;
fault_info.cu:          FC->matMin2Plus1[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matMin2Plus2[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matMin2Plus3[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matMin2Plus4[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matMin2Plus5[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:      // plus -> min
fault_info.cu:          FC->matPlus2Min1[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matPlus2Min2[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matPlus2Min3[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matPlus2Min4[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matPlus2Min5[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:      // T1 Vy Vz -> Vx
fault_info.cu:          FC->matT1toVx_Min[iptr_f*9+ij] = mat1[ii][jj];
fault_info.cu:          FC->matVytoVx_Min[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matVztoVx_Min[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:      // T1 Vy Vz -> Vx
fault_info.cu:          FC->matT1toVx_Plus[iptr_f*9+ij] = mat1[ii][jj];
fault_info.cu:          FC->matVytoVx_Plus[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:          FC->matVztoVx_Plus[iptr_f*9+ij] = mat2[ii][jj];
fault_info.cu:      FC->x_et[iptr_f] = mat3[0][1];
fault_info.cu:      FC->y_et[iptr_f] = mat3[1][1];
fault_info.cu:      FC->z_et[iptr_f] = mat3[2][1];
fault_info.cu:          FC->vec_n [iptr_f*3+i] = vec_n [i];
fault_info.cu:          FC->vec_s1[iptr_f*3+i] = vec_s1[i];
fault_info.cu:          FC->vec_s2[iptr_f*3+i] = vec_s2[i];
fault_info.cu:      if ((k-3+gnk1) == npoint_z-1) // free surface global index, index start 0
fault_info.cu:            A[ii][jj] =  FC->D33_1[iptr_f*9+ij];
fault_info.cu:            B[ii][jj] = -FC->D31_1[iptr_f*9+ij];
fault_info.cu:            C[ii][jj] = -FC->D32_1[iptr_f*9+ij];
fault_info.cu:            A[ii][jj] =  FC->D33_2[iptr_f*9+ij];
fault_info.cu:            B[ii][jj] = -FC->D31_2[iptr_f*9+ij];
fault_info.cu:            C[ii][jj] = -FC->D32_2[iptr_f*9+ij];
fault_info.cu:        vec_s1[0] = FC->x_et[iptr_f];
fault_info.cu:        vec_s1[1] = FC->y_et[iptr_f];
fault_info.cu:        vec_s1[2] = FC->z_et[iptr_f];
fault_info.cu:            FC->matT1toVxf_Min[j*9+ij] = Tovert[ii][jj];
fault_info.cu:            FC->matVytoVxf_Min[j*9+ij] = matPlus2Min3f[ii][jj];
fault_info.cu:            FC->matT1toVxf_Plus[j*9+ij] = Tovert[ii][jj];
fault_info.cu:            FC->matVytoVxf_Plus[j*9+ij] = matMin2Plus3f[ii][jj];
fault_info.cu:            FC->matVx2Vz1    [j*9+ij] = matVx2Vz1    [ii][jj];
fault_info.cu:            FC->matVy2Vz1    [j*9+ij] = matVy2Vz1    [ii][jj];
fault_info.cu:            FC->matVx2Vz2    [j*9+ij] = matVx2Vz2    [ii][jj];
fault_info.cu:            FC->matVy2Vz2    [j*9+ij] = matVy2Vz2    [ii][jj];
fault_info.cu:            FC->matPlus2Min1f[j*9+ij] = matPlus2Min1f[ii][jj];
fault_info.cu:            FC->matPlus2Min2f[j*9+ij] = matPlus2Min2f[ii][jj];
fault_info.cu:            FC->matPlus2Min3f[j*9+ij] = matPlus2Min3f[ii][jj];
fault_info.cu:            FC->matMin2Plus1f[j*9+ij] = matMin2Plus1f[ii][jj];
fault_info.cu:            FC->matMin2Plus2f[j*9+ij] = matMin2Plus2f[ii][jj];
fault_info.cu:            FC->matMin2Plus3f[j*9+ij] = matMin2Plus3f[ii][jj];
fault_info.cu:  int nj = gdcurv->nj;
fault_info.cu:  int nk = gdcurv->nk;
fault_info.cu:  F->T0x  = (float *) malloc(sizeof(float)*nj*nk);  // stress_init_x
fault_info.cu:  F->T0y  = (float *) malloc(sizeof(float)*nj*nk);  // stress_init_y
fault_info.cu:  F->T0z  = (float *) malloc(sizeof(float)*nj*nk);  // stress_init_z
fault_info.cu:  F->mu_s = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->mu_d = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->Dc   = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->C0   = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->Tn      = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->Ts1     = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->Ts2     = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->slip    = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->slip1   = (float *) malloc(sizeof(float)*nj*nk); 
fault_info.cu:  F->slip2   = (float *) malloc(sizeof(float)*nj*nk);  
fault_info.cu:  F->Vs      = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->Vs1     = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->Vs2     = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->peak_Vs = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->init_t0 = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->tTn          = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->tTs1         = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->tTs2         = (float *) malloc(sizeof(float)*nj*nk);
fault_info.cu:  F->united       = (int *) malloc(sizeof(int)*nj*nk);
fault_info.cu:  F->faultgrid    = (int *) malloc(sizeof(int)*nj*nk);
fault_info.cu:  F->rup_index_y  = (int *) malloc(sizeof(int)*nj*nk);
fault_info.cu:  F->rup_index_z  = (int *) malloc(sizeof(int)*nj*nk);
fault_info.cu:  F->flag_rup     = (int *) malloc(sizeof(int)*nj*nk);
fault_info.cu:  F->init_t0_flag = (int *) malloc(sizeof(int)*nj*nk);
fault_info.cu:  memset(F->init_t0_flag, 0, sizeof(int)  *nj*nk);
fault_info.cu:  memset(F->slip,         0, sizeof(float)*nj*nk);
fault_info.cu:  memset(F->slip1,        0, sizeof(float)*nj*nk); 
fault_info.cu:  memset(F->slip2,        0, sizeof(float)*nj*nk); 
fault_info.cu:  memset(F->Vs1,          0, sizeof(float)*nj*nk);
fault_info.cu:  memset(F->Vs2,          0, sizeof(float)*nj*nk);
fault_info.cu:  memset(F->peak_Vs,      0, sizeof(float)*nj*nk);
fault_info.cu:  int nj1 = gdcurv->nj1;
fault_info.cu:  int nk1 = gdcurv->nk1;
fault_info.cu:  int nj2 = gdcurv->nj2;
fault_info.cu:  int nk2 = gdcurv->nk2;
fault_info.cu:  int nj = gdcurv->nj;
fault_info.cu:  int nk = gdcurv->nk;
fault_info.cu:  int ny = gdcurv->ny;
fault_info.cu:  int gnj1 = gdcurv->gnj1;
fault_info.cu:  int gnk1 = gdcurv->gnk1;
fault_info.cu:  int npoint_y = gdcurv->npoint_y;
fault_info.cu:  int npoint_z = gdcurv->npoint_z;
fault_info.cu:      vec_n [0] = FC->vec_n [iptr_f*3 + 0];
fault_info.cu:      vec_n [1] = FC->vec_n [iptr_f*3 + 1];
fault_info.cu:      vec_n [2] = FC->vec_n [iptr_f*3 + 2];
fault_info.cu:      vec_s1[0] = FC->vec_s1[iptr_f*3 + 0];
fault_info.cu:      vec_s1[1] = FC->vec_s1[iptr_f*3 + 1];
fault_info.cu:      vec_s1[2] = FC->vec_s1[iptr_f*3 + 2];
fault_info.cu:      vec_s2[0] = FC->vec_s2[iptr_f*3 + 0];
fault_info.cu:      vec_s2[1] = FC->vec_s2[iptr_f*3 + 1];
fault_info.cu:      vec_s2[2] = FC->vec_s2[iptr_f*3 + 2];
fault_info.cu:      F->Tn [iptr_t] = F->T0x[iptr_t] * vec_n[0]
fault_info.cu:                     + F->T0y[iptr_t] * vec_n[1]
fault_info.cu:                     + F->T0z[iptr_t] * vec_n[2];
fault_info.cu:      F->Ts1[iptr_t] = F->T0x[iptr_t] * vec_s1[0]
fault_info.cu:                     + F->T0y[iptr_t] * vec_s1[1]
fault_info.cu:                     + F->T0z[iptr_t] * vec_s1[2];
fault_info.cu:      F->Ts2[iptr_t] = F->T0x[iptr_t] * vec_s2[0]
fault_info.cu:                     + F->T0y[iptr_t] * vec_s2[1]
fault_info.cu:                     + F->T0z[iptr_t] * vec_s2[2];
fault_info.cu:      if( gj+1 <= fault_grid[0]+3 || gj+1 >= fault_grid[1]-3 ){
fault_info.cu:        F->rup_index_y[iptr_t] = 0;
fault_info.cu:        F->rup_index_y[iptr_t] = 1;
fault_info.cu:      if( gk+1 <= fault_grid[2]+3 || gk+1 >= fault_grid[3]-3 ){
fault_info.cu:        F->rup_index_z[iptr_t] = 0;
fault_info.cu:        F->rup_index_z[iptr_t] = 1;
fault_info.cu:        if( gj+1 > 30 && gj+1 <= npoint_y - 30 && gk+1 > 30) {
fault_info.cu:          F->united[iptr_t] = 0;
fault_info.cu:          F->united[iptr_t] = 1;
fault_info.cu:        if( gj+1 > 30 && gj+1 <= npoint_y - 30 && gk+1 > 30 
fault_info.cu:            && gk+1 <= npoint_z - 30) {
fault_info.cu:          F->united[iptr_t] = 0;
fault_info.cu:          F->united[iptr_t] = 1;
fault_info.cu:      if( gj+1 >= fault_grid[0]+3 && gj+1 <= fault_grid[1]-3 &&
fault_info.cu:          gk+1 >= fault_grid[2]+3 && gk+1 <= fault_grid[3]-3 ) {
fault_info.cu:        F->faultgrid[iptr_t] = 1;
fault_info.cu:        F->faultgrid[iptr_t] = 0;
fault_info.cu:      F->init_t0[iptr_t] = -9999.9;
fault_info.cu:      F->flag_rup[iptr_t] = 0;
fault_info.cu:  int nj = gdcurv->nj;
fault_info.cu:  int nk = gdcurv->nk;
fault_info.cu:  int gnj1 = gdcurv->gnj1;
fault_info.cu:  int gnk1 = gdcurv->gnk1;
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->T0x); handle_nc_err(ierr);
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->T0y); handle_nc_err(ierr);
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->T0z); handle_nc_err(ierr); 
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->mu_s); handle_nc_err(ierr);
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->mu_d); handle_nc_err(ierr);
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->Dc); handle_nc_err(ierr);
fault_info.cu:  ierr = nc_get_vara_float(ncid, varid, start, count, F->C0); handle_nc_err(ierr);
fault_info.h:  // fault split node, + - media 
fault_wav_t.cu: * fault wavefield for 3d elastic 1st-order equations
fault_wav_t.cu:  int ny = gdcurv->ny;
fault_wav_t.cu:  int nz = gdcurv->nz;
fault_wav_t.cu:  FW->ny   = gdcurv->ny;
fault_wav_t.cu:  FW->nz   = gdcurv->nz;
fault_wav_t.cu:  FW->ncmp = 9;
fault_wav_t.cu:  FW->nlevel = number_of_levels;
fault_wav_t.cu:  FW->siz_iz_yz = ny * nz;
fault_wav_t.cu:  FW->siz_iz_yz_2 = 2 * ny * nz;
fault_wav_t.cu:  FW->siz_ilevel = 2 * ny * nz * FW->ncmp;
fault_wav_t.cu:  // i0-3 i0-2 i0-1 i0 i0+1 i0+2 i0+3
fault_wav_t.cu:  // zhang zhenguo method only need i0-1 i0 i0+1
fault_wav_t.cu:  FW->T1x = (float *) fdlib_mem_calloc_1d_float(7 * ny * nz,
fault_wav_t.cu:  FW->T1y = (float *) fdlib_mem_calloc_1d_float(7 * ny * nz,
fault_wav_t.cu:  FW->T1z = (float *) fdlib_mem_calloc_1d_float(7 * ny * nz,
fault_wav_t.cu:  FW->hT1x = (float *) fdlib_mem_calloc_1d_float(ny * nz,
fault_wav_t.cu:  FW->hT1y = (float *) fdlib_mem_calloc_1d_float(ny * nz,
fault_wav_t.cu:  FW->hT1z = (float *) fdlib_mem_calloc_1d_float(ny * nz,
fault_wav_t.cu:  FW->mT1x = (float *) fdlib_mem_calloc_1d_float(ny * nz,
fault_wav_t.cu:  FW->mT1y = (float *) fdlib_mem_calloc_1d_float(ny * nz,
fault_wav_t.cu:  FW->mT1z = (float *) fdlib_mem_calloc_1d_float(ny * nz,
fault_wav_t.cu:  // split "-" minus "+" plus 
fault_wav_t.cu:  FW->v5d = (float *) fdlib_mem_calloc_1d_float(FW->siz_ilevel * FW->nlevel,
fault_wav_t.cu:                      FW->ncmp, 0, "ft_w3d_pos, ft_wav_el3d_1st");
fault_wav_t.cu:                      FW->ncmp, CONST_MAX_STRLEN, "ft_w3d_name, ft_wav_el3d_1st");
fault_wav_t.cu:  for (int icmp=0; icmp < FW->ncmp; icmp++)
fault_wav_t.cu:   * 0-3: Vx,Vy,Vz
fault_wav_t.cu:   * 4-9: T2x, T2y, T2z, T3x, T3y, T3z
fault_wav_t.cu:  FW->Vx_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->Vx_seq = 0;
fault_wav_t.cu:  FW->Vy_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->Vy_seq = 1;
fault_wav_t.cu:  FW->Vz_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->Vz_seq = 2;
fault_wav_t.cu:  FW->T2x_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->T2x_seq = 3;
fault_wav_t.cu:  FW->T2y_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->T2y_seq = 4;
fault_wav_t.cu:  FW->T2z_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->T2z_seq = 5;
fault_wav_t.cu:  FW->T3x_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->T3x_seq = 6;
fault_wav_t.cu:  FW->T3y_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->T3y_seq = 7;
fault_wav_t.cu:  FW->T3z_pos = cmp_pos[icmp];
fault_wav_t.cu:  FW->T3z_seq = 8;
fault_wav_t.cu:  FW->cmp_pos  = cmp_pos;
fault_wav_t.cu:  FW->cmp_name = cmp_name;
fault_wav_t.cu:    grid.x = (nj + block.x - 1) / block.x;
fault_wav_t.cu:    grid.y = (nk + block.y - 1) / block.y;
fault_wav_t.cu:    dVx = f_Vx[iptr_f + siz_iz_yz] - f_Vx[iptr_f];
fault_wav_t.cu:    dVy = f_Vy[iptr_f + siz_iz_yz] - f_Vy[iptr_f];
fault_wav_t.cu:    dVz = f_Vz[iptr_f + siz_iz_yz] - f_Vz[iptr_f];
fault_wav_t.cu:    FW.hT1x[iptr_f] = (FW.T1x[iptr_f+3*siz_iz_yz] - FW.mT1x[iptr_f])/dt;
fault_wav_t.cu:    FW.hT1y[iptr_f] = (FW.T1y[iptr_f+3*siz_iz_yz] - FW.mT1y[iptr_f])/dt;
fault_wav_t.cu:    FW.hT1z[iptr_f] = (FW.T1z[iptr_f+3*siz_iz_yz] - FW.mT1z[iptr_f])/dt;
fault_wav_t.cu:      if (Vs > 1e-3) {
fault_wav_t.h:  // sequential index 0-based
fd_t.cu:  //----------------------------------------------------------------------------
fd_t.cu:  //----------------------------------------------------------------------------
fd_t.cu:  fd->num_rk_stages = 4;
fd_t.cu:  fd->rk_a = (float *) fdlib_mem_malloc_1d(
fd_t.cu:                          fd->num_rk_stages*sizeof(float),"fd_set_macdrp");
fd_t.cu:  fd->rk_b = (float *) fdlib_mem_malloc_1d(
fd_t.cu:                          fd->num_rk_stages*sizeof(float),"fd_set_macdrp");
fd_t.cu:  fd->rk_rhs_time = (float *) fdlib_mem_malloc_1d(
fd_t.cu:                          fd->num_rk_stages*sizeof(float), "fd_set_macdrp");
fd_t.cu:  fd->rk_a[0] = 0.5;
fd_t.cu:  fd->rk_a[1] = 0.5;
fd_t.cu:  fd->rk_a[2] = 1.0;
fd_t.cu:  fd->rk_b[0] = 1.0/6.0;
fd_t.cu:  fd->rk_b[1] = 1.0/3.0;
fd_t.cu:  fd->rk_b[2] = 1.0/3.0;
fd_t.cu:  fd->rk_b[3] = 1.0/6.0;
fd_t.cu:  fd->rk_rhs_time[0] = 0.0;
fd_t.cu:  fd->rk_rhs_time[1] = 0.5;
fd_t.cu:  fd->rk_rhs_time[2] = 0.5;
fd_t.cu:  fd->rk_rhs_time[3] = 1.0;
fd_t.cu:  //----------------------------------------------------------------------------
fd_t.cu:  // MacCormack-type scheme
fd_t.cu:  //----------------------------------------------------------------------------
fd_t.cu:  fd->CFL = 1.3;
fd_t.cu:  fd->fdx_max_len = 5;
fd_t.cu:  fd->fdy_max_len = 5;
fd_t.cu:  fd->fdz_max_len = 5;
fd_t.cu:  fd->fdx_nghosts = 3;
fd_t.cu:  fd->fdy_nghosts = 3;
fd_t.cu:  fd->fdz_nghosts = 3;
fd_t.cu:  //----------------------------------------------------------------------------
fd_t.cu:  //----------------------------------------------------------------------------
fd_t.cu:      { -1,0,0,0,0 },
fd_t.cu:      { -1,0,0,0,0 },
fd_t.cu:      { -2,-1, 0,0,0 },
fd_t.cu:      { -3,-2,-1,0,1 }, 
fd_t.cu:      {       -1,0,1,2,3 }
fd_t.cu:      {-1.0, 1.0, 0.0, 0.0, 0.0},
fd_t.cu:      {     -1.0, 1.0, 0.0, 0.0, 0.0 }
fd_t.cu:      {-1.0, 1.0, 0.0, 0.0, 0.0},
fd_t.cu:      {     -1.0, 1.0, 0.0, 0.0, 0.0 }
fd_t.cu:      { 1.0/6.0, -8.0/6.0, 7.0/6.0, 0.0, 0.0 },
fd_t.cu:      {                   -7.0/6.0, 8.0/6.0, -1.0/6.0, 0.0, 0.0 } 
fd_t.cu:      { -0.041686285540599999, 0.33341180882999999, -1.2501177132452999, 0.66674514216519998, 0.29164704779069994 },
fd_t.cu:      {                   -0.29164704779069994, -0.66674514216519998, 1.2501177132452999, -0.33341180882999999,  0.041686285540599999}
fd_t.cu:  fd->num_of_pairs = 8;
fd_t.cu:  fd->pair_fdx_op = (fd_op_t ***)malloc(fd->num_of_pairs * sizeof(fd_op_t **));
fd_t.cu:  fd->pair_fdy_op = (fd_op_t ***)malloc(fd->num_of_pairs * sizeof(fd_op_t **));
fd_t.cu:  fd->pair_fdz_op = (fd_op_t ***)malloc(fd->num_of_pairs * sizeof(fd_op_t **));
fd_t.cu:  for (int ipair = 0; ipair < fd->num_of_pairs; ipair++)
fd_t.cu:    fd->pair_fdx_op[ipair] = (fd_op_t **)malloc(fd->num_rk_stages * sizeof(fd_op_t *));
fd_t.cu:    fd->pair_fdy_op[ipair] = (fd_op_t **)malloc(fd->num_rk_stages * sizeof(fd_op_t *));
fd_t.cu:    fd->pair_fdz_op[ipair] = (fd_op_t **)malloc(fd->num_rk_stages * sizeof(fd_op_t *));
fd_t.cu:    for (int istage = 0; istage < fd->num_rk_stages; istage++)
fd_t.cu:      fd->pair_fdx_op[ipair][istage] = (fd_op_t *)malloc(sizeof(fd_op_t));
fd_t.cu:      fd->pair_fdy_op[ipair][istage] = (fd_op_t *)malloc(sizeof(fd_op_t));
fd_t.cu:      fd->pair_fdz_op[ipair][istage] = (fd_op_t *)malloc(sizeof(fd_op_t)); 
fd_t.cu:  for (int ipair=0; ipair < fd->num_of_pairs; ipair++)
fd_t.cu:    for (int istage=0; istage < fd->num_rk_stages; istage++)
fd_t.cu:      fd_op_t *fdx_op = fd->pair_fdx_op[ipair][istage];
fd_t.cu:      fdx_op->total_len = mac_all_total_len[m_mac_num_lay-1][idir];
fd_t.cu:      fdx_op->left_len  = mac_all_left_len [m_mac_num_lay-1][idir];
fd_t.cu:      fdx_op->right_len = mac_all_right_len[m_mac_num_lay-1][idir];
fd_t.cu:      fdx_op->dir = idir;
fd_t.cu:      fdx_op->indx = (int   *)malloc(fdx_op->total_len * sizeof(int));
fd_t.cu:      fdx_op->coef = (float *)malloc(fdx_op->total_len * sizeof(float));
fd_t.cu:      for (int n=0; n < fdx_op->total_len; n++)
fd_t.cu:        fdx_op->indx[n] = mac_all_indx[m_mac_num_lay-1][idir][n];
fd_t.cu:        fdx_op->coef[n] = mac_all_coef[m_mac_num_lay-1][idir][n];
fd_t.cu:      fd_op_t *fdy_op = fd->pair_fdy_op[ipair][istage];
fd_t.cu:      fdy_op->total_len = mac_all_total_len[m_mac_num_lay-1][jdir];
fd_t.cu:      fdy_op->left_len  = mac_all_left_len [m_mac_num_lay-1][jdir];
fd_t.cu:      fdy_op->right_len = mac_all_right_len[m_mac_num_lay-1][jdir];
fd_t.cu:      fdy_op->dir = jdir;
fd_t.cu:      fdy_op->indx = (int   *)malloc(fdy_op->total_len * sizeof(int));
fd_t.cu:      fdy_op->coef = (float *)malloc(fdy_op->total_len * sizeof(float));
fd_t.cu:      for (int n=0; n < fdy_op->total_len; n++)
fd_t.cu:        fdy_op->indx[n] = mac_all_indx[m_mac_num_lay-1][jdir][n];
fd_t.cu:        fdy_op->coef[n] = mac_all_coef[m_mac_num_lay-1][jdir][n];
fd_t.cu:      fd_op_t *fdz_op = fd->pair_fdz_op[ipair][istage];
fd_t.cu:      fdz_op->total_len = mac_all_total_len[m_mac_num_lay-1][kdir];
fd_t.cu:      fdz_op->left_len  = mac_all_left_len [m_mac_num_lay-1][kdir];
fd_t.cu:      fdz_op->right_len = mac_all_right_len[m_mac_num_lay-1][kdir];
fd_t.cu:      fdz_op->dir = kdir;
fd_t.cu:      fdz_op->indx = (int   *)malloc(fdz_op->total_len * sizeof(int));
fd_t.cu:      fdz_op->coef = (float *)malloc(fdz_op->total_len * sizeof(float));
fd_t.cu:      for (int n=0; n < fdz_op->total_len; n++)
fd_t.cu:        fdz_op->indx[n] = mac_all_indx[m_mac_num_lay-1][kdir][n];
fd_t.cu:        fdz_op->coef[n] = mac_all_coef[m_mac_num_lay-1][kdir][n];
fd_t.h:#define a_2  -0.3334118088
fd_t.h:  (deriv =  *(var_ptr + stride) - *(var_ptr) )
fd_t.h:  (deriv =  *(var_ptr) - *(var_ptr - stride) )
fd_t.h:#define b_1  -7.0/6.0
fd_t.h:#define b_3  -1.0/6.0
fd_t.h:  (deriv = -(b_1 * *(var_ptr))             \
fd_t.h:           -(b_2 * *(var_ptr - stride))    \
fd_t.h:           -(b_3 * *(var_ptr - 2*stride)))
fd_t.h:  (deriv = -(b_3 * *(var_ptr))         \
fd_t.h:           -(b_2 * *(var_ptr + 1))     \
fd_t.h:           -(b_1 * *(var_ptr + 2)))
fd_t.h://#define c_1  -0.30874
fd_t.h://#define c_2  -0.6326
fd_t.h://#define c_4  -0.3334
fd_t.h:#define c_1  -0.29164704779069994
fd_t.h:#define c_2  -0.66674514216519998
fd_t.h:#define c_4  -0.33341180882999999
fd_t.h:  (deriv = (c_1 * *(var_ptr - stride))      \
fd_t.h:  (deriv = -(c_1 * *(var_ptr + stride))     \
fd_t.h:           -(c_2 * *(var_ptr))              \
fd_t.h:           -(c_3 * *(var_ptr - stride))     \
fd_t.h:           -(c_4 * *(var_ptr - 2*stride))   \
fd_t.h:           -(c_5 * *(var_ptr - 3*stride)))
fd_t.h:  (deriv = -(c_5 * *(var_ptr))        \
fd_t.h:           -(c_4 * *(var_ptr + 1))    \
fd_t.h:           -(c_3 * *(var_ptr + 2))    \
fd_t.h:           -(c_2 * *(var_ptr + 3))    \
fd_t.h:           -(c_1 * *(var_ptr + 4)))
fd_t.h:  (deriv =  (c_1 * *(var_ptr - 1))    \
fd_t.h:  (deriv = -(c_1 * *(var_ptr + 1))     \
fd_t.h:           -(c_2 * *(var_ptr    ))     \
fd_t.h:           -(c_3 * *(var_ptr - 1))     \
fd_t.h:           -(c_4 * *(var_ptr - 2))     \
fd_t.h:           -(c_5 * *(var_ptr - 3)))
fd_t.h://#define d_1  -0.02084
fd_t.h://#define d_3  -0.7709
fd_t.h://#define d_6  -0.1667
fd_t.h:#define d_1  -0.01666667
fd_t.h:#define d_3  -0.75000000
fd_t.h:#define d_6  -0.15000000
fd_t.h: ( deriv =   (d_1 * *(var_ptr - 3*stride))            \
fd_t.h:           + (d_2 * *(var_ptr - 2*stride))            \
fd_t.h:           + (d_3 * *(var_ptr - stride))              \
fd_t.h:  //----------------------------------------------------------------------------
fd_t.h:  // Runge-Kutta time scheme
fd_t.h:  //----------------------------------------------------------------------------
gd_t.cu:   * 0-2: x3d, y3d, z3d
gd_t.cu:  gdcurv->ncmp = CONST_NDIM;
gd_t.cu:  gdcurv->v4d = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp * gdcurv->ncmp, 0.0, "gd_curv_init");
gd_t.cu:  if (gdcurv->v4d == NULL) {
gd_t.cu:  size_t *cmp_pos = (size_t *) fdlib_mem_calloc_1d_sizet(gdcurv->ncmp,
gd_t.cu:  char **cmp_name = (char **) fdlib_mem_malloc_2l_char(gdcurv->ncmp,
gd_t.cu:  cmp_pos[icmp] = icmp * gdcurv->siz_icmp;
gd_t.cu:  gdcurv->x3d = gdcurv->v4d + cmp_pos[icmp];
gd_t.cu:  cmp_pos[icmp] = icmp * gdcurv->siz_icmp;
gd_t.cu:  gdcurv->y3d = gdcurv->v4d + cmp_pos[icmp];
gd_t.cu:  cmp_pos[icmp] = icmp * gdcurv->siz_icmp;
gd_t.cu:  gdcurv->z3d = gdcurv->v4d + cmp_pos[icmp];
gd_t.cu:  gdcurv->cmp_pos  = cmp_pos;
gd_t.cu:  gdcurv->cmp_name = cmp_name;
gd_t.cu:  gdcurv->cell_xmin = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp, 0.0, "gd_curv_init");
gd_t.cu:  gdcurv->cell_xmax = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp, 0.0, "gd_curv_init");
gd_t.cu:  gdcurv->cell_ymin = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp, 0.0, "gd_curv_init");
gd_t.cu:  gdcurv->cell_ymax = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp, 0.0, "gd_curv_init");
gd_t.cu:  gdcurv->cell_zmin = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp, 0.0, "gd_curv_init");
gd_t.cu:  gdcurv->cell_zmax = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  gdcurv->siz_icmp, 0.0, "gd_curv_init");
gd_t.cu:  if (gdcurv->cell_zmax == NULL) {
gd_t.cu:   * 1-3: xi_x, xi_y, xi_z
gd_t.cu:   * 4-6: eta_x, eta_y, eta_z
gd_t.cu:   * 7-9: zeta_x, zeta_y, zeta_z
gd_t.cu:  metric->nx   = gdcurv->nx;
gd_t.cu:  metric->ny   = gdcurv->ny;
gd_t.cu:  metric->nz   = gdcurv->nz;
gd_t.cu:  metric->ncmp = num_grid_vars;
gd_t.cu:  metric->siz_iy  = metric->nx;
gd_t.cu:  metric->siz_iz  = metric->nx * metric->ny;
gd_t.cu:  metric->siz_icmp = metric->nx * metric->ny * metric->nz;
gd_t.cu:  metric->v4d = (float *) fdlib_mem_calloc_1d_float(
gd_t.cu:                  metric->siz_icmp * metric->ncmp, 0.0, "gd_curv_init_g4d");
gd_t.cu:  if (metric->v4d == NULL) {
gd_t.cu:  size_t *cmp_pos = (size_t *) fdlib_mem_calloc_1d_sizet(metric->ncmp,
gd_t.cu:  char **cmp_name = (char **) fdlib_mem_malloc_2l_char(metric->ncmp,
gd_t.cu:  for (int icmp=0; icmp < metric->ncmp; icmp++)
gd_t.cu:    cmp_pos[icmp] = icmp * metric->siz_icmp;
gd_t.cu:  metric->jac = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->xi_x = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->xi_y = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->xi_z = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->eta_x = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->eta_y = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->eta_z = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->zeta_x = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->zeta_y = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->zeta_z = metric->v4d + cmp_pos[icmp];
gd_t.cu:  metric->cmp_pos  = cmp_pos;
gd_t.cu:  metric->cmp_name = cmp_name;
gd_t.cu:  int ni1 = gdcurv->ni1;
gd_t.cu:  int ni2 = gdcurv->ni2;
gd_t.cu:  int nj1 = gdcurv->nj1;
gd_t.cu:  int nj2 = gdcurv->nj2;
gd_t.cu:  int nk1 = gdcurv->nk1;
gd_t.cu:  int nk2 = gdcurv->nk2;
gd_t.cu:  int nx  = gdcurv->nx;
gd_t.cu:  int ny  = gdcurv->ny;
gd_t.cu:  int nz  = gdcurv->nz;
gd_t.cu:  size_t siz_iy   = gdcurv->siz_iy;
gd_t.cu:  size_t siz_iz   = gdcurv->siz_iz;
gd_t.cu:  size_t siz_icmp = gdcurv->siz_icmp;
gd_t.cu:  float *x3d  = gdcurv->x3d;
gd_t.cu:  float *y3d  = gdcurv->y3d;
gd_t.cu:  float *z3d  = gdcurv->z3d;
gd_t.cu:  float *jac3d= metric->jac;
gd_t.cu:  float *xi_x = metric->xi_x;
gd_t.cu:  float *xi_y = metric->xi_y;
gd_t.cu:  float *xi_z = metric->xi_z;
gd_t.cu:  float *et_x = metric->eta_x;
gd_t.cu:  float *et_y = metric->eta_y;
gd_t.cu:  float *et_z = metric->eta_z;
gd_t.cu:  float *zt_x = metric->zeta_x;
gd_t.cu:  float *zt_y = metric->zeta_y;
gd_t.cu:  float *zt_z = metric->zeta_z;
gd_t.cu:        jac3d[iptr] = jac3d[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         xi_x[iptr] =  xi_x[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         xi_y[iptr] =  xi_y[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         xi_z[iptr] =  xi_z[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         et_x[iptr] =  et_x[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         et_y[iptr] =  et_y[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         et_z[iptr] =  et_z[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         zt_x[iptr] =  zt_x[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         zt_y[iptr] =  zt_y[iptr + (ni1-i)*2 -1 ];
gd_t.cu:         zt_z[iptr] =  zt_z[iptr + (ni1-i)*2 -1 ];
gd_t.cu:        jac3d[iptr] = jac3d[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         xi_x[iptr] =  xi_x[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         xi_y[iptr] =  xi_y[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         xi_z[iptr] =  xi_z[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         et_x[iptr] =  et_x[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         et_y[iptr] =  et_y[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         et_z[iptr] =  et_z[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         zt_x[iptr] =  zt_x[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         zt_y[iptr] =  zt_y[iptr - (i-ni2)*2 +1 ];
gd_t.cu:         zt_z[iptr] =  zt_z[iptr - (i-ni2)*2 +1 ];
gd_t.cu:        jac3d[iptr] = jac3d[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         xi_x[iptr] =  xi_x[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         xi_y[iptr] =  xi_y[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         xi_z[iptr] =  xi_z[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         et_x[iptr] =  et_x[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         et_y[iptr] =  et_y[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         et_z[iptr] =  et_z[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         zt_x[iptr] =  zt_x[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         zt_y[iptr] =  zt_y[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:         zt_z[iptr] =  zt_z[iptr + ((nj1-j)*2 -1) * siz_iy ];
gd_t.cu:        jac3d[iptr] = jac3d[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         xi_x[iptr] =  xi_x[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         xi_y[iptr] =  xi_y[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         xi_z[iptr] =  xi_z[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         et_x[iptr] =  et_x[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         et_y[iptr] =  et_y[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         et_z[iptr] =  et_z[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         zt_x[iptr] =  zt_x[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         zt_y[iptr] =  zt_y[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:         zt_z[iptr] =  zt_z[iptr - ((j-nj2)*2 -1) * siz_iy ];
gd_t.cu:        jac3d[iptr] = jac3d[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         xi_x[iptr] =  xi_x[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         xi_y[iptr] =  xi_y[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         xi_z[iptr] =  xi_z[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         et_x[iptr] =  et_x[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         et_y[iptr] =  et_y[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         et_z[iptr] =  et_z[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         zt_x[iptr] =  zt_x[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         zt_y[iptr] =  zt_y[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:         zt_z[iptr] =  zt_z[iptr + ((nk1-k)*2 -1) * siz_iz ];
gd_t.cu:        jac3d[iptr] = jac3d[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         xi_x[iptr] =  xi_x[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         xi_y[iptr] =  xi_y[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         xi_z[iptr] =  xi_z[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         et_x[iptr] =  et_x[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         et_y[iptr] =  et_y[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         et_z[iptr] =  et_z[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         zt_x[iptr] =  zt_x[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         zt_y[iptr] =  zt_y[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:         zt_z[iptr] =  zt_z[iptr - ((k-nk2)*2 -1) * siz_iz ];
gd_t.cu:  int nx  = gdcurv->nx;
gd_t.cu:  int ny  = gdcurv->ny;
gd_t.cu:  int nz  = gdcurv->nz;
gd_t.cu:  int ni1 = gdcurv->ni1;
gd_t.cu:  int ni2 = gdcurv->ni2;
gd_t.cu:  int nj1 = gdcurv->nj1;
gd_t.cu:  int nj2 = gdcurv->nj2;
gd_t.cu:  int nk1 = gdcurv->nk1;
gd_t.cu:  int nk2 = gdcurv->nk2;
gd_t.cu:  size_t siz_iy   = gdcurv->siz_iy;
gd_t.cu:  size_t siz_iz   = gdcurv->siz_iz;
gd_t.cu:  size_t siz_icmp = gdcurv->siz_icmp;
gd_t.cu:    s_iptr = (ni2-3+1) + i * siz_icmp;    //sendbuff point (ni2-3+1,ny1,nz1)
gd_t.cu:    r_iptr = (ni1-3) + i * siz_icmp;      //recvbuff point (ni1-3,ny1,nz1)
gd_t.cu:    s_iptr = (nj2-3+1) * siz_iy + i * siz_icmp;   //sendbuff point (nx1,nj2-3+1,nz1)
gd_t.cu:    r_iptr = (nj1-3) * siz_iy + i * siz_icmp;     //recvbuff point (nx1,nj1-3,nz1)
gd_t.cu:    s_iptr = (nk2-3+1) * siz_iz + i * siz_icmp;   //sendbuff point (nx1,ny1,nk2-3+1)
gd_t.cu:    r_iptr = (nk1-3) * siz_iz + i * siz_icmp;     //recvbuff point (nx1,ny1,nk1-3)
gd_t.cu:  int nx = gdcurv->nx;
gd_t.cu:  int ny = gdcurv->ny;
gd_t.cu:  int nz = gdcurv->nz;
gd_t.cu:  int ni = gdcurv->ni;
gd_t.cu:  int nj = gdcurv->nj;
gd_t.cu:  int nk = gdcurv->nk;
gd_t.cu:  int ni1 = gdcurv->ni1;
gd_t.cu:  int ni2 = gdcurv->ni2;
gd_t.cu:  int nj1 = gdcurv->nj1;
gd_t.cu:  int nj2 = gdcurv->nj2;
gd_t.cu:  int nk1 = gdcurv->nk1;
gd_t.cu:  int nk2 = gdcurv->nk2;
gd_t.cu:  int gni1 = gdcurv->gni1;
gd_t.cu:  int npoint_x = gdcurv->npoint_x;
gd_t.cu:  size_t siz_iy  = gdcurv->siz_iy;
gd_t.cu:  size_t siz_iz  = gdcurv->siz_iz;
gd_t.cu:  float *x3d = gdcurv->x3d;
gd_t.cu:  float *y3d = gdcurv->y3d;
gd_t.cu:  float *z3d = gdcurv->z3d;
gd_t.cu:  for(int i = i0-1; i>=ni1; i--)
gd_t.cu:    dist = abs(i-i0); 
gd_t.cu:      compr = 1.0 - cos(PI * (i - (i0 - width1))/(float)(width2-width1));
gd_t.cu:    xline[i] = xline[i+1] - dh *compr;
gd_t.cu:    dist = abs(i-i0); 
gd_t.cu:      compr = 1.0 - cos(PI * (i - (i0 + width1))/(float)(width2-width1));
gd_t.cu:    xline[i] = xline[i-1] + dh *compr;
gd_t.cu:        //int gi = gni1 + i - 3; 
gd_t.cu:        //float x = fault_x[j-3 + (k-3) * nj] + gi * dh + x0;
gd_t.cu:        float x = fault_x[j-3 + (k-3) * nj] + xline[i];
gd_t.cu:        float y = fault_y[j-3 + (k-3) * nj];
gd_t.cu:        float z = fault_z[j-3 + (k-3) * nj];
gd_t.cu:        iptr_c = (ni1*2-i) + j * siz_iy + k * siz_iz;
gd_t.cu:        x3d[iptr] = 2.0*x3d[iptr_b] - x3d[iptr_c];
gd_t.cu:        y3d[iptr] = 2.0*y3d[iptr_b] - y3d[iptr_c];
gd_t.cu:        z3d[iptr] = 2.0*z3d[iptr_b] - z3d[iptr_c];
gd_t.cu:        iptr_c = (ni2*2-i) + j * siz_iy + k * siz_iz;
gd_t.cu:        x3d[iptr] = 2.0*x3d[iptr_b] - x3d[iptr_c];
gd_t.cu:        y3d[iptr] = 2.0*y3d[iptr_b] - y3d[iptr_c];
gd_t.cu:        z3d[iptr] = 2.0*z3d[iptr_b] - z3d[iptr_c];
gd_t.cu:        iptr_c = i + (nj1*2-j) * siz_iy + k * siz_iz;
gd_t.cu:        x3d[iptr] = 2.0*x3d[iptr_b] - x3d[iptr_c];
gd_t.cu:        y3d[iptr] = 2.0*y3d[iptr_b] - y3d[iptr_c];
gd_t.cu:        z3d[iptr] = 2.0*z3d[iptr_b] - z3d[iptr_c];
gd_t.cu:        iptr_c = i + (nj2*2-j) * siz_iy + k * siz_iz;
gd_t.cu:        x3d[iptr] = 2.0*x3d[iptr_b] - x3d[iptr_c];
gd_t.cu:        y3d[iptr] = 2.0*y3d[iptr_b] - y3d[iptr_c];
gd_t.cu:        z3d[iptr] = 2.0*z3d[iptr_b] - z3d[iptr_c];
gd_t.cu:        iptr_c = i + j * siz_iy + (nk1*2-k) * siz_iz;
gd_t.cu:        x3d[iptr] = 2.0*x3d[iptr_b] - x3d[iptr_c];
gd_t.cu:        y3d[iptr] = 2.0*y3d[iptr_b] - y3d[iptr_c];
gd_t.cu:        z3d[iptr] = 2.0*z3d[iptr_b] - z3d[iptr_c];
gd_t.cu:        iptr_c = i + j * siz_iy + (nk2*2-k) * siz_iz;
gd_t.cu:        x3d[iptr] = 2.0*x3d[iptr_b] - x3d[iptr_c];
gd_t.cu:        y3d[iptr] = 2.0*y3d[iptr_b] - y3d[iptr_c];
gd_t.cu:        z3d[iptr] = 2.0*z3d[iptr_b] - z3d[iptr_c];
gd_t.cu:  int nj = gdcurv->nj;
gd_t.cu:  int nk = gdcurv->nk;
gd_t.cu:  size_t start[] = {gdcurv->gnk1, gdcurv->gnj1};
gd_t.cu:  size_t *c3d_pos   = gdcurv->cmp_pos;
gd_t.cu:  char  **c3d_name  = gdcurv->cmp_name;
gd_t.cu:  int number_of_vars = gdcurv->ncmp;
gd_t.cu:  int nx = gdcurv->nx;
gd_t.cu:  int ny = gdcurv->ny;
gd_t.cu:  int nz = gdcurv->nz;
gd_t.cu:  int ni1 = gdcurv->ni1;
gd_t.cu:  int nj1 = gdcurv->nj1;
gd_t.cu:  int nk1 = gdcurv->nk1;
gd_t.cu:  int ni  = gdcurv->ni;
gd_t.cu:  int nj  = gdcurv->nj;
gd_t.cu:  int nk  = gdcurv->nk;
gd_t.cu:  int gni1 = gdcurv->ni1_to_glob_phys0;
gd_t.cu:  int gnj1 = gdcurv->nj1_to_glob_phys0;
gd_t.cu:  int gnk1 = gdcurv->nk1_to_glob_phys0;
gd_t.cu:  int varid[gdcurv->ncmp];
gd_t.cu:  for (int ivar=0; ivar<gdcurv->ncmp; ivar++) {
gd_t.cu:    ierr = nc_def_var(ncid, gdcurv->cmp_name[ivar], NC_FLOAT, CONST_NDIM, dimid, &varid[ivar]);
gd_t.cu:  for (int ivar=0; ivar<gdcurv->ncmp; ivar++) {
gd_t.cu:    float *ptr = gdcurv->v4d + gdcurv->cmp_pos[ivar];
gd_t.cu:  for (int ivar=0; ivar<gdcurv->ncmp; ivar++)
gd_t.cu:    float *ptr = gdcurv->v4d + gdcurv->cmp_pos[ivar];
gd_t.cu:    ierr = nc_inq_varid(ncid, gdcurv->cmp_name[ivar], &varid); 
gd_t.cu:  size_t *g3d_pos   = metric->cmp_pos;
gd_t.cu:  char  **g3d_name  = metric->cmp_name;
gd_t.cu:  int  number_of_vars = metric->ncmp;
gd_t.cu:  int  nx = metric->nx;
gd_t.cu:  int  ny = metric->ny;
gd_t.cu:  int  nz = metric->nz;
gd_t.cu:  int  ni1 = gdcurv->ni1;
gd_t.cu:  int  nj1 = gdcurv->nj1;
gd_t.cu:  int  nk1 = gdcurv->nk1;
gd_t.cu:  int  ni  = gdcurv->ni;
gd_t.cu:  int  nj  = gdcurv->nj;
gd_t.cu:  int  nk  = gdcurv->nk;
gd_t.cu:  int  gni1 = gdcurv->ni1_to_glob_phys0;
gd_t.cu:  int  gnj1 = gdcurv->nj1_to_glob_phys0;
gd_t.cu:  int  gnk1 = gdcurv->nk1_to_glob_phys0;
gd_t.cu:    float *ptr = metric->v4d + g3d_pos[ivar];
gd_t.cu:  for (int ivar=0; ivar<metric->ncmp; ivar++)
gd_t.cu:    float *ptr = metric->v4d + metric->cmp_pos[ivar];
gd_t.cu:    ierr = nc_inq_varid(ncid, metric->cmp_name[ivar], &varid); handle_nc_err(ierr);
gd_t.cu:  float xmin = gdcurv->x3d[0], xmax = gdcurv->x3d[0];
gd_t.cu:  float ymin = gdcurv->y3d[0], ymax = gdcurv->y3d[0];
gd_t.cu:  float zmin = gdcurv->z3d[0], zmax = gdcurv->z3d[0];
gd_t.cu:  for (size_t i = 0; i < gdcurv->siz_icmp; i++){
gd_t.cu:      xmin = xmin < gdcurv->x3d[i] ? xmin : gdcurv->x3d[i];
gd_t.cu:      xmax = xmax > gdcurv->x3d[i] ? xmax : gdcurv->x3d[i];
gd_t.cu:      ymin = ymin < gdcurv->y3d[i] ? ymin : gdcurv->y3d[i];
gd_t.cu:      ymax = ymax > gdcurv->y3d[i] ? ymax : gdcurv->y3d[i];
gd_t.cu:      zmin = zmin < gdcurv->z3d[i] ? zmin : gdcurv->z3d[i];
gd_t.cu:      zmax = zmax > gdcurv->z3d[i] ? zmax : gdcurv->z3d[i];
gd_t.cu:  gdcurv->xmin = xmin;
gd_t.cu:  gdcurv->xmax = xmax;
gd_t.cu:  gdcurv->ymin = ymin;
gd_t.cu:  gdcurv->ymax = ymax;
gd_t.cu:  gdcurv->zmin = zmin;
gd_t.cu:  gdcurv->zmax = zmax;
gd_t.cu:  xmin = gdcurv->xmax;
gd_t.cu:  xmax = gdcurv->xmin;
gd_t.cu:  ymin = gdcurv->ymax;
gd_t.cu:  ymax = gdcurv->ymin;
gd_t.cu:  zmin = gdcurv->zmax;
gd_t.cu:  zmax = gdcurv->zmin;
gd_t.cu:  for (int k = gdcurv->nk1; k <= gdcurv->nk2; k++) {
gd_t.cu:    for (int j = gdcurv->nj1; j <= gdcurv->nj2; j++) {
gd_t.cu:      for (int i = gdcurv->ni1; i <= gdcurv->ni2; i++) {
gd_t.cu:         size_t iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
gd_t.cu:         xmin = xmin < gdcurv->x3d[iptr] ? xmin : gdcurv->x3d[iptr];
gd_t.cu:         xmax = xmax > gdcurv->x3d[iptr] ? xmax : gdcurv->x3d[iptr];
gd_t.cu:         ymin = ymin < gdcurv->y3d[iptr] ? ymin : gdcurv->y3d[iptr];
gd_t.cu:         ymax = ymax > gdcurv->y3d[iptr] ? ymax : gdcurv->y3d[iptr];
gd_t.cu:         zmin = zmin < gdcurv->z3d[iptr] ? zmin : gdcurv->z3d[iptr];
gd_t.cu:         zmax = zmax > gdcurv->z3d[iptr] ? zmax : gdcurv->z3d[iptr];
gd_t.cu:  gdcurv->xmin_phy = xmin;
gd_t.cu:  gdcurv->xmax_phy = xmax;
gd_t.cu:  gdcurv->ymin_phy = ymin;
gd_t.cu:  gdcurv->ymax_phy = ymax;
gd_t.cu:  gdcurv->zmin_phy = zmin;
gd_t.cu:  gdcurv->zmax_phy = zmax;
gd_t.cu:  for (int k = 0; k < gdcurv->nz-1; k++) {
gd_t.cu:    for (int j = 0; j < gdcurv->ny-1; j++) {
gd_t.cu:      for (int i = 0; i < gdcurv->nx-1; i++) {
gd_t.cu:         size_t iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
gd_t.cu:         xmin = gdcurv->x3d[iptr];
gd_t.cu:         ymin = gdcurv->y3d[iptr];
gd_t.cu:         zmin = gdcurv->z3d[iptr];
gd_t.cu:           size_t iptr_pt = iptr + n3 * gdcurv->siz_iz + n2 * gdcurv->siz_iy + n1;
gd_t.cu:           xmin = xmin < gdcurv->x3d[iptr_pt] ? xmin : gdcurv->x3d[iptr_pt];
gd_t.cu:           xmax = xmax > gdcurv->x3d[iptr_pt] ? xmax : gdcurv->x3d[iptr_pt];
gd_t.cu:           ymin = ymin < gdcurv->y3d[iptr_pt] ? ymin : gdcurv->y3d[iptr_pt];
gd_t.cu:           ymax = ymax > gdcurv->y3d[iptr_pt] ? ymax : gdcurv->y3d[iptr_pt];
gd_t.cu:           zmin = zmin < gdcurv->z3d[iptr_pt] ? zmin : gdcurv->z3d[iptr_pt];
gd_t.cu:           zmax = zmax > gdcurv->z3d[iptr_pt] ? zmax : gdcurv->z3d[iptr_pt];
gd_t.cu:         gdcurv->cell_xmin[iptr] = xmin;
gd_t.cu:         gdcurv->cell_xmax[iptr] = xmax;
gd_t.cu:         gdcurv->cell_ymin[iptr] = ymin;
gd_t.cu:         gdcurv->cell_ymax[iptr] = ymax;
gd_t.cu:         gdcurv->cell_zmin[iptr] = zmin;
gd_t.cu:         gdcurv->cell_zmax[iptr] = zmax;
gd_t.cu:  int nx_avg  = gdcurv->ni / GD_TILE_NX; // only for physcial points
gd_t.cu:  int nx_left = gdcurv->ni % GD_TILE_NX;
gd_t.cu:  int ny_avg  = gdcurv->nj / GD_TILE_NY;
gd_t.cu:  int ny_left = gdcurv->nj % GD_TILE_NY;
gd_t.cu:  int nz_avg  = gdcurv->nk / GD_TILE_NZ;
gd_t.cu:  int nz_left = gdcurv->nk % GD_TILE_NZ;
gd_t.cu:      gdcurv->tile_kstart[k_tile] = gdcurv->nk1;
gd_t.cu:      gdcurv->tile_kstart[k_tile] = gdcurv->tile_kend[k_tile-1] + 1;
gd_t.cu:    gdcurv->tile_kend  [k_tile] = gdcurv->tile_kstart[k_tile] + nz_avg -1;
gd_t.cu:      gdcurv->tile_kend[k_tile] += 1;
gd_t.cu:        gdcurv->tile_jstart[j_tile] = gdcurv->nj1;
gd_t.cu:        gdcurv->tile_jstart[j_tile] = gdcurv->tile_jend[j_tile-1] + 1;
gd_t.cu:      gdcurv->tile_jend  [j_tile] = gdcurv->tile_jstart[j_tile] + ny_avg -1;
gd_t.cu:        gdcurv->tile_jend[j_tile] += 1;
gd_t.cu:          gdcurv->tile_istart[i_tile] = gdcurv->ni1;
gd_t.cu:          gdcurv->tile_istart[i_tile] = gdcurv->tile_iend[i_tile-1] + 1;
gd_t.cu:        gdcurv->tile_iend  [i_tile] = gdcurv->tile_istart[i_tile] + nx_avg -1;
gd_t.cu:          gdcurv->tile_iend[i_tile] += 1;
gd_t.cu:        xmax = -1.0e26;
gd_t.cu:        ymax = -1.0e26;
gd_t.cu:        zmax = -1.0e26;
gd_t.cu:        for (int k = gdcurv->tile_kstart[k_tile]; k <= gdcurv->tile_kend[k_tile]; k++)
gd_t.cu:          size_t iptr_k = k * gdcurv->siz_iz;
gd_t.cu:          for (int j = gdcurv->tile_jstart[j_tile]; j <= gdcurv->tile_jend[j_tile]; j++)
gd_t.cu:            size_t iptr_j = iptr_k + j * gdcurv->siz_iy;
gd_t.cu:            for (int i = gdcurv->tile_istart[i_tile]; i <= gdcurv->tile_iend[i_tile]; i++)
gd_t.cu:              xmin = xmin < gdcurv->cell_xmin[iptr] ? xmin : gdcurv->cell_xmin[iptr];
gd_t.cu:              xmax = xmax > gdcurv->cell_xmax[iptr] ? xmax : gdcurv->cell_xmax[iptr];
gd_t.cu:              ymin = ymin < gdcurv->cell_ymin[iptr] ? ymin : gdcurv->cell_ymin[iptr];
gd_t.cu:              ymax = ymax > gdcurv->cell_ymax[iptr] ? ymax : gdcurv->cell_ymax[iptr];
gd_t.cu:              zmin = zmin < gdcurv->cell_zmin[iptr] ? zmin : gdcurv->cell_zmin[iptr];
gd_t.cu:              zmax = zmax > gdcurv->cell_zmax[iptr] ? zmax : gdcurv->cell_zmax[iptr];
gd_t.cu:        gdcurv->tile_xmin[k_tile][j_tile][i_tile] = xmin;
gd_t.cu:        gdcurv->tile_xmax[k_tile][j_tile][i_tile] = xmax;
gd_t.cu:        gdcurv->tile_ymin[k_tile][j_tile][i_tile] = ymin;
gd_t.cu:        gdcurv->tile_ymax[k_tile][j_tile][i_tile] = ymax;
gd_t.cu:        gdcurv->tile_zmin[k_tile][j_tile][i_tile] = zmin;
gd_t.cu:        gdcurv->tile_zmax[k_tile][j_tile][i_tile] = zmax;
gd_t.cu:  //NOTE si_glob sj_glob sk_glob must less -3. due to ghost points length is 3.
gd_t.cu:  int si_glob = -1000;
gd_t.cu:  int sj_glob = -1000;
gd_t.cu:  int sk_glob = -1000;
gd_t.cu:  //NOTE si_glob sj_glob sk_glob must less -3. due to ghost points length is 3.
gd_t.cu:  int si_glob = -1000;
gd_t.cu:  int sj_glob = -1000;
gd_t.cu:  int sk_glob = -1000;
gd_t.cu: *      1 - in this thread
gd_t.cu: *      0 - not in this thread
gd_t.cu:  if ( sx < gdcurv->xmin || sx > gdcurv->xmax ||
gd_t.cu:       sy < gdcurv->ymin || sy > gdcurv->ymax ||
gd_t.cu:       sz < gdcurv->zmin || sz > gdcurv->zmax)
gd_t.cu:  int nx = gdcurv->nx;
gd_t.cu:  int ny = gdcurv->ny;
gd_t.cu:  int nz = gdcurv->nz;
gd_t.cu:  int ni1 = gdcurv->ni1;
gd_t.cu:  int ni2 = gdcurv->ni2;
gd_t.cu:  int nj1 = gdcurv->nj1;
gd_t.cu:  int nj2 = gdcurv->nj2;
gd_t.cu:  int nk1 = gdcurv->nk1;
gd_t.cu:  int nk2 = gdcurv->nk2;
gd_t.cu:  size_t siz_iy = gdcurv->siz_iy;
gd_t.cu:  size_t siz_iz = gdcurv->siz_iz;
gd_t.cu:  float *x3d = gdcurv->x3d;
gd_t.cu:  float *y3d = gdcurv->y3d;
gd_t.cu:  float *z3d = gdcurv->z3d;
gd_t.cu:  float min_dist = sqrtf(  (sx - x3d[0]) * (sx - x3d[0])
gd_t.cu:      + (sy - y3d[0]) * (sy - y3d[0])
gd_t.cu:      + (sz - z3d[0]) * (sz - z3d[0]) );
gd_t.cu:        float DistInt = sqrtf(  (sx - x) * (sx - x)
gd_t.cu:            + (sy - y) * (sy - y)
gd_t.cu:            + (sz - z) * (sz - z) );
gd_t.cu:        int cur_i = min_dist_i-1+ii;
gd_t.cu:        int cur_j = min_dist_j-1+jj;
gd_t.cu:        int cur_k = min_dist_k-1+kk;
gd_t.cu:          *sx_inc = si_curv - min_dist_i;
gd_t.cu:          *sy_inc = sj_curv - min_dist_j;
gd_t.cu:          *sz_inc = sk_curv - min_dist_k;
gd_t.cu:  if ( sx < gdcurv->xmin || sx > gdcurv->xmax ||
gd_t.cu:       sy < gdcurv->ymin || sy > gdcurv->ymax )
gd_t.cu:  // take upper-right cell, thus do not take last index
gd_t.cu:  int k_tile = GD_TILE_NZ - 1;
gd_t.cu:        if (  sx < gdcurv->tile_xmin[k_tile][j_tile][i_tile] ||
gd_t.cu:              sx > gdcurv->tile_xmax[k_tile][j_tile][i_tile] ||
gd_t.cu:              sy < gdcurv->tile_ymin[k_tile][j_tile][i_tile] ||
gd_t.cu:              sy > gdcurv->tile_ymax[k_tile][j_tile][i_tile])
gd_t.cu:        int k = gdcurv->tile_kend[k_tile];
gd_t.cu:          iptr_k = k * gdcurv->siz_iz;
gd_t.cu:          for (int j = gdcurv->tile_jstart[j_tile]; j <= gdcurv->tile_jend[j_tile]; j++)
gd_t.cu:            iptr_j = iptr_k + j * gdcurv->siz_iy;
gd_t.cu:            for (int i = gdcurv->tile_istart[i_tile]; i <= gdcurv->tile_iend[i_tile]; i++)
gd_t.cu:              if (  sx < gdcurv->cell_xmin[iptr] ||
gd_t.cu:                    sx > gdcurv->cell_xmax[iptr] ||
gd_t.cu:                    sy < gdcurv->cell_ymin[iptr] ||
gd_t.cu:                    sy > gdcurv->cell_ymax[iptr] )
gd_t.cu:                  size_t iptr_pt = (i+n1) + (j+n2) * gdcurv->siz_iy + k * gdcurv->siz_iz;
gd_t.cu:                  points_x[iptr_cube] = gdcurv->x3d[iptr_pt];
gd_t.cu:                  points_y[iptr_cube] = gdcurv->y3d[iptr_pt];
gd_t.cu:                  points_z[iptr_cube] = gdcurv->z3d[iptr_pt];
gd_t.cu:                *sz = ztopo - (*sz);
gd_t.cu:  float min_dist = sqrtf(  (sx - points_x[0]) * (sx - points_x[0])
gd_t.cu:      + (sy - points_y[0]) * (sy - points_y[0])
gd_t.cu:      + (sz - points_z[0]) * (sz - points_z[0]) );
gd_t.cu:    Lz[0] = 1.0 - Lz[1];
gd_t.cu:      Ly[0] = 1.0 - Ly[1];
gd_t.cu:        Lx[0] = 1.0 - Lx[1];
gd_t.cu:        float DistInt = sqrtf(  (sx - x_pt) * (sx - x_pt)
gd_t.cu:            + (sy - y_pt) * (sy - y_pt)
gd_t.cu:            + (sz - z_pt) * (sz - z_pt) );
gd_t.cu:  float min_dist = sqrtf(  (sx - points_x[0]) * (sx - points_x[0])
gd_t.cu:      + (sy - points_y[0]) * (sy - points_y[0])
gd_t.cu:      + (sz - points_z[0]) * (sz - points_z[0]) );
gd_t.cu:    Lz[0] = 1.0 - Lz[1];
gd_t.cu:      Ly[0] = 1.0 - Ly[1];
gd_t.cu:        Lx[0] = 1.0 - Lx[1];
gd_t.cu:        float DistInt = sqrtf(  (sx - x_pt) * (sx - x_pt)
gd_t.cu:            + (sy - y_pt) * (sy - y_pt)
gd_t.cu:            + (sz - z_pt) * (sz - z_pt) );
gd_t.cu:  int at_point_indx = -1;
gd_t.cu:    float dist = sqrtf ((sx - points_x[i]) * (sx - points_x[i])
gd_t.cu:        + (sy - points_y[i]) * (sy - points_y[i])
gd_t.cu:        + (sz - points_z[i]) * (sz - points_z[i])
gd_t.cu:    if (dist < 1e-9) {
gd_t.cu:    fprintf(stdout,"---- i=%d,weight=%f,points_i=%f,points_j=%f,points_k=%f\n",
gd_t.cu:  size_t iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
gd_t.cu:  var = gdcurv->x3d[iptr];
gd_t.cu:  size_t iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
gd_t.cu:  var = gdcurv->y3d[iptr];
gd_t.cu:  size_t iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
gd_t.cu:  var = gdcurv->z3d[iptr];
gd_t.cu: *    ↑ +z       4----6
gd_t.cu: *             / 0--/-2
gd_t.cu: *            5----7 /
gd_t.cu: *            1----3
gd_t.cu:    p2f[i] = hexa1d[i] - point[i];
gd_t.cu:    A[i] = hexa2d[1][i] - hexa2d[0][i];
gd_t.cu:    B[i] = hexa2d[2][i] - hexa2d[0][i];
gd_t.cu:  int nx_avg  = nx_et / mympi->nprocx;
gd_t.cu:  int nx_left = nx_et % mympi->nprocx;
gd_t.cu:  if (mympi->neighid[0] == MPI_PROC_NULL) {
gd_t.cu:    ni -= abs_num_of_layers[0][0];
gd_t.cu:  if (mympi->neighid[1] == MPI_PROC_NULL) {
gd_t.cu:    ni -= abs_num_of_layers[0][1];
gd_t.cu:  if (mympi->topoid[0] < nx_left) {
gd_t.cu:  if (mympi->topoid[0]==0) {
gd_t.cu:    gdcurv->gni1 = 0;
gd_t.cu:    gdcurv->gni1 = mympi->topoid[0] * nx_avg - abs_num_of_layers[0][0];
gd_t.cu:    gdcurv->gni1 += (mympi->topoid[0] < nx_left)? mympi->topoid[0] : nx_left;
gd_t.cu:  int ny_avg  = ny_et / mympi->nprocy;
gd_t.cu:  int ny_left = ny_et % mympi->nprocy;
gd_t.cu:  if (mympi->neighid[2] == MPI_PROC_NULL) {
gd_t.cu:    nj -= abs_num_of_layers[1][0];
gd_t.cu:  if (mympi->neighid[3] == MPI_PROC_NULL) {
gd_t.cu:    nj -= abs_num_of_layers[1][1];
gd_t.cu:  if (mympi->topoid[1] < ny_left) {
gd_t.cu:  if (mympi->topoid[1]==0) {
gd_t.cu:    gdcurv->gnj1 = 0;
gd_t.cu:    gdcurv->gnj1 = mympi->topoid[1] * ny_avg - abs_num_of_layers[1][0];
gd_t.cu:    gdcurv->gnj1 += (mympi->topoid[1] < ny_left)? mympi->topoid[1] : ny_left;
gd_t.cu:  int nz_avg  = nz_et / mympi->nprocz;
gd_t.cu:  int nz_left = nz_et % mympi->nprocz;
gd_t.cu:  if (mympi->neighid[4] == MPI_PROC_NULL) {
gd_t.cu:    nk -= abs_num_of_layers[2][0];
gd_t.cu:  if (mympi->neighid[5] == MPI_PROC_NULL) {
gd_t.cu:    nk -= abs_num_of_layers[2][1];
gd_t.cu:  if (mympi->topoid[2] < nz_left) {
gd_t.cu:  if (mympi->topoid[2]==0) {
gd_t.cu:    gdcurv->gnk1 = 0;
gd_t.cu:    gdcurv->gnk1 = mympi->topoid[2] * nz_avg - abs_num_of_layers[2][0];
gd_t.cu:    gdcurv->gnk1 += (mympi->topoid[2] < nz_left)? mympi->topoid[2] : nz_left;
gd_t.cu:  gdcurv->ni = ni;
gd_t.cu:  gdcurv->nj = nj;
gd_t.cu:  gdcurv->nk = nk;
gd_t.cu:  gdcurv->nx = nx;
gd_t.cu:  gdcurv->ny = ny;
gd_t.cu:  gdcurv->nz = nz;
gd_t.cu:  gdcurv->ni1 = fdx_nghosts;
gd_t.cu:  gdcurv->ni2 = gdcurv->ni1 + ni - 1;
gd_t.cu:  gdcurv->nj1 = fdy_nghosts;
gd_t.cu:  gdcurv->nj2 = gdcurv->nj1 + nj - 1;
gd_t.cu:  gdcurv->nk1 = fdz_nghosts;
gd_t.cu:  gdcurv->nk2 = gdcurv->nk1 + nk - 1;
gd_t.cu:  gdcurv->gni2 = gdcurv->gni1 + gdcurv->ni - 1;
gd_t.cu:  gdcurv->gnj2 = gdcurv->gnj1 + gdcurv->nj - 1;
gd_t.cu:  gdcurv->gnk2 = gdcurv->gnk1 + gdcurv->nk - 1;
gd_t.cu:  gdcurv->ni1_to_glob_phys0 = gdcurv->gni1;
gd_t.cu:  gdcurv->ni2_to_glob_phys0 = gdcurv->gni2;
gd_t.cu:  gdcurv->nj1_to_glob_phys0 = gdcurv->gnj1;
gd_t.cu:  gdcurv->nj2_to_glob_phys0 = gdcurv->gnj2;
gd_t.cu:  gdcurv->nk1_to_glob_phys0 = gdcurv->gnk1;
gd_t.cu:  gdcurv->nk2_to_glob_phys0 = gdcurv->gnk2;
gd_t.cu:  gdcurv->npoint_x = number_of_total_grid_points_x; 
gd_t.cu:  gdcurv->npoint_y = number_of_total_grid_points_y; 
gd_t.cu:  gdcurv->npoint_z = number_of_total_grid_points_z;
gd_t.cu:  gdcurv->siz_iy   = nx; 
gd_t.cu:  gdcurv->siz_iz   = nx * ny; 
gd_t.cu:  gdcurv->siz_icmp = nx * ny * nz;
gd_t.cu:  gdcurv->siz_iz_yz = ny * nz;
gd_t.cu:  gdcurv->siz_iz_yz2 = 2 * ny * nz;
gd_t.cu:  gdcurv->npoint_ghosts = fdz_nghosts;
gd_t.cu:  gdcurv->fdx_nghosts = fdx_nghosts;
gd_t.cu:  gdcurv->fdy_nghosts = fdy_nghosts;
gd_t.cu:  gdcurv->fdz_nghosts = fdz_nghosts;
gd_t.cu:  gdcurv->index_name = fdlib_mem_malloc_2l_char(
gd_t.cu:  sprintf(gdcurv->index_name[0],"%s","i");
gd_t.cu:  sprintf(gdcurv->index_name[1],"%s","j");
gd_t.cu:  sprintf(gdcurv->index_name[2],"%s","k");
gd_t.cu:  if (   i >= gdcurv->ni1 && i <= gdcurv->ni2
gd_t.cu:      && j >= gdcurv->nj1 && j <= gdcurv->nj2
gd_t.cu:      && k >= gdcurv->nk1 && k <= gdcurv->nk2)
gd_t.cu:  if ( gi >= gdcurv->ni1_to_glob_phys0 && gi <= gdcurv->ni2_to_glob_phys0 &&
gd_t.cu:       gj >= gdcurv->nj1_to_glob_phys0 && gj <= gdcurv->nj2_to_glob_phys0 &&
gd_t.cu:       gk >= gdcurv->nk1_to_glob_phys0 && gk <= gdcurv->nk2_to_glob_phys0 )
gd_t.cu:  if ( gi >= gdcurv->ni1_to_glob_phys0 && gi <= gdcurv->ni2_to_glob_phys0)
gd_t.cu:  if ( gj >= gdcurv->nj1_to_glob_phys0 && gj <= gdcurv->nj2_to_glob_phys0)
gd_t.cu:  if ( gk >= gdcurv->nk1_to_glob_phys0 && gk <= gdcurv->nk2_to_glob_phys0)
gd_t.cu:  return gi - gdcurv->ni1_to_glob_phys0 + gdcurv->npoint_ghosts;
gd_t.cu:  return gj - gdcurv->nj1_to_glob_phys0 + gdcurv->npoint_ghosts;
gd_t.cu:  return gk - gdcurv->nk1_to_glob_phys0 + gdcurv->npoint_ghosts;
gd_t.cu:  return i - gdcurv->npoint_ghosts + gdcurv->ni1_to_glob_phys0;
gd_t.cu:  return j - gdcurv->npoint_ghosts + gdcurv->nj1_to_glob_phys0;
gd_t.cu:  return k - gdcurv->npoint_ghosts + gdcurv->nk1_to_glob_phys0;
gd_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
gd_t.cu:  fprintf(stdout, "--> grid info:\n");
gd_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
gd_t.cu:  fprintf(stdout, " nx    = %-10d\n", gdcurv->nx);
gd_t.cu:  fprintf(stdout, " ny    = %-10d\n", gdcurv->ny);
gd_t.cu:  fprintf(stdout, " nz    = %-10d\n", gdcurv->nz);
gd_t.cu:  fprintf(stdout, " ni    = %-10d\n", gdcurv->ni);
gd_t.cu:  fprintf(stdout, " nj    = %-10d\n", gdcurv->nj);
gd_t.cu:  fprintf(stdout, " nk    = %-10d\n", gdcurv->nk);
gd_t.cu:  fprintf(stdout, " ni1   = %-10d\n", gdcurv->ni1);
gd_t.cu:  fprintf(stdout, " ni2   = %-10d\n", gdcurv->ni2);
gd_t.cu:  fprintf(stdout, " nj1   = %-10d\n", gdcurv->nj1);
gd_t.cu:  fprintf(stdout, " nj2   = %-10d\n", gdcurv->nj2);
gd_t.cu:  fprintf(stdout, " nk1   = %-10d\n", gdcurv->nk1);
gd_t.cu:  fprintf(stdout, " nk2   = %-10d\n", gdcurv->nk2);
gd_t.cu:  fprintf(stdout, " ni1_to_glob_phys0   = %-10d\n", gdcurv->gni1);
gd_t.cu:  fprintf(stdout, " ni2_to_glob_phys0   = %-10d\n", gdcurv->gni2);
gd_t.cu:  fprintf(stdout, " nj1_to_glob_phys0   = %-10d\n", gdcurv->gnj1);
gd_t.cu:  fprintf(stdout, " nj2_to_glob_phys0   = %-10d\n", gdcurv->gnj2);
gd_t.cu:  fprintf(stdout, " nk1_to_glob_phys0   = %-10d\n", gdcurv->gnk1);
gd_t.cu:  fprintf(stdout, " nk2_to_glob_phys0   = %-10d\n", gdcurv->gnk2);
gd_t.cu:  fprintf(stdout, "\n-------------------------------------------------------\n");
gd_t.cu:  fprintf(stdout, "-------------------------------------------------------\n\n");
gd_t.cu:  fprintf(stdout," xmin=%g, xmax=%g\n", gdcurv->xmin,gdcurv->xmax);
gd_t.cu:  fprintf(stdout," ymin=%g, ymax=%g\n", gdcurv->ymin,gdcurv->ymax);
gd_t.cu:  fprintf(stdout," zmin=%g, zmax=%g\n", gdcurv->zmin,gdcurv->zmax);
gd_t.cu:                k_tile, gdcurv->tile_kstart[k_tile],gdcurv->tile_kend[k_tile]);
gd_t.cu:                  j_tile, gdcurv->tile_jstart[j_tile],gdcurv->tile_jend[j_tile]);
gd_t.cu:                  i_tile, gdcurv->tile_istart[i_tile],gdcurv->tile_iend[i_tile]);
gd_t.cu:          gdcurv->tile_xmin[k_tile][j_tile][i_tile],
gd_t.cu:          gdcurv->tile_xmax[k_tile][j_tile][i_tile],
gd_t.cu:          gdcurv->tile_ymin[k_tile][j_tile][i_tile],
gd_t.cu:          gdcurv->tile_ymax[k_tile][j_tile][i_tile],
gd_t.cu:          gdcurv->tile_zmin[k_tile][j_tile][i_tile],
gd_t.cu:          gdcurv->tile_zmax[k_tile][j_tile][i_tile]);
interp.cu:      Lx[i] = Lx[i] * (xi-x[j]) / (x[i]-x[j]);
interp.cu:      Ly[i] = Ly[i] * (yi-y[j]) / (y[i]-y[j]);
interp.cu:      Lx[i] = Lx[i] * (xi-x[j]) / (x[i]-x[j]);
interp.cu:      Ly[i] = Ly[i] * (yi-y[j]) / (y[i]-y[j]);
interp.cu:      Lz[i] = Lz[i] * (zi-z[j]) / (z[i]-z[j]);
interp.cu:    LagInterXPt[k] = Don_xcoor[( Donxcoor + k - P ) + (Donycoor         ) * Don_nx + (Donzcoor         ) * Don_ny * Don_nx ];
interp.cu:    LagInterYPt[k] = Don_ycoor[( Donxcoor         ) + (Donycoor + k - P ) * Don_nx + (Donzcoor         ) * Don_ny * Don_nx ];
interp.cu:    LagInterZPt[k] = Don_zcoor[( Donxcoor         ) + (Donycoor         ) * Don_nx + (Donzcoor + k - P ) * Don_ny * Don_nx ];
interp.cu:        LagInterWave[i*InterOrder+j] = Don_var[( Donxcoor + i - P ) 
interp.cu:          + ( Donycoor + j - P ) * Don_nx
interp.cu:          + ( Donzcoor + k - P ) * Don_nx * Don_ny] ;
interp.cu:  indx = (int)  ((ti-t_start)/dt+0.5); // Nearest point number
interp.cu:  if(indx>ni-1) indx = ni-1;
interp.cu:  if ((indx-lower>=0) && (indx+upper<=ni-1))
interp.cu:    for(int i=indx-lower; i<=indx+upper; i++)
interp.cu:      Lx[i-indx+lower] = 1;
interp.cu:      for (int j=indx-lower; j<=indx+upper; j++)
interp.cu:        Lx[i-indx+lower] = Lx[i-indx+lower] * (ti-t[j]) / (t[i]-t[j]);
interp.cu:    for(int i=indx-lower; i<=indx+upper; i++)
interp.cu:      Li = Li + Lx[i-indx+lower] * z[i];
interp.cu:  if (indx-lower<0)
interp.cu:    inc = lower - indx;
interp.cu:        Lx[i] = Lx[i] * (ti-t[j]) / (t[i]-t[j]);
interp.cu:  if (indx+upper>ni-1)
interp.cu:    inc = indx+upper-(ni-1);
interp.cu:    for (int i=indx-lower-inc; i<= ni-1; i++)
interp.cu:      Lx[i-indx+lower+inc] = 1;
interp.cu:      for (int j=indx-lower-inc; j<=ni-1; j++)
interp.cu:        Lx[i-indx+lower+inc] = Lx[i-indx+lower+inc] * (ti-t[j]) / (t[i]-t[j]);
interp.cu:    for(int i=indx-lower-inc; i<=ni-1; i++)
interp.cu:      Li = Li + Lx[i-indx+lower+inc] * z[i];
io_funcs.cu:  //fprintf(stdout, "-- nr=%d\n", nr);
io_funcs.cu:    grid.x = (num_recv+block.x-1) / block.x;
io_funcs.cu:    grid.x = (num_recv+block.x-1) / block.x;
io_funcs.cu:        all_index[3*ir+0] -= 1;
io_funcs.cu:        all_index[3*ir+1] -= 1;
io_funcs.cu:        all_index[3*ir+2] -= 1;
io_funcs.cu:        all_coords[3*ir+2] = gdcurv->gnk2 - all_coords[3*ir+2];
io_funcs.cu:      all_inc[3*ir+0] = all_coords[3*ir+0] - all_index[3*ir+0] ;
io_funcs.cu:      all_inc[3*ir+1] = all_coords[3*ir+1] - all_index[3*ir+1] ;
io_funcs.cu:      all_inc[3*ir+2] = all_coords[3*ir+2] - all_index[3*ir+2] ;
io_funcs.cu:      sprintf(this_recv->name, "%s", recvone[ir].name);
io_funcs.cu:      this_recv->x = rx;
io_funcs.cu:      this_recv->y = ry;
io_funcs.cu:      this_recv->z = rz;
io_funcs.cu:      this_recv->i=i_local;
io_funcs.cu:      this_recv->j=j_local;
io_funcs.cu:      this_recv->k=k_local;
io_funcs.cu:      this_recv->di = rx_inc;
io_funcs.cu:      this_recv->dj = ry_inc;
io_funcs.cu:      this_recv->dk = rz_inc;
io_funcs.cu:      this_recv->indx1d[0] = i_local   + j_local     * gdcurv->siz_iy + k_local * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[1] = i_local+1 + j_local     * gdcurv->siz_iy + k_local * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[2] = i_local   + (j_local+1) * gdcurv->siz_iy + k_local * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[3] = i_local+1 + (j_local+1) * gdcurv->siz_iy + k_local * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[4] = i_local   + j_local     * gdcurv->siz_iy + (k_local+1) * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[5] = i_local+1 + j_local     * gdcurv->siz_iy + (k_local+1) * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[6] = i_local   + (j_local+1) * gdcurv->siz_iy + (k_local+1) * gdcurv->siz_iz;
io_funcs.cu:      this_recv->indx1d[7] = i_local+1 + (j_local+1) * gdcurv->siz_iy + (k_local+1) * gdcurv->siz_iz;
io_funcs.cu:  iorecv->total_number = nr_this;
io_funcs.cu:  iorecv->recvone      = recvone;
io_funcs.cu:  iorecv->max_nt       = nt_total;
io_funcs.cu:  iorecv->ncmp         = num_of_vars;
io_funcs.cu:  for (int ir=0; ir < iorecv->total_number; ir++)
io_funcs.cu:    recvone = iorecv->recvone + ir;
io_funcs.cu:    recvone->seismo = (float *) malloc(num_of_vars * nt_total * sizeof(float));
io_funcs.cu:  ioline->num_of_lines  = 0;
io_funcs.cu:  ioline->max_nt        = nt_total;
io_funcs.cu:  ioline->ncmp          = num_of_vars;
io_funcs.cu:  ioline->line_nr  = (int *) malloc(number_of_receiver_line * sizeof(int));
io_funcs.cu:  ioline->line_seq = (int *) malloc(number_of_receiver_line * sizeof(int));
io_funcs.cu:      ioline->line_nr [ ioline->num_of_lines ] = nr;
io_funcs.cu:      ioline->line_seq[ ioline->num_of_lines ] = n;
io_funcs.cu:      ioline->num_of_lines += 1;
io_funcs.cu:  if (ioline->num_of_lines>0)
io_funcs.cu:    ioline->line_name   = (char **)fdlib_mem_malloc_2l_char(ioline->num_of_lines,
io_funcs.cu:    ioline->recv_seq    = (int **) malloc(ioline->num_of_lines * sizeof(int*));
io_funcs.cu:    //ioline->recv_indx   = (int **) malloc(ioline->num_of_lines * sizeof(int*));
io_funcs.cu:    ioline->recv_iptr   = (int **) malloc(ioline->num_of_lines * sizeof(int*));
io_funcs.cu:    ioline->recv_x  = (float **) malloc(ioline->num_of_lines * sizeof(float*));
io_funcs.cu:    ioline->recv_y  = (float **) malloc(ioline->num_of_lines * sizeof(float*));
io_funcs.cu:    ioline->recv_z  = (float **) malloc(ioline->num_of_lines * sizeof(float*));
io_funcs.cu:    ioline->recv_seismo = (float **) malloc(ioline->num_of_lines * sizeof(float*));
io_funcs.cu:    for (int n=0; n < ioline->num_of_lines; n++)
io_funcs.cu:      int nr = ioline->line_nr[n];
io_funcs.cu:      //ioline->recv_indx[n] = (int *)malloc(nr * CONST_NDIM * sizeof(int)); 
io_funcs.cu:      ioline->recv_seq [n]  = (int *)malloc( nr * sizeof(int) ); 
io_funcs.cu:      ioline->recv_iptr[n]  = (int *)malloc( nr * sizeof(int) ); 
io_funcs.cu:      ioline->recv_x[n] = (float *)malloc( nr * sizeof(float) );
io_funcs.cu:      ioline->recv_y[n] = (float *)malloc( nr * sizeof(float) );
io_funcs.cu:      ioline->recv_z[n] = (float *)malloc( nr * sizeof(float) );
io_funcs.cu:      ioline->recv_seismo[n] = (float *)malloc(
io_funcs.cu:  for (int m=0; m < ioline->num_of_lines; m++)
io_funcs.cu:    int n = ioline->line_seq[m];
io_funcs.cu:    sprintf(ioline->line_name[m], "%s", receiver_line_name[n]);
io_funcs.cu:        int iptr = i + j * gdcurv->siz_iy + k * gdcurv->siz_iz;
io_funcs.cu:        ioline->recv_seq [m][ir] = ipt;
io_funcs.cu:        ioline->recv_iptr[m][ir] = iptr;
io_funcs.cu:        ioline->recv_x[m][ir] = gd_coord_get_x(gdcurv,i,j,k);
io_funcs.cu:        ioline->recv_y[m][ir] = gd_coord_get_y(gdcurv,i,j,k);
io_funcs.cu:        ioline->recv_z[m][ir] = gd_coord_get_z(gdcurv,i,j,k);
io_funcs.cu:  iofault->siz_max_wrk = 0;
io_funcs.cu:  iofault->fault_fname = (char **) fdlib_mem_malloc_2l_char(1,
io_funcs.cu:  iofault->num_of_fault = 0;
io_funcs.cu:    iofault->fault_local_indx = gd_info_ind_glphy2lcext_i(fault_i_global_indx, gdcurv);
io_funcs.cu:    sprintf(iofault->fault_fname[0],"%s/fault_i%d_%s.nc",
io_funcs.cu:    iofault->num_of_fault += 1;
io_funcs.cu:    size_t slice_siz = gdcurv->nj * gdcurv->nk;
io_funcs.cu:    iofault->siz_max_wrk = slice_siz > iofault->siz_max_wrk ? 
io_funcs.cu:                           slice_siz : iofault->siz_max_wrk;
io_funcs.cu:  ioslice->siz_max_wrk = 0;
io_funcs.cu:    ioslice->slice_x_fname = (char **) fdlib_mem_malloc_2l_char(number_of_slice_x,
io_funcs.cu:    ioslice->slice_x_indx = (int *) malloc(number_of_slice_x * sizeof(int));
io_funcs.cu:    ioslice->slice_y_fname = (char **) fdlib_mem_malloc_2l_char(number_of_slice_y,
io_funcs.cu:    ioslice->slice_y_indx = (int *) malloc(number_of_slice_y * sizeof(int));
io_funcs.cu:    ioslice->slice_z_fname = (char **) fdlib_mem_malloc_2l_char(number_of_slice_z,
io_funcs.cu:    ioslice->slice_z_indx = (int *) malloc(number_of_slice_z * sizeof(int));
io_funcs.cu:  ioslice->num_of_slice_x = 0;
io_funcs.cu:  ioslice->num_of_slice_y = 0;
io_funcs.cu:  ioslice->num_of_slice_z = 0;
io_funcs.cu:      int islc = ioslice->num_of_slice_x;
io_funcs.cu:      ioslice->slice_x_indx[islc]  = gd_info_ind_glphy2lcext_i(gi, gdcurv);
io_funcs.cu:      sprintf(ioslice->slice_x_fname[islc],"%s/slicex_i%d_%s.nc",
io_funcs.cu:      ioslice->num_of_slice_x += 1;
io_funcs.cu:      size_t slice_siz = gdcurv->nj * gdcurv->nk;
io_funcs.cu:      ioslice->siz_max_wrk = slice_siz > ioslice->siz_max_wrk ? 
io_funcs.cu:                             slice_siz : ioslice->siz_max_wrk;
io_funcs.cu:      int islc = ioslice->num_of_slice_y;
io_funcs.cu:      ioslice->slice_y_indx[islc]  = gd_info_ind_glphy2lcext_j(gj, gdcurv);
io_funcs.cu:      sprintf(ioslice->slice_y_fname[islc],"%s/slicey_j%d_%s.nc",
io_funcs.cu:      ioslice->num_of_slice_y += 1;
io_funcs.cu:      size_t slice_siz = gdcurv->ni * gdcurv->nk;
io_funcs.cu:      ioslice->siz_max_wrk = slice_siz > ioslice->siz_max_wrk ? 
io_funcs.cu:                             slice_siz : ioslice->siz_max_wrk;
io_funcs.cu:      int islc = ioslice->num_of_slice_z;
io_funcs.cu:      ioslice->slice_z_indx[islc]  = gd_info_ind_glphy2lcext_k(gk, gdcurv);
io_funcs.cu:      sprintf(ioslice->slice_z_fname[islc],"%s/slicez_k%d_%s.nc",
io_funcs.cu:      ioslice->num_of_slice_z += 1;
io_funcs.cu:      size_t slice_siz = gdcurv->ni * gdcurv->nj;
io_funcs.cu:      ioslice->siz_max_wrk = slice_siz > ioslice->siz_max_wrk ? 
io_funcs.cu:                             slice_siz : ioslice->siz_max_wrk;
io_funcs.cu:    iosnap->fname = (char **) fdlib_mem_malloc_2l_char(number_of_snapshot,
io_funcs.cu:    iosnap->i1 = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->j1 = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->k1 = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->ni = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->nj = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->nk = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->di = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->dj = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->dk = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->it1 = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->dit = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->out_vel    = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->out_stress = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->out_strain = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->i1_to_glob = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->j1_to_glob = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:    iosnap->k1_to_glob = (int *) malloc(number_of_snapshot * sizeof(int));
io_funcs.cu:  iosnap->siz_max_wrk = 0;
io_funcs.cu:    // scan output k-index in this proc
io_funcs.cu:    int gk1 = -1; int ngk =  0; int k_in_nc = 0;
io_funcs.cu:        if (gk1 == -1) {
io_funcs.cu:      if (gk > gdcurv->gnk2) break; // no need to larger k
io_funcs.cu:    // scan output j-index in this proc
io_funcs.cu:    int gj1 = -1; int ngj =  0; int j_in_nc = 0;
io_funcs.cu:        if (gj1 == -1) {
io_funcs.cu:      if (gj > gdcurv->gnj2) break;
io_funcs.cu:    // scan output i-index in this proc
io_funcs.cu:    int gi1 = -1; int ngi =  0; int i_in_nc = 0;
io_funcs.cu:        if (gi1 == -1) {
io_funcs.cu:      if (gi > gdcurv->gni2) break;
io_funcs.cu:      iosnap->i1[isnap]  = gd_info_ind_glphy2lcext_i(gi1, gdcurv);
io_funcs.cu:      iosnap->j1[isnap]  = gd_info_ind_glphy2lcext_j(gj1, gdcurv);
io_funcs.cu:      iosnap->k1[isnap]  = gd_info_ind_glphy2lcext_k(gk1, gdcurv);
io_funcs.cu:      iosnap->ni[isnap]  = ngi;
io_funcs.cu:      iosnap->nj[isnap]  = ngj;
io_funcs.cu:      iosnap->nk[isnap]  = ngk;
io_funcs.cu:      iosnap->di[isnap]  = snapshot_index_incre[iptr0+0];
io_funcs.cu:      iosnap->dj[isnap]  = snapshot_index_incre[iptr0+1];
io_funcs.cu:      iosnap->dk[isnap]  = snapshot_index_incre[iptr0+2];
io_funcs.cu:      iosnap->it1[isnap]  = snapshot_time_start[n];
io_funcs.cu:      iosnap->dit[isnap]  = snapshot_time_incre[n];
io_funcs.cu:      iosnap->out_vel   [isnap] = snapshot_save_velocity[n];
io_funcs.cu:      iosnap->out_stress[isnap] = snapshot_save_stress[n];
io_funcs.cu:      iosnap->out_strain[isnap] = snapshot_save_strain[n];
io_funcs.cu:      iosnap->i1_to_glob[isnap] = i_in_nc;
io_funcs.cu:      iosnap->j1_to_glob[isnap] = j_in_nc;
io_funcs.cu:      iosnap->k1_to_glob[isnap] = k_in_nc;
io_funcs.cu:      sprintf(iosnap->fname[isnap],"%s/%s_%s.nc",output_dir,
io_funcs.cu:      iosnap->siz_max_wrk = snap_siz > iosnap->siz_max_wrk ? 
io_funcs.cu:                            snap_siz : iosnap->siz_max_wrk;
io_funcs.cu:  iosnap->num_of_snap = isnap;
io_funcs.cu:  int num_of_fault = iofault->num_of_fault;
io_funcs.cu:  iofault_nc->varid = (int *)malloc(num_of_fault * num_of_var * sizeof(int));
io_funcs.cu:    ierr = nc_create(iofault->fault_fname[0], NC_CLOBBER, &(iofault_nc->ncid)); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(iofault_nc->ncid, "time", NC_UNLIMITED, &dimid[0]);       handle_nc_err(ierr);     
io_funcs.cu:    ierr = nc_def_dim(iofault_nc->ncid, "k"   , nk          , &dimid[1]);       handle_nc_err(ierr);   
io_funcs.cu:    ierr = nc_def_dim(iofault_nc->ncid, "j"   , nj          , &dimid[2]);       handle_nc_err(ierr); 
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "time",      NC_FLOAT, 1, dimid+0, &(iofault_nc->varid[0]));  
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "init_t0",   NC_FLOAT, 2, dimid+1, &(iofault_nc->varid[1]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "peak_Vs",   NC_FLOAT, 2, dimid+1, &(iofault_nc->varid[2]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "Tn" ,       NC_FLOAT, 3, dimid,   &(iofault_nc->varid[3]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "Ts1",       NC_FLOAT, 3, dimid,   &(iofault_nc->varid[4]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "Ts2",       NC_FLOAT, 3, dimid,   &(iofault_nc->varid[5]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "Vs",        NC_FLOAT, 3, dimid,   &(iofault_nc->varid[6]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "Vs1",       NC_FLOAT, 3, dimid,   &(iofault_nc->varid[7])); 
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "Vs2",       NC_FLOAT, 3, dimid,   &(iofault_nc->varid[8]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "slip",      NC_FLOAT, 3, dimid,   &(iofault_nc->varid[9]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "slip1",     NC_FLOAT, 3, dimid,   &(iofault_nc->varid[10]));
io_funcs.cu:    ierr = nc_def_var(iofault_nc->ncid, "slip2",     NC_FLOAT, 3, dimid,   &(iofault_nc->varid[11]));
io_funcs.cu:    nc_put_att_int(iofault_nc->ncid,NC_GLOBAL,"i_index_with_ghosts_in_this_thread",
io_funcs.cu:                   NC_INT,1,&iofault->fault_local_indx);
io_funcs.cu:    nc_put_att_int(iofault_nc->ncid,NC_GLOBAL,"coords_of_mpi_topo",
io_funcs.cu:    ierr = nc_enddef(iofault_nc->ncid); handle_nc_err(ierr);
io_funcs.cu:  int num_of_slice_x = ioslice->num_of_slice_x;
io_funcs.cu:  int num_of_slice_y = ioslice->num_of_slice_y;
io_funcs.cu:  int num_of_slice_z = ioslice->num_of_slice_z;
io_funcs.cu:  ioslice_nc->num_of_slice_x = num_of_slice_x;
io_funcs.cu:  ioslice_nc->num_of_slice_y = num_of_slice_y;
io_funcs.cu:  ioslice_nc->num_of_slice_z = num_of_slice_z;
io_funcs.cu:  ioslice_nc->num_of_vars    = num_of_vars   ;
io_funcs.cu:  ioslice_nc->ncid_slx = (int *)malloc(num_of_slice_x*sizeof(int));
io_funcs.cu:  ioslice_nc->ncid_sly = (int *)malloc(num_of_slice_y*sizeof(int));
io_funcs.cu:  ioslice_nc->ncid_slz = (int *)malloc(num_of_slice_z*sizeof(int));
io_funcs.cu:  ioslice_nc->timeid_slx = (int *)malloc(num_of_slice_x*sizeof(int));
io_funcs.cu:  ioslice_nc->timeid_sly = (int *)malloc(num_of_slice_y*sizeof(int));
io_funcs.cu:  ioslice_nc->timeid_slz = (int *)malloc(num_of_slice_z*sizeof(int));
io_funcs.cu:  ioslice_nc->varid_slx = (int *)malloc(num_of_vars*num_of_slice_x*sizeof(int));
io_funcs.cu:  ioslice_nc->varid_sly = (int *)malloc(num_of_vars*num_of_slice_y*sizeof(int));
io_funcs.cu:  ioslice_nc->varid_slz = (int *)malloc(num_of_vars*num_of_slice_z*sizeof(int));
io_funcs.cu:    ierr = nc_create(ioslice->slice_x_fname[n], NC_CLOBBER,
io_funcs.cu:                  &(ioslice_nc->ncid_slx[n])); 
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_slx[n], "time", NC_UNLIMITED, &dimid[0]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_slx[n], "k"   , nk          , &dimid[1]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_slx[n], "j"   , nj          , &dimid[2]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_var(ioslice_nc->ncid_slx[n], "time", NC_FLOAT, 1, dimid+0,
io_funcs.cu:                   &(ioslice_nc->timeid_slx[n]));
io_funcs.cu:      ierr = nc_def_var(ioslice_nc->ncid_slx[n], w3d_name[ivar], NC_FLOAT, 3, dimid,
io_funcs.cu:                     &(ioslice_nc->varid_slx[ivar+n*num_of_vars])); handle_nc_err(ierr);
io_funcs.cu:    nc_put_att_int(ioslice_nc->ncid_slx[n],NC_GLOBAL,"i_index_with_ghosts_in_this_thread",
io_funcs.cu:                   NC_INT,1,ioslice->slice_x_indx+n);
io_funcs.cu:    nc_put_att_int(ioslice_nc->ncid_slx[n],NC_GLOBAL,"coords_of_mpi_topo",
io_funcs.cu:    ierr = nc_enddef(ioslice_nc->ncid_slx[n]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_create(ioslice->slice_y_fname[n], NC_CLOBBER,
io_funcs.cu:                  &(ioslice_nc->ncid_sly[n])); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_sly[n], "time", NC_UNLIMITED, &dimid[0]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_sly[n], "k"   , nk          , &dimid[1]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_sly[n], "i"   , ni          , &dimid[2]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_var(ioslice_nc->ncid_sly[n], "time", NC_FLOAT, 1, dimid+0,
io_funcs.cu:                   &(ioslice_nc->timeid_sly[n])); handle_nc_err(ierr);
io_funcs.cu:      ierr = nc_def_var(ioslice_nc->ncid_sly[n], w3d_name[ivar], NC_FLOAT, 3, dimid,
io_funcs.cu:                     &(ioslice_nc->varid_sly[ivar+n*num_of_vars])); handle_nc_err(ierr);
io_funcs.cu:    nc_put_att_int(ioslice_nc->ncid_sly[n],NC_GLOBAL,"j_index_with_ghosts_in_this_thread",
io_funcs.cu:                   NC_INT,1,ioslice->slice_y_indx+n);
io_funcs.cu:    nc_put_att_int(ioslice_nc->ncid_sly[n],NC_GLOBAL,"coords_of_mpi_topo",
io_funcs.cu:    ierr = nc_enddef(ioslice_nc->ncid_sly[n]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_create(ioslice->slice_z_fname[n], NC_CLOBBER,
io_funcs.cu:                  &(ioslice_nc->ncid_slz[n])); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_slz[n], "time", NC_UNLIMITED, &dimid[0]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_slz[n], "j"   , nj          , &dimid[1]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_dim(ioslice_nc->ncid_slz[n], "i"   , ni          , &dimid[2]); handle_nc_err(ierr);
io_funcs.cu:    ierr = nc_def_var(ioslice_nc->ncid_slz[n], "time", NC_FLOAT, 1, dimid+0,
io_funcs.cu:                   &(ioslice_nc->timeid_slz[n])); handle_nc_err(ierr);
io_funcs.cu:      ierr = nc_def_var(ioslice_nc->ncid_slz[n], w3d_name[ivar], NC_FLOAT, 3, dimid,
io_funcs.cu:                     &(ioslice_nc->varid_slz[ivar+n*num_of_vars])); handle_nc_err(ierr);
io_funcs.cu:    nc_put_att_int(ioslice_nc->ncid_slz[n],NC_GLOBAL,"k_index_with_ghosts_in_this_thread",
io_funcs.cu:                   NC_INT,1,ioslice->slice_z_indx+n);
io_funcs.cu:    nc_put_att_int(ioslice_nc->ncid_slz[n],NC_GLOBAL,"coords_of_mpi_topo",
io_funcs.cu:    ierr = nc_enddef(ioslice_nc->ncid_slz[n]); handle_nc_err(ierr);
io_funcs.cu:  int num_of_snap = iosnap->num_of_snap;
io_funcs.cu:  char **snap_fname = iosnap->fname;
io_funcs.cu:  iosnap_nc->num_of_snap = num_of_snap;
io_funcs.cu:  iosnap_nc->ncid = (int *)malloc(num_of_snap*sizeof(int));
io_funcs.cu:  iosnap_nc->timeid = (int *)malloc(num_of_snap*sizeof(int));
io_funcs.cu:  iosnap_nc->varid_V = (int *)malloc(num_of_snap*CONST_NDIM*sizeof(int));
io_funcs.cu:  iosnap_nc->varid_T = (int *)malloc(num_of_snap*CONST_NDIM_2*sizeof(int));
io_funcs.cu:  iosnap_nc->varid_E = (int *)malloc(num_of_snap*CONST_NDIM_2*sizeof(int));
io_funcs.cu:  iosnap_nc->cur_it = (int *)malloc(num_of_snap*sizeof(int));
io_funcs.cu:    iosnap_nc->cur_it[n] = 0;
io_funcs.cu:  int *ncid   = iosnap_nc->ncid;
io_funcs.cu:  int *timeid = iosnap_nc->timeid;
io_funcs.cu:  int *varid_V = iosnap_nc->varid_V;
io_funcs.cu:  int *varid_T = iosnap_nc->varid_T;
io_funcs.cu:  int *varid_E = iosnap_nc->varid_E;
io_funcs.cu:    int snap_i1  = iosnap->i1[n];
io_funcs.cu:    int snap_j1  = iosnap->j1[n];
io_funcs.cu:    int snap_k1  = iosnap->k1[n];
io_funcs.cu:    int snap_ni  = iosnap->ni[n];
io_funcs.cu:    int snap_nj  = iosnap->nj[n];
io_funcs.cu:    int snap_nk  = iosnap->nk[n];
io_funcs.cu:    int snap_di  = iosnap->di[n];
io_funcs.cu:    int snap_dj  = iosnap->dj[n];
io_funcs.cu:    int snap_dk  = iosnap->dk[n];
io_funcs.cu:    int snap_out_V = iosnap->out_vel[n];
io_funcs.cu:    int snap_out_T = iosnap->out_stress[n];
io_funcs.cu:    int snap_out_E = iosnap->out_strain[n];
io_funcs.cu:    int g_start[] = { iosnap->i1_to_glob[n],
io_funcs.cu:                      iosnap->j1_to_glob[n],
io_funcs.cu:                      iosnap->k1_to_glob[n] };
io_funcs.cu:  int   nj  = gdcurv->nj;
io_funcs.cu:  int   nk  = gdcurv->nk;
io_funcs.cu:  nc_put_var1_float(iofault_nc->ncid, iofault_nc->varid[0],
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[3], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[4], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[5], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[6], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[7], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[8], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[9], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[10], startp, countp, buff);
io_funcs.cu:  nc_put_vara_float(iofault_nc->ncid, iofault_nc->varid[11], startp, countp, buff);
io_funcs.cu:  int nj  = gdcurv->nj ;
io_funcs.cu:  int nk  = gdcurv->nk ;
io_funcs.cu:  nc_put_var_float(iofault_nc->ncid, iofault_nc->varid[1], buff);
io_funcs.cu:  nc_put_var_float(iofault_nc->ncid, iofault_nc->varid[2], buff);
io_funcs.cu:  int ni1 = gdcurv->ni1;
io_funcs.cu:  int ni2 = gdcurv->ni2;
io_funcs.cu:  int nj1 = gdcurv->nj1;
io_funcs.cu:  int nj2 = gdcurv->nj2;
io_funcs.cu:  int nk1 = gdcurv->nk1;
io_funcs.cu:  int nk2 = gdcurv->nk2;
io_funcs.cu:  int ni  = gdcurv->ni ;
io_funcs.cu:  int nj  = gdcurv->nj ;
io_funcs.cu:  int nk  = gdcurv->nk ;
io_funcs.cu:  size_t siz_iy = gdcurv->siz_iy;
io_funcs.cu:  size_t siz_iz = gdcurv->siz_iz;
io_funcs.cu:  size_t siz_icmp = gdcurv->siz_icmp;
io_funcs.cu:  int  num_of_vars = ioslice_nc->num_of_vars;
io_funcs.cu:  //-- slice x, 
io_funcs.cu:  for (int n=0; n < ioslice_nc->num_of_slice_x; n++)
io_funcs.cu:    nc_put_var1_float(ioslice_nc->ncid_slx[n], ioslice_nc->timeid_slx[n],
io_funcs.cu:    int i = ioslice->slice_x_indx[n];
io_funcs.cu:    grid.x = (nj+block.x-1)/block.x;
io_funcs.cu:    grid.y = (nk+block.y-1)/block.y;
io_funcs.cu:      nc_put_vara_float(ioslice_nc->ncid_slx[n], 
io_funcs.cu:                        ioslice_nc->varid_slx[n*num_of_vars + ivar],
io_funcs.cu:  for (int n=0; n < ioslice_nc->num_of_slice_y; n++)
io_funcs.cu:    nc_put_var1_float(ioslice_nc->ncid_sly[n], ioslice_nc->timeid_sly[n],
io_funcs.cu:    int j = ioslice->slice_y_indx[n];
io_funcs.cu:    grid.x = (ni+block.x-1)/block.x;
io_funcs.cu:    grid.y = (nk+block.y-1)/block.y;
io_funcs.cu:      nc_put_vara_float(ioslice_nc->ncid_sly[n], 
io_funcs.cu:                        ioslice_nc->varid_sly[n*num_of_vars + ivar],
io_funcs.cu:  for (int n=0; n < ioslice_nc->num_of_slice_z; n++)
io_funcs.cu:    nc_put_var1_float(ioslice_nc->ncid_slz[n], ioslice_nc->timeid_slz[n],
io_funcs.cu:    int k = ioslice->slice_z_indx[n];
io_funcs.cu:    grid.x = (ni+block.x-1)/block.x;
io_funcs.cu:    grid.y = (nj+block.y-1)/block.y;
io_funcs.cu:      nc_put_vara_float(ioslice_nc->ncid_slz[n], 
io_funcs.cu:                          ioslice_nc->varid_slz[n*num_of_vars + ivar],
io_funcs.cu:  int num_of_snap = iosnap->num_of_snap;
io_funcs.cu:  size_t siz_iy = gdcurv->siz_iy;
io_funcs.cu:  size_t siz_iz = gdcurv->siz_iz;
io_funcs.cu:  size_t siz_icmp = gdcurv->siz_icmp;
io_funcs.cu:    int snap_i1  = iosnap->i1[n];
io_funcs.cu:    int snap_j1  = iosnap->j1[n];
io_funcs.cu:    int snap_k1  = iosnap->k1[n];
io_funcs.cu:    int snap_ni  = iosnap->ni[n];
io_funcs.cu:    int snap_nj  = iosnap->nj[n];
io_funcs.cu:    int snap_nk  = iosnap->nk[n];
io_funcs.cu:    int snap_di  = iosnap->di[n];
io_funcs.cu:    int snap_dj  = iosnap->dj[n];
io_funcs.cu:    int snap_dk  = iosnap->dk[n];
io_funcs.cu:    int snap_it1 = iosnap->it1[n];
io_funcs.cu:    int snap_dit = iosnap->dit[n];
io_funcs.cu:    int snap_out_V = iosnap->out_vel[n];
io_funcs.cu:    int snap_out_T = iosnap->out_stress[n];
io_funcs.cu:    int snap_out_E = iosnap->out_strain[n];
io_funcs.cu:    int snap_it_mod = (it - snap_it1) % snap_dit;
io_funcs.cu:    int snap_it_num = (it - snap_it1) / snap_dit;
io_funcs.cu:    int snap_nt_total = (nt_total - snap_it1) / snap_dit;
io_funcs.cu:      size_t startp[] = { iosnap_nc->cur_it[n], 0, 0, 0 };
io_funcs.cu:      size_t start_tdim = iosnap_nc->cur_it[n];
io_funcs.cu:      nc_put_var1_float(iosnap_nc->ncid[n],iosnap_nc->timeid[n],&start_tdim,&time);
io_funcs.cu:      grid.x = (snap_ni+block.x-1)/block.x;
io_funcs.cu:      grid.y = (snap_nj+block.y-1)/block.y;
io_funcs.cu:      grid.z = (snap_nk+block.z-1)/block.z;
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Vx_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_V[n*CONST_NDIM+0],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Vy_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_V[n*CONST_NDIM+1],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Vz_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_V[n*CONST_NDIM+2],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Txx_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_T[n*CONST_NDIM_2+0],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Tyy_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_T[n*CONST_NDIM_2+1],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Tzz_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_T[n*CONST_NDIM_2+2],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Txz_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_T[n*CONST_NDIM_2+3],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Tyz_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_T[n*CONST_NDIM_2+4],
io_funcs.cu:        io_snap_pack_buff<<<grid, block>>> (w_end_d + wav->Txy_pos,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_T[n*CONST_NDIM_2+5],
io_funcs.cu:        io_snap_stress_to_strain_eliso(md->lambda,md->mu,
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_E[n*CONST_NDIM_2+0],
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_E[n*CONST_NDIM_2+1],
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_E[n*CONST_NDIM_2+2],
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_E[n*CONST_NDIM_2+3],
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_E[n*CONST_NDIM_2+4],
io_funcs.cu:        nc_put_vara_float(iosnap_nc->ncid[n],iosnap_nc->varid_E[n*CONST_NDIM_2+5],
io_funcs.cu:        iosnap_nc->cur_it[n] += 1;
io_funcs.cu:        E2 = - lam / ( 2.0 * mu * (3.0 * lam + 2.0 * mu));
io_funcs.cu:        Exx[iptr_snap] = E0 - (E2 - E1) * Txx[iptr_snap];
io_funcs.cu:        Eyy[iptr_snap] = E0 - (E2 - E1) * Tyy[iptr_snap];
io_funcs.cu:        Ezz[iptr_snap] = E0 - (E2 - E1) * Tzz[iptr_snap];
io_funcs.cu:  for (int n=0; n < ioslice_nc->num_of_slice_x; n++) {
io_funcs.cu:    nc_close(ioslice_nc->ncid_slx[n]);
io_funcs.cu:  for (int n=0; n < ioslice_nc->num_of_slice_y; n++) {
io_funcs.cu:    nc_close(ioslice_nc->ncid_sly[n]);
io_funcs.cu:  for (int n=0; n < ioslice_nc->num_of_slice_z; n++) {
io_funcs.cu:    nc_close(ioslice_nc->ncid_slz[n]);
io_funcs.cu:  for (int n=0; n < iosnap_nc->num_of_snap; n++)
io_funcs.cu:    nc_close(iosnap_nc->ncid[n]);
io_funcs.cu:    nc_close(iofault_nc->ncid);
io_funcs.cu:  grid.x = (ncmp+block.x-1)/block.x;
io_funcs.cu:  for (int n=0; n < iorecv->total_number; n++)
io_funcs.cu:    iorecv_one_t *this_recv = iorecv->recvone + n;
io_funcs.cu:    size_t *indx1d = this_recv->indx1d;
io_funcs.cu:    Lx2 = this_recv->di; Lx1 = 1.0 - Lx2;
io_funcs.cu:    Ly2 = this_recv->dj; Ly1 = 1.0 - Ly2;
io_funcs.cu:    Lz2 = this_recv->dk; Lz1 = 1.0 - Lz2;
io_funcs.cu:      int iptr_sta = icmp * iorecv->max_nt + it;
io_funcs.cu:      this_recv->seismo[iptr_sta] =  buff[CONST_2_NDIM*icmp + 0] * Lx1 * Ly1 * Lz1
io_funcs.cu:  grid.x = (ncmp+block.x-1)/block.x;
io_funcs.cu:  for (int n=0; n < ioline->num_of_lines; n++)
io_funcs.cu:    int   *this_line_iptr   = ioline->recv_iptr[n];
io_funcs.cu:    float *this_line_seismo = ioline->recv_seismo[n];
io_funcs.cu:    for (int ir=0; ir < ioline->line_nr[n]; ir++)
io_funcs.cu:      float *this_seismo = this_line_seismo + ir * ioline->max_nt * ncmp;
io_funcs.cu:        int iptr_seismo = icmp * ioline->max_nt + it;
io_funcs.cu:  for (int ir=0; ir < iorecv->total_number; ir++)
io_funcs.cu:    iorecv_one_t *this_recv = iorecv->recvone + ir;
io_funcs.cu:      float *this_trace = this_recv->seismo + icmp * iorecv->max_nt;
io_funcs.cu:                      this_recv->name, cmp_name[icmp]);
io_funcs.cu:            this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:            dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:  for (int ir=0; ir < iorecv->total_number; ir++)
io_funcs.cu:    iorecv_one_t *this_recv = iorecv->recvone + ir;
io_funcs.cu:    size_t iptr = this_recv->indx1d[0];
io_funcs.cu:    // cmp seq hard-coded, need to revise in the future
io_funcs.cu:    float *Txx = this_recv->seismo + 3 * iorecv->max_nt;
io_funcs.cu:    float *Tyy = this_recv->seismo + 4 * iorecv->max_nt;
io_funcs.cu:    float *Tzz = this_recv->seismo + 5 * iorecv->max_nt;
io_funcs.cu:    float *Tyz = this_recv->seismo + 6 * iorecv->max_nt;
io_funcs.cu:    float *Txz = this_recv->seismo + 7 * iorecv->max_nt;
io_funcs.cu:    float *Txy = this_recv->seismo + 8 * iorecv->max_nt;
io_funcs.cu:    float E2 = - lam / ( 2.0 * mu * (3.0 * lam + 2.0 * mu));
io_funcs.cu:    for (int it = 0; it < iorecv->max_nt; it++)
io_funcs.cu:      Txx[it] = E0 - (E2 - E1) * Txx[it];
io_funcs.cu:      Tyy[it] = E0 - (E2 - E1) * Tyy[it];
io_funcs.cu:      Tzz[it] = E0 - (E2 - E1) * Tzz[it];
io_funcs.cu:    sprintf(ou_file,"%s/%s.%s.sac", output_dir, this_recv->name, "Exx");
io_funcs.cu:          this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:          dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:    sprintf(ou_file,"%s/%s.%s.sac", output_dir, this_recv->name, "Eyy");
io_funcs.cu:          this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:          dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:    sprintf(ou_file,"%s/%s.%s.sac", output_dir, this_recv->name, "Ezz");
io_funcs.cu:          this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:          dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:    sprintf(ou_file,"%s/%s.%s.sac", output_dir, this_recv->name, "Eyz");
io_funcs.cu:          this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:          dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:    sprintf(ou_file,"%s/%s.%s.sac", output_dir, this_recv->name, "Exz");
io_funcs.cu:          this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:          dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:    sprintf(ou_file,"%s/%s.%s.sac", output_dir, this_recv->name, "Exy");
io_funcs.cu:          this_recv->x, this_recv->y, this_recv->z,
io_funcs.cu:          dt, dt, iorecv->max_nt, err_message);
io_funcs.cu:  for (int n=0; n < ioline->num_of_lines; n++)
io_funcs.cu:    int   *this_line_iptr   = ioline->recv_iptr[n];
io_funcs.cu:    float *this_line_seismo = ioline->recv_seismo[n];
io_funcs.cu:    for (int ir=0; ir < ioline->line_nr[n]; ir++)
io_funcs.cu:      float *this_seismo = this_line_seismo + ir * ioline->max_nt * ioline->ncmp;
io_funcs.cu:      for (int icmp=0; icmp < ioline->ncmp; icmp++)
io_funcs.cu:        float *this_trace = this_seismo + icmp * ioline->max_nt;
io_funcs.cu:                  ioline->line_name[n],ioline->recv_seq[n][ir],
io_funcs.cu:              ioline->recv_x[n][ir],
io_funcs.cu:              ioline->recv_y[n][ir],
io_funcs.cu:              ioline->recv_z[n][ir],
io_funcs.cu:              dt, dt, ioline->max_nt, err_message);
io_funcs.cu:  fprintf(stdout, "-------------------------------------------------------\n");
io_funcs.cu:  fprintf(stdout, "--> slice output information:\n");
io_funcs.cu:  fprintf(stdout, "-------------------------------------------------------\n");
io_funcs.cu:  fprintf(stdout, "--> num_of_slice_x = %d\n", ioslice->num_of_slice_x);
io_funcs.cu:  for (int n=0; n<ioslice->num_of_slice_x; n++)
io_funcs.cu:    fprintf(stdout, "  #%d, i=%d, fname=%s\n", n, ioslice->slice_x_indx[n],ioslice->slice_x_fname[n]);
io_funcs.cu:  fprintf(stdout, "--> num_of_slice_y = %d\n", ioslice->num_of_slice_y);
io_funcs.cu:  for (int n=0; n<ioslice->num_of_slice_y; n++)
io_funcs.cu:    fprintf(stdout, "  #%d, j=%d, fname=%s\n", n, ioslice->slice_y_indx[n],ioslice->slice_y_fname[n]);
io_funcs.cu:  fprintf(stdout, "--> num_of_slice_z = %d\n", ioslice->num_of_slice_z);
io_funcs.cu:  for (int n=0; n<ioslice->num_of_slice_z; n++)
io_funcs.cu:    fprintf(stdout, "  #%d, k=%d, fname=%s\n", n, ioslice->slice_z_indx[n],ioslice->slice_z_fname[n]);
io_funcs.cu:  fprintf(stdout, "--> num_of_snap = %d\n", iosnap->num_of_snap);
io_funcs.cu:  for (int n=0; n < iosnap->num_of_snap; n++)
io_funcs.cu:              iosnap->i1[n], iosnap->j1[n], iosnap->k1[n],
io_funcs.cu:              iosnap->ni[n], iosnap->nj[n], iosnap->nk[n],
io_funcs.cu:              iosnap->di[n], iosnap->dj[n], iosnap->dk[n],
io_funcs.cu:              iosnap->it1[n], iosnap->dit[n], 
io_funcs.cu:              iosnap->out_vel[n],
io_funcs.cu:              iosnap->out_stress[n],
io_funcs.cu:              iosnap->out_strain[n],
io_funcs.cu:              iosnap->i1_to_glob[n],
io_funcs.cu:              iosnap->j1_to_glob[n],
io_funcs.cu:              iosnap->k1_to_glob[n]);
io_funcs.cu:  //fprintf(stdout, "--> station information.\n");
io_funcs.cu:  //fprintf(stdout, " number_of_station  = %4d\n", blk->number_of_station);
io_funcs.cu:  //fprintf(stdout, " seismo_format_sac  = %4d\n", blk->seismo_format_sac );
io_funcs.cu:  //fprintf(stdout, " seismo_format_segy = %4d\n", blk->seismo_format_segy);
io_funcs.cu:  //if(blk->number_of_station > 0)
io_funcs.cu:  //for(n=0; n<blk->number_of_station; n++)
io_funcs.cu:  //            blk->station_coord[indx], blk->station_coord[indx+1],
io_funcs.cu:  //            blk->station_indx [indx], blk->station_indx [indx+1]);
io_funcs.cu:  int nx = gdcurv->nx; 
io_funcs.cu:  int ny = gdcurv->ny;
io_funcs.cu:  int ni = gdcurv->ni; 
io_funcs.cu:  int nj = gdcurv->nj;
io_funcs.cu:  int gni1 = gdcurv->gni1; 
io_funcs.cu:  int gnj1 = gdcurv->gnj1; 
io_funcs.cu: * get next non-comment line
io_funcs.cu:  if (len > 0 && str[len-1] == '\n') {
io_funcs.cu:    str[len-1] = '\0';
io_funcs.cu:  //fprintf(stdout," --return: %s\n", str);
main_curv_col_el_3d.cu:  // get commond-line argument
main_curv_col_el_3d.cu:  //-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  //-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  //-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  //-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  //-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  //-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  fd_t            *fd            = blk->fd    ;
main_curv_col_el_3d.cu:  mympi_t         *mympi         = blk->mympi ;
main_curv_col_el_3d.cu:  gdcurv_t        *gdcurv        = blk->gdcurv;
main_curv_col_el_3d.cu:  gd_metric_t     *gd_metric     = blk->gd_metric;
main_curv_col_el_3d.cu:  md_t            *md            = blk->md;
main_curv_col_el_3d.cu:  wav_t           *wav           = blk->wav;
main_curv_col_el_3d.cu:  bdryfree_t      *bdryfree      = blk->bdryfree;
main_curv_col_el_3d.cu:  bdrypml_t       *bdrypml       = blk->bdrypml;
main_curv_col_el_3d.cu:  iorecv_t        *iorecv        = blk->iorecv;
main_curv_col_el_3d.cu:  ioline_t        *ioline        = blk->ioline;
main_curv_col_el_3d.cu:  iofault_t       *iofault       = blk->iofault;
main_curv_col_el_3d.cu:  ioslice_t       *ioslice       = blk->ioslice;
main_curv_col_el_3d.cu:  iosnap_t        *iosnap        = blk->iosnap;
main_curv_col_el_3d.cu:  fault_t         *fault         = blk->fault;
main_curv_col_el_3d.cu:  fault_coef_t    *fault_coef    = blk->fault_coef;
main_curv_col_el_3d.cu:  fault_wav_t     *fault_wav     = blk->fault_wav;
main_curv_col_el_3d.cu:            par->number_of_mpiprocs_x,
main_curv_col_el_3d.cu:            par->number_of_mpiprocs_y,
main_curv_col_el_3d.cu:            par->number_of_mpiprocs_z,
main_curv_col_el_3d.cu:              par->number_of_total_grid_points_x,
main_curv_col_el_3d.cu:              par->number_of_total_grid_points_y,
main_curv_col_el_3d.cu:              par->number_of_total_grid_points_z,
main_curv_col_el_3d.cu:              par->abs_num_of_layers,
main_curv_col_el_3d.cu:              fd->fdx_nghosts,
main_curv_col_el_3d.cu:              fd->fdy_nghosts,
main_curv_col_el_3d.cu:              fd->fdz_nghosts,
main_curv_col_el_3d.cu:                 par->output_dir,
main_curv_col_el_3d.cu:                 par->grid_export_dir,
main_curv_col_el_3d.cu:                 par->media_export_dir,
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- grid generation or import
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  switch (par->grid_generation_itype)
main_curv_col_el_3d.cu:        gd_curv_gen_fault(gdcurv, par->number_of_total_grid_points_x, par->dh, par->fault_coord_nc);
main_curv_col_el_3d.cu:        gd_curv_exchange(gdcurv,gdcurv->v4d,gdcurv->ncmp,mympi->neighid,mympi->topocomm);
main_curv_col_el_3d.cu:  if (par->is_export_grid==1)
main_curv_col_el_3d.cu:                         blk->output_fname_part,
main_curv_col_el_3d.cu:                         blk->grid_export_dir);
main_curv_col_el_3d.cu:  fprintf(stdout, " --> done\n"); fflush(stdout);
main_curv_col_el_3d.cu:  switch (par->metric_method_itype)
main_curv_col_el_3d.cu:        gd_curv_exchange(gdcurv,gd_metric->v4d,gd_metric->ncmp,mympi->neighid,mympi->topocomm);
main_curv_col_el_3d.cu:        gd_curv_metric_import(gd_metric, blk->output_fname_part, par->metric_import_dir);
main_curv_col_el_3d.cu:  if (myid==0 && verbose>0) { fprintf(stdout, " --> done\n"); fflush(stdout); }
main_curv_col_el_3d.cu:  if (par->is_export_metric==1)
main_curv_col_el_3d.cu:                          blk->output_fname_part,
main_curv_col_el_3d.cu:                          blk->grid_export_dir);
main_curv_col_el_3d.cu:  if (myid==0 && verbose>0) { fprintf(stdout, " --> done\n"); fflush(stdout); }
main_curv_col_el_3d.cu:  fprintf(stdout,"gdcurv info at topoid=%d,%d,%d\n", mympi->topoid[0],mympi->topoid[1],mympi->topoid[2]); 
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- media generation or import
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  md_init(gdcurv, md, par->media_itype, par->visco_itype);
main_curv_col_el_3d.cu:  switch (par->media_input_itype)
main_curv_col_el_3d.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_ISO) {
main_curv_col_el_3d.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_VTI) {
main_curv_col_el_3d.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_ANISO) {
main_curv_col_el_3d.cu:        if (md->visco_type == CONST_VISCO_GRAVES_QS) {
main_curv_col_el_3d.cu:          md_gen_uniform_Qs(md, par->visco_Qs_freq);
main_curv_col_el_3d.cu:        md_import(md, blk->output_fname_part, par->media_import_dir);
main_curv_col_el_3d.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_ISO)
main_curv_col_el_3d.cu:            media_layer2model_el_iso(md->lambda, md->mu, md->rho,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     par->media_input_file,
main_curv_col_el_3d.cu:                                     par->equivalent_medium_method);
main_curv_col_el_3d.cu:        else if (md->medium_type == CONST_MEDIUM_ELASTIC_VTI)
main_curv_col_el_3d.cu:            media_layer2model_el_vti(md->rho, md->c11, md->c33,
main_curv_col_el_3d.cu:                                     md->c55,md->c66,md->c13,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     par->media_input_file,
main_curv_col_el_3d.cu:                                     par->equivalent_medium_method);
main_curv_col_el_3d.cu:        } else if (md->medium_type == CONST_MEDIUM_ELASTIC_ANISO)
main_curv_col_el_3d.cu:            media_layer2model_el_aniso(md->rho,
main_curv_col_el_3d.cu:                                     md->c11,md->c12,md->c13,md->c14,md->c15,md->c16,
main_curv_col_el_3d.cu:                                             md->c22,md->c23,md->c24,md->c25,md->c26,
main_curv_col_el_3d.cu:                                                     md->c33,md->c34,md->c35,md->c36,
main_curv_col_el_3d.cu:                                                             md->c44,md->c45,md->c46,
main_curv_col_el_3d.cu:                                                                     md->c55,md->c56,
main_curv_col_el_3d.cu:                                                                             md->c66,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     par->media_input_file,
main_curv_col_el_3d.cu:                                     par->equivalent_medium_method);
main_curv_col_el_3d.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_ISO)
main_curv_col_el_3d.cu:            media_grid2model_el_iso(md->rho,md->lambda, md->mu, 
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     gdcurv->xmin,gdcurv->xmax,
main_curv_col_el_3d.cu:                                     gdcurv->ymin,gdcurv->ymax,
main_curv_col_el_3d.cu:                                     par->media_input_file,
main_curv_col_el_3d.cu:                                     par->equivalent_medium_method);
main_curv_col_el_3d.cu:        else if (md->medium_type == CONST_MEDIUM_ELASTIC_VTI)
main_curv_col_el_3d.cu:            media_grid2model_el_vti(md->rho, md->c11, md->c33,
main_curv_col_el_3d.cu:                                     md->c55,md->c66,md->c13,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     gdcurv->xmin,gdcurv->xmax,
main_curv_col_el_3d.cu:                                     gdcurv->ymin,gdcurv->ymax,
main_curv_col_el_3d.cu:                                     par->media_input_file,
main_curv_col_el_3d.cu:                                     par->equivalent_medium_method);
main_curv_col_el_3d.cu:        } else if (md->medium_type == CONST_MEDIUM_ELASTIC_ANISO)
main_curv_col_el_3d.cu:            media_grid2model_el_aniso(md->rho,
main_curv_col_el_3d.cu:                                     md->c11,md->c12,md->c13,md->c14,md->c15,md->c16,
main_curv_col_el_3d.cu:                                             md->c22,md->c23,md->c24,md->c25,md->c26,
main_curv_col_el_3d.cu:                                                     md->c33,md->c34,md->c35,md->c36,
main_curv_col_el_3d.cu:                                                             md->c44,md->c45,md->c46,
main_curv_col_el_3d.cu:                                                                     md->c55,md->c56,
main_curv_col_el_3d.cu:                                                                             md->c66,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     gdcurv->xmin,gdcurv->xmax,
main_curv_col_el_3d.cu:                                     gdcurv->ymin,gdcurv->ymax,
main_curv_col_el_3d.cu:                                     par->media_input_file,
main_curv_col_el_3d.cu:                                     par->equivalent_medium_method);
main_curv_col_el_3d.cu:        if (md->medium_type == CONST_MEDIUM_ELASTIC_ISO)
main_curv_col_el_3d.cu:            media_bin2model_el_iso(md->rho,md->lambda, md->mu, 
main_curv_col_el_3d.cu:                                   gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                   gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                   gdcurv->xmin,gdcurv->xmax,
main_curv_col_el_3d.cu:                                   gdcurv->ymin,gdcurv->ymax,
main_curv_col_el_3d.cu:                                   par->bin_order,
main_curv_col_el_3d.cu:                                   par->bin_size,
main_curv_col_el_3d.cu:                                   par->bin_spacing,
main_curv_col_el_3d.cu:                                   par->bin_origin,
main_curv_col_el_3d.cu:                                   par->bin_file_rho,
main_curv_col_el_3d.cu:                                   par->bin_file_vp,
main_curv_col_el_3d.cu:                                   par->bin_file_vs);
main_curv_col_el_3d.cu:        else if (md->medium_type == CONST_MEDIUM_ELASTIC_VTI)
main_curv_col_el_3d.cu:            media_bin2model_el_vti_thomsen(md->rho, md->c11, md->c33,
main_curv_col_el_3d.cu:                                     md->c55,md->c66,md->c13,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     gdcurv->xmin,gdcurv->xmax,
main_curv_col_el_3d.cu:                                     gdcurv->ymin,gdcurv->ymax,
main_curv_col_el_3d.cu:                                     par->bin_order,
main_curv_col_el_3d.cu:                                     par->bin_size,
main_curv_col_el_3d.cu:                                     par->bin_spacing,
main_curv_col_el_3d.cu:                                     par->bin_origin,
main_curv_col_el_3d.cu:                                     par->bin_file_rho,
main_curv_col_el_3d.cu:                                     par->bin_file_vp,
main_curv_col_el_3d.cu:                                     par->bin_file_epsilon,
main_curv_col_el_3d.cu:                                     par->bin_file_delta,
main_curv_col_el_3d.cu:                                     par->bin_file_gamma);
main_curv_col_el_3d.cu:        else if (md->medium_type == CONST_MEDIUM_ELASTIC_ANISO)
main_curv_col_el_3d.cu:            media_bin2model_el_aniso(md->rho,
main_curv_col_el_3d.cu:                                     md->c11,md->c12,md->c13,md->c14,md->c15,md->c16,
main_curv_col_el_3d.cu:                                             md->c22,md->c23,md->c24,md->c25,md->c26,
main_curv_col_el_3d.cu:                                                     md->c33,md->c34,md->c35,md->c36,
main_curv_col_el_3d.cu:                                                             md->c44,md->c45,md->c46,
main_curv_col_el_3d.cu:                                                                     md->c55,md->c56,
main_curv_col_el_3d.cu:                                                                             md->c66,
main_curv_col_el_3d.cu:                                     gdcurv->x3d, gdcurv->y3d, gdcurv->z3d,
main_curv_col_el_3d.cu:                                     gdcurv->nx, gdcurv->ny, gdcurv->nz,
main_curv_col_el_3d.cu:                                     gdcurv->xmin,gdcurv->xmax,
main_curv_col_el_3d.cu:                                     gdcurv->ymin,gdcurv->ymax,
main_curv_col_el_3d.cu:                                     par->bin_order,
main_curv_col_el_3d.cu:                                     par->bin_size,
main_curv_col_el_3d.cu:                                     par->bin_spacing,
main_curv_col_el_3d.cu:                                     par->bin_origin,
main_curv_col_el_3d.cu:                                     par->bin_file_rho,
main_curv_col_el_3d.cu:                                     par->bin_file_c11,
main_curv_col_el_3d.cu:                                     par->bin_file_c12,
main_curv_col_el_3d.cu:                                     par->bin_file_c13,
main_curv_col_el_3d.cu:                                     par->bin_file_c14,
main_curv_col_el_3d.cu:                                     par->bin_file_c15,
main_curv_col_el_3d.cu:                                     par->bin_file_c16,
main_curv_col_el_3d.cu:                                     par->bin_file_c22,
main_curv_col_el_3d.cu:                                     par->bin_file_c23,
main_curv_col_el_3d.cu:                                     par->bin_file_c24,
main_curv_col_el_3d.cu:                                     par->bin_file_c25,
main_curv_col_el_3d.cu:                                     par->bin_file_c26,
main_curv_col_el_3d.cu:                                     par->bin_file_c33,
main_curv_col_el_3d.cu:                                     par->bin_file_c34,
main_curv_col_el_3d.cu:                                     par->bin_file_c35,
main_curv_col_el_3d.cu:                                     par->bin_file_c36,
main_curv_col_el_3d.cu:                                     par->bin_file_c44,
main_curv_col_el_3d.cu:                                     par->bin_file_c45,
main_curv_col_el_3d.cu:                                     par->bin_file_c46,
main_curv_col_el_3d.cu:                                     par->bin_file_c55,
main_curv_col_el_3d.cu:                                     par->bin_file_c56,
main_curv_col_el_3d.cu:                                     par->bin_file_c66);
main_curv_col_el_3d.cu:  if (par->is_export_media==1)
main_curv_col_el_3d.cu:              blk->output_fname_part,
main_curv_col_el_3d.cu:              blk->media_export_dir);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- estimate/check/set time step
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  float   t0 = par->time_start;
main_curv_col_el_3d.cu:  float   dt = par->size_of_time_step;
main_curv_col_el_3d.cu:  int     nt_total = par->number_of_time_steps;
main_curv_col_el_3d.cu:  if (par->time_check_stability==1)
main_curv_col_el_3d.cu:    //-- estimate time step
main_curv_col_el_3d.cu:    blk_dt_esti_curv(gdcurv,md,fd->CFL,
main_curv_col_el_3d.cu:    //-- print for QC
main_curv_col_el_3d.cu:    fprintf(stdout, "-> topoid=[%d,%d,%d], dtmax=%f, Vp=%f, L=%f, i=%d, j=%d, k=%d\n",
main_curv_col_el_3d.cu:            mympi->topoid[0],mympi->topoid[1], mympi->topoid[2], dtmax, dtmaxVp, dtmaxL, dtmaxi, dtmaxj, dtmaxk);
main_curv_col_el_3d.cu:          MPI_Abort(MPI_COMM_WORLD,-1);
main_curv_col_el_3d.cu:       //-- auto set stept
main_curv_col_el_3d.cu:          nt_total = (int) (par->time_window_length / dt + 0.5);
main_curv_col_el_3d.cu:          fprintf(stdout, "-> Set dt       = %g according to maximum allowed value\n", dt);
main_curv_col_el_3d.cu:          fprintf(stdout, "-> Set nt_total = %d\n", nt_total);
main_curv_col_el_3d.cu:       //-- if input dt, check value
main_curv_col_el_3d.cu:          MPI_Abort(MPI_COMM_WORLD, -1);
main_curv_col_el_3d.cu:    //-- from root to all threads
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- fault init
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  fault_coef_cal(gdcurv, gd_metric, md, par->fault_i_global_index, fault_coef);
main_curv_col_el_3d.cu:  fault_set(fault, fault_coef, gdcurv, par->bdry_has_free, par->fault_grid, par->init_stress_nc);
main_curv_col_el_3d.cu:  fault_wav_init(gdcurv, fault_wav, fd->num_rk_stages);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- allocate main var
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  wav_init(gdcurv, wav, fd->num_rk_stages);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- setup output, may require coord info
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:                      nt_total, wav->ncmp, 
main_curv_col_el_3d.cu:                      par->number_of_mpiprocs_z,
main_curv_col_el_3d.cu:                      par->in_station_file,
main_curv_col_el_3d.cu:                 wav->ncmp,
main_curv_col_el_3d.cu:                 par->number_of_receiver_line,
main_curv_col_el_3d.cu:                 par->receiver_line_index_start,
main_curv_col_el_3d.cu:                 par->receiver_line_index_incre,
main_curv_col_el_3d.cu:                 par->receiver_line_count,
main_curv_col_el_3d.cu:                 par->receiver_line_name);
main_curv_col_el_3d.cu:                  par->fault_i_global_index, 
main_curv_col_el_3d.cu:                  blk->output_fname_part,
main_curv_col_el_3d.cu:                  blk->output_dir);
main_curv_col_el_3d.cu:                  par->number_of_slice_x,
main_curv_col_el_3d.cu:                  par->number_of_slice_y,
main_curv_col_el_3d.cu:                  par->number_of_slice_z,
main_curv_col_el_3d.cu:                  par->slice_x_index,
main_curv_col_el_3d.cu:                  par->slice_y_index,
main_curv_col_el_3d.cu:                  par->slice_z_index,
main_curv_col_el_3d.cu:                  blk->output_fname_part,
main_curv_col_el_3d.cu:                  blk->output_dir);
main_curv_col_el_3d.cu:                     par->number_of_snapshot,
main_curv_col_el_3d.cu:                     par->snapshot_name,
main_curv_col_el_3d.cu:                     par->snapshot_index_start,
main_curv_col_el_3d.cu:                     par->snapshot_index_count,
main_curv_col_el_3d.cu:                     par->snapshot_index_incre,
main_curv_col_el_3d.cu:                     par->snapshot_time_start,
main_curv_col_el_3d.cu:                     par->snapshot_time_incre,
main_curv_col_el_3d.cu:                     par->snapshot_save_velocity,
main_curv_col_el_3d.cu:                     par->snapshot_save_stress,
main_curv_col_el_3d.cu:                     par->snapshot_save_strain,
main_curv_col_el_3d.cu:                     blk->output_fname_part,
main_curv_col_el_3d.cu:                     blk->output_dir);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- absorbing boundary etc auxiliary variables
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  if (par->bdry_has_cfspml == 1)
main_curv_col_el_3d.cu:                 mympi->neighid,
main_curv_col_el_3d.cu:                 par->cfspml_is_sides,
main_curv_col_el_3d.cu:                 par->abs_num_of_layers,
main_curv_col_el_3d.cu:                 par->cfspml_alpha_max,
main_curv_col_el_3d.cu:                 par->cfspml_beta_max,
main_curv_col_el_3d.cu:                 par->cfspml_velocity,
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- free surface preproc
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  if (par->bdry_has_free == 1)
main_curv_col_el_3d.cu:    bdry_free_set(gdcurv, bdryfree, mympi->neighid, par->free_is_sides, verbose);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- setup mesg
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  blk_macdrp_mesg_init(mympi, fd, gdcurv->ni, gdcurv->nj, gdcurv->nk,
main_curv_col_el_3d.cu:                  wav->ncmp, fault_wav->ncmp);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- qc
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- slover
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  md_rho_to_slow(md->rho, md->siz_icmp);
main_curv_col_el_3d.cu:                          par->imethod, dt,nt_total,t0,
main_curv_col_el_3d.cu:                          blk->output_fname_part,
main_curv_col_el_3d.cu:                          blk->output_dir,
main_curv_col_el_3d.cu:                          par->fault_i_global_index,
main_curv_col_el_3d.cu:                          par->io_time_skip,
main_curv_col_el_3d.cu:                          par->check_nan_every_nummber_of_steps,
main_curv_col_el_3d.cu:                          par->output_all,
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- save station and line seismo to sac
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu:  io_recv_output_sac(iorecv,dt,wav->ncmp,wav->cmp_name,
main_curv_col_el_3d.cu:                      blk->output_dir,err_message);
main_curv_col_el_3d.cu:  if(md->medium_type == CONST_MEDIUM_ELASTIC_ISO) {
main_curv_col_el_3d.cu:    io_recv_output_sac_el_iso_strain(iorecv,md->lambda,md->mu,dt,
main_curv_col_el_3d.cu:                      blk->output_dir,err_message);
main_curv_col_el_3d.cu:  io_line_output_sac(ioline,dt,wav->cmp_name,blk->output_dir);
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
main_curv_col_el_3d.cu://-- postprocess
main_curv_col_el_3d.cu://-------------------------------------------------------------------------------
md_t.cu:  md->nx   = gdcurv->nx;
md_t.cu:  md->ny   = gdcurv->ny;
md_t.cu:  md->nz   = gdcurv->nz;
md_t.cu:  md->siz_iy   = md->nx;
md_t.cu:  md->siz_iz  = md->nx * md->ny;
md_t.cu:  md->siz_icmp = md->nx * md->ny * md->nz;
md_t.cu:  md->medium_type = media_type;
md_t.cu:    md->ncmp = 2;
md_t.cu:    md->ncmp = 3;
md_t.cu:    md->ncmp = 6; // 5 + rho
md_t.cu:    md->ncmp = 22; // 21 + rho
md_t.cu:  md->visco_type = visco_type;
md_t.cu:   md->ncmp += 1;
md_t.cu:  md->v4d = (float *) fdlib_mem_calloc_1d_float(
md_t.cu:                          md->siz_icmp * md->ncmp,
md_t.cu:  if (md->v4d == NULL) {
md_t.cu:  size_t *cmp_pos = (size_t *) fdlib_mem_calloc_1d_sizet(md->ncmp,
md_t.cu:  char **cmp_name = (char **) fdlib_mem_malloc_2l_char(md->ncmp,
md_t.cu:  for (int icmp=0; icmp < md->ncmp; icmp++)
md_t.cu:    cmp_pos[icmp] = icmp * md->siz_icmp;
md_t.cu:  md->rho = md->v4d + cmp_pos[icmp];
md_t.cu:    md->kappa = md->v4d + cmp_pos[icmp];
md_t.cu:    md->lambda = md->v4d + cmp_pos[icmp];
md_t.cu:    md->mu = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c11 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c13 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c33 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c55 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c66 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c11 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c12 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c13 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c14 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c15 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c16 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c22 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c23 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c24 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c25 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c26 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c33 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c34 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c35 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c36 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c44 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c45 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c46 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c55 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c56 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->c66 = md->v4d + cmp_pos[icmp];
md_t.cu:    md->Qs = md->v4d + cmp_pos[icmp];
md_t.cu:  md->cmp_pos  = cmp_pos;
md_t.cu:  md->cmp_name = cmp_name;
md_t.cu:  for (int icmp=0; icmp < md->ncmp; icmp++) {
md_t.cu:      ierr = nc_inq_varid(ncid, md->cmp_name[icmp], &varid); handle_nc_err(ierr);
md_t.cu:      ierr = nc_get_var_float(ncid,varid,md->v4d + md->cmp_pos[icmp]); handle_nc_err(ierr);
md_t.cu:  size_t *m3d_pos   = md->cmp_pos;
md_t.cu:  char  **m3d_name  = md->cmp_name;
md_t.cu:  int  number_of_vars = md->ncmp;
md_t.cu:  int  nx = md->nx;
md_t.cu:  int  ny = md->ny;
md_t.cu:  int  nz = md->nz;
md_t.cu:  int  ni1 = gdcurv->ni1;
md_t.cu:  int  nj1 = gdcurv->nj1;
md_t.cu:  int  nk1 = gdcurv->nk1;
md_t.cu:  int  ni  = gdcurv->ni;
md_t.cu:  int  nj  = gdcurv->nj;
md_t.cu:  int  nk  = gdcurv->nk;
md_t.cu:  int  gni1 = gdcurv->ni1_to_glob_phys0;
md_t.cu:  int  gnj1 = gdcurv->nj1_to_glob_phys0;
md_t.cu:  int  gnk1 = gdcurv->nk1_to_glob_phys0;
md_t.cu:    float *ptr = md->v4d + m3d_pos[ivar];
md_t.cu:  int nx = md->nx;
md_t.cu:  int ny = md->ny;
md_t.cu:  int nz = md->nz;
md_t.cu:  size_t siz_iy  = md->siz_iy;
md_t.cu:  size_t siz_iz = md->siz_iz;
md_t.cu:  float *lam3d = md->lambda;
md_t.cu:  float  *mu3d = md->mu;
md_t.cu:  float *rho3d = md->rho;
md_t.cu:        float lam = Vp*Vp*rho - 2.0*mu;
md_t.cu:  int nx = md->nx;
md_t.cu:  int ny = md->ny;
md_t.cu:  int nz = md->nz;
md_t.cu:  size_t siz_iy  = md->siz_iy;
md_t.cu:  size_t siz_iz = md->siz_iz;
md_t.cu:  md->visco_Qs_freq = Qs_freq;
md_t.cu:  float *Qs = md->Qs;
md_t.cu:  int nx = md->nx;
md_t.cu:  int ny = md->ny;
md_t.cu:  int nz = md->nz;
md_t.cu:  size_t siz_iy  = md->siz_iy;
md_t.cu:  size_t siz_iz = md->siz_iz;
md_t.cu:        md->rho[iptr] = rho; 
md_t.cu:	      md->c11[iptr] = c11;
md_t.cu:	      md->c13[iptr] = c13;
md_t.cu:	      md->c33[iptr] = c33;
md_t.cu:	      md->c55[iptr] = c55;
md_t.cu:        md->c66[iptr] = c66;
md_t.cu:        //-- Vp ~ sqrt(c11/rho) = 4098
md_t.cu:  int nx = md->nx;
md_t.cu:  int ny = md->ny;
md_t.cu:  int nz = md->nz;
md_t.cu:  size_t siz_iy  = md->siz_iy;
md_t.cu:  size_t siz_iz = md->siz_iz;
md_t.cu:        md->rho[iptr] = rho; 
md_t.cu:	      md->c11[iptr] = c11;
md_t.cu:	      md->c12[iptr] = c12;
md_t.cu:	      md->c13[iptr] = c13;
md_t.cu:	      md->c14[iptr] = c14;
md_t.cu:	      md->c15[iptr] = c15;
md_t.cu:	      md->c16[iptr] = c16;
md_t.cu:	      md->c22[iptr] = c22;
md_t.cu:	      md->c23[iptr] = c23;
md_t.cu:	      md->c24[iptr] = c24;
md_t.cu:	      md->c25[iptr] = c25;
md_t.cu:	      md->c26[iptr] = c26;
md_t.cu:	      md->c33[iptr] = c33;
md_t.cu:	      md->c34[iptr] = c34;
md_t.cu:	      md->c35[iptr] = c35;
md_t.cu:	      md->c36[iptr] = c36;
md_t.cu:	      md->c44[iptr] = c44;
md_t.cu:	      md->c45[iptr] = c45;
md_t.cu:	      md->c46[iptr] = c46;
md_t.cu:	      md->c55[iptr] = c55;
md_t.cu:	      md->c56[iptr] = c56;
md_t.cu:        md->c66[iptr] = c66;
md_t.cu:        //-- Vp ~ sqrt(c11/rho) = 4098
md_t.cu:        md->c12[iptr] = md->c11[iptr] - 2.0*md->c66[iptr]; 
md_t.cu:	      md->c22[iptr] = md->c11[iptr];
md_t.cu:        md->c23[iptr] = md->c13[iptr];
md_t.cu:	      md->c44[iptr] = md->c55[iptr]; 
md_t.cu:    if (rho[iptr] > 1e-10) {
md_t.cu:    if (rho[iptr] > 1e-10) {
mympi_t.cu:  mympi->nprocx = number_of_mpiprocs_x;
mympi_t.cu:  mympi->nprocy = number_of_mpiprocs_y;
mympi_t.cu:  mympi->nprocz = number_of_mpiprocs_z;
mympi_t.cu:  mympi->myid = myid;
mympi_t.cu:  mympi->comm = comm;
mympi_t.cu:  MPI_Cart_create(comm, 3, ndims, periods, reorder, &(mympi->topocomm));
mympi_t.cu:  MPI_Cart_coords(mympi->topocomm, mympi->myid, 3, mympi->topoid);
mympi_t.cu:  MPI_Cart_shift(mympi->topocomm, 0, 1, &(mympi->neighid[0]), &(mympi->neighid[1]));
mympi_t.cu:  MPI_Cart_shift(mympi->topocomm, 1, 1, &(mympi->neighid[2]), &(mympi->neighid[3]));
mympi_t.cu:  MPI_Cart_shift(mympi->topocomm, 2, 1, &(mympi->neighid[4]), &(mympi->neighid[5]));
mympi_t.cu:  fprintf(stdout, "\n-------------------------------------------------------\n");
mympi_t.cu:  fprintf(stdout, "-------------------------------------------------------\n\n");
mympi_t.cu:  fprintf(stdout, " myid = %d, topoid[%d,%d,%d]\n", mympi->myid,mympi->topoid[0],mympi->topoid[1],mympi->topoid[2]);
mympi_t.cu:  fprintf(stdout, " neighid_x[%d,%d]\n", mympi->neighid[0], mympi->neighid[1]);
mympi_t.cu:  fprintf(stdout, " neighid_y[%d,%d]\n", mympi->neighid[2], mympi->neighid[3]);
mympi_t.cu:  fprintf(stdout, " neighid_z[%d,%d]\n", mympi->neighid[4], mympi->neighid[5]);
par_t.cu:  par->boundary_type_name = (char **)malloc(CONST_NDIM_2 * sizeof(char*));
par_t.cu:    par->boundary_type_name[i] = (char *)malloc(10*sizeof(char));
par_t.cu:    par->number_of_total_grid_points_x = item->valueint;
par_t.cu:    par->number_of_total_grid_points_y = item->valueint;
par_t.cu:    par->number_of_total_grid_points_z = item->valueint;
par_t.cu:  par->disg_num_level = 0;
par_t.cu:    par->disg_num_level = cJSON_GetArraySize(item);
par_t.cu:    par->disg_at_zindx = (int *)malloc(par->disg_num_level * sizeof(int));
par_t.cu:    for (int n=0; n < par->disg_num_level; n++) {
par_t.cu:      par->disg_at_zindx[n] = cJSON_GetArrayItem(item, n)->valueint;
par_t.cu:    if (par->disg_num_level != cJSON_GetArraySize(item)) {
par_t.cu:    par->disg_factor = (int *)malloc(par->disg_num_level * sizeof(int));
par_t.cu:    for (int n=0; n < par->disg_num_level; n++) {
par_t.cu:      par->disg_factor[n] = cJSON_GetArrayItem(item, n)->valueint;
par_t.cu:  par->number_of_mpiprocs_x = 1;
par_t.cu:  par->number_of_mpiprocs_y = 1;
par_t.cu:  par->number_of_mpiprocs_z = 1;
par_t.cu:    par->number_of_mpiprocs_y = item->valueint;
par_t.cu:    par->number_of_mpiprocs_z = item->valueint;
par_t.cu:  par->size_of_time_step = -1.0;
par_t.cu:  par->number_of_time_steps = -1;
par_t.cu:  par->time_window_length = -1.0;
par_t.cu:  par->time_start = 0.0;
par_t.cu:  par->time_check_stability = 1;
par_t.cu:  par->io_time_skip = 1;
par_t.cu:    par->size_of_time_step = item->valuedouble;
par_t.cu:    par->number_of_time_steps = item->valueint;
par_t.cu:    par->time_window_length = item->valuedouble;
par_t.cu:    par->time_start = item->valuedouble;
par_t.cu:    par->time_check_stability = item->valueint;
par_t.cu:    par->io_time_skip = item->valueint;
par_t.cu:  if (par->size_of_time_step < 0.0 && par->time_window_length < 0)
par_t.cu:    fprintf(stderr," --> size_of_time_step   =%f\n", par->size_of_time_step);
par_t.cu:    fprintf(stderr," --> time_window_length  =%f\n", par->time_window_length);
par_t.cu:  if (par->size_of_time_step > 0.0)
par_t.cu:    if (par->number_of_time_steps < 0 && par->time_window_length < 0.0)
par_t.cu:             par->size_of_time_step, par->time_window_length);
par_t.cu:    if (par->number_of_time_steps < 0) 
par_t.cu:      par->number_of_time_steps = (int)(par->time_window_length / par->size_of_time_step + 0.5);
par_t.cu:    par->time_window_length = par->size_of_time_step * par->number_of_time_steps;
par_t.cu:      par->abs_num_of_layers[idim][iside] = 0;
par_t.cu:      par->cfspml_is_sides[idim][iside] = 0;
par_t.cu:      par->free_is_sides  [idim][iside] = 0;
par_t.cu:  par->bdry_has_cfspml = 0;
par_t.cu:  par->bdry_has_free   = 0;
par_t.cu:       sprintf(par->boundary_type_name[0], "%s", "cfspml");
par_t.cu:                            &(par->abs_num_of_layers[0][0]),
par_t.cu:                            &(par->cfspml_alpha_max [0][0]),
par_t.cu:                            &(par->cfspml_beta_max  [0][0]),
par_t.cu:                            &(par->cfspml_velocity  [0][0]));
par_t.cu:      par->cfspml_is_sides[0][0] = 1;
par_t.cu:      par->bdry_has_cfspml = 1;
par_t.cu:       sprintf(par->boundary_type_name[1], "%s", "cfspml");
par_t.cu:                            &(par->abs_num_of_layers[0][1]),
par_t.cu:                            &(par->cfspml_alpha_max [0][1]),
par_t.cu:                            &(par->cfspml_beta_max  [0][1]),
par_t.cu:                            &(par->cfspml_velocity  [0][1]));
par_t.cu:      par->cfspml_is_sides[0][1] = 1;
par_t.cu:      par->bdry_has_cfspml = 1;
par_t.cu:       sprintf(par->boundary_type_name[2], "%s", "cfspml");
par_t.cu:                            &(par->abs_num_of_layers[1][0]),
par_t.cu:                            &(par->cfspml_alpha_max [1][0]),
par_t.cu:                            &(par->cfspml_beta_max  [1][0]),
par_t.cu:                            &(par->cfspml_velocity  [1][0]));
par_t.cu:      par->cfspml_is_sides[1][0] = 1;
par_t.cu:      par->bdry_has_cfspml = 1;
par_t.cu:       sprintf(par->boundary_type_name[3], "%s", "cfspml");
par_t.cu:                            &(par->abs_num_of_layers[1][1]),
par_t.cu:                            &(par->cfspml_alpha_max [1][1]),
par_t.cu:                            &(par->cfspml_beta_max  [1][1]),
par_t.cu:                            &(par->cfspml_velocity  [1][1]));
par_t.cu:      par->cfspml_is_sides[1][1] = 1;
par_t.cu:      par->bdry_has_cfspml = 1;
par_t.cu:       sprintf(par->boundary_type_name[4], "%s", "cfspml");
par_t.cu:                            &(par->abs_num_of_layers[2][0]),
par_t.cu:                            &(par->cfspml_alpha_max [2][0]),
par_t.cu:                            &(par->cfspml_beta_max  [2][0]),
par_t.cu:                            &(par->cfspml_velocity  [2][0]));
par_t.cu:      par->cfspml_is_sides[2][0] = 1;
par_t.cu:      par->bdry_has_cfspml = 1;
par_t.cu:       sprintf(par->boundary_type_name[5], "%s", "cfspml");
par_t.cu:                            &(par->abs_num_of_layers[2][1]),
par_t.cu:                            &(par->cfspml_alpha_max [2][1]),
par_t.cu:                            &(par->cfspml_beta_max  [2][1]),
par_t.cu:                            &(par->cfspml_velocity  [2][1]));
par_t.cu:      par->cfspml_is_sides[2][1] = 1;
par_t.cu:      par->bdry_has_cfspml = 1;
par_t.cu:      sprintf(par->boundary_type_name[5], "%s", "free");
par_t.cu:      par->free_is_sides[2][1] = 1;
par_t.cu:      par->bdry_has_free = 1;
par_t.cu:    par->imethod = item->valueint;
par_t.cu:  //-- grid
par_t.cu:      par->fault_grid[i] = cJSON_GetArrayItem(item, i)->valueint;
par_t.cu:      par->fault_i_global_index = (int) par->number_of_total_grid_points_x/2;
par_t.cu:      par->grid_generation_itype = PAR_FAULT_PLANE;
par_t.cu:         sprintf(par->fault_coord_nc, "%s", thirditem->valuestring);
par_t.cu:         sprintf(par->init_stress_nc, "%s", thirditem->valuestring);
par_t.cu:        par->dh = thirditem->valueint;
par_t.cu:      par->grid_generation_itype = PAR_GRID_WITH_FAULT;
par_t.cu:         sprintf(par->grid_coord_nc, "%s", thirditem->valuestring);
par_t.cu:         sprintf(par->init_stress_nc, "%s", thirditem->valuestring);
par_t.cu:        par->fault_i_global_index = thirditem->valueint;
par_t.cu:  par->is_export_grid = 1;
par_t.cu:     par->is_export_grid = item->valueint;
par_t.cu:      sprintf(par->grid_export_dir,"%s",item->valuestring);
par_t.cu:  //-- metric
par_t.cu:  par->metric_method_itype = PAR_METRIC_CALCULATE;
par_t.cu:        par->metric_method_itype = PAR_METRIC_IMPORT;
par_t.cu:        sprintf(par->metric_import_dir, "%s", subitem->valuestring);
par_t.cu:        par->metric_method_itype = PAR_METRIC_CALCULATE;
par_t.cu:  par->is_export_metric = 1;
par_t.cu:     par->is_export_metric = item->valueint;
par_t.cu:  //-- medium
par_t.cu:  par->media_input_itype = PAR_MEDIA_IMPORT;
par_t.cu:        sprintf(par->media_type, "%s", subitem->valuestring);
par_t.cu:        if (strcmp(par->media_type, "elastic_iso")==0) {
par_t.cu:          par->media_itype = CONST_MEDIUM_ELASTIC_ISO;
par_t.cu:        } else if (strcmp(par->media_type, "elastic_vti")==0) {
par_t.cu:          par->media_itype = CONST_MEDIUM_ELASTIC_VTI;
par_t.cu:        } else if (strcmp(par->media_type, "elastic_aniso")==0) {
par_t.cu:          par->media_itype = CONST_MEDIUM_ELASTIC_ANISO;
par_t.cu:        } else if (strcmp(par->media_type, "acoustic_iso")==0) {
par_t.cu:          par->media_itype = CONST_MEDIUM_ACOUSTIC_ISO;
par_t.cu:          fprintf(stderr,"ERROR: media_type=%s is unknown\n",par->media_type);
par_t.cu:        sprintf(par->media_input_way, "%s", subitem->valuestring);
par_t.cu:    if (strcmp(par->media_input_way,"code") == 0)
par_t.cu:      par->media_input_itype = PAR_MEDIA_CODE;
par_t.cu:    if (strcmp(par->media_input_way,"import") == 0)
par_t.cu:      par->media_input_itype = PAR_MEDIA_IMPORT;
par_t.cu:          sprintf(par->media_import_dir, "%s", subitem->valuestring);
par_t.cu:    if (strcmp(par->media_input_way,"infile_layer") == 0)
par_t.cu:      par->media_input_itype = PAR_MEDIA_3LAY;
par_t.cu:          sprintf(par->media_input_file, "%s", subitem->valuestring);
par_t.cu:    if (strcmp(par->media_input_way,"infile_grid") == 0)
par_t.cu:      par->media_input_itype = PAR_MEDIA_3GRD;
par_t.cu:          sprintf(par->media_input_file, "%s", subitem->valuestring);
par_t.cu:    if (strcmp(par->media_input_way,"binfile") == 0)
par_t.cu:      par->media_input_itype = PAR_MEDIA_3BIN;
par_t.cu:            par->bin_size[i] = cJSON_GetArrayItem(thirditem, i)->valueint;
par_t.cu:            par->bin_spacing[i] = cJSON_GetArrayItem(thirditem, i)->valuedouble;
par_t.cu:            par->bin_origin[i] = cJSON_GetArrayItem(thirditem, i)->valuedouble;
par_t.cu:          sprintf(par->bin_dim1_name, "%s", thirditem->valuestring);
par_t.cu:          if (strcmp(par->bin_dim1_name,"x")==0) {
par_t.cu:            par->bin_order[0] = 0;
par_t.cu:          } else if (strcmp(par->bin_dim1_name,"y")==0) {
par_t.cu:            par->bin_order[0] = 1;
par_t.cu:          } else if (strcmp(par->bin_dim1_name,"z")==0) {
par_t.cu:            par->bin_order[0] = 2;
par_t.cu:          sprintf(par->bin_dim2_name, "%s", thirditem->valuestring);
par_t.cu:          if (strcmp(par->bin_dim2_name,"x")==0) {
par_t.cu:            par->bin_order[1] = 0;
par_t.cu:          } else if (strcmp(par->bin_dim2_name,"y")==0) {
par_t.cu:            par->bin_order[1] = 1;
par_t.cu:          } else if (strcmp(par->bin_dim2_name,"z")==0) {
par_t.cu:            par->bin_order[1] = 2;
par_t.cu:          sprintf(par->bin_dim3_name, "%s", thirditem->valuestring);
par_t.cu:          if (strcmp(par->bin_dim3_name,"x")==0) {
par_t.cu:            par->bin_order[2] = 0;
par_t.cu:          } else if (strcmp(par->bin_dim3_name,"y")==0) {
par_t.cu:            par->bin_order[2] = 1;
par_t.cu:          } else if (strcmp(par->bin_dim3_name,"z")==0) {
par_t.cu:            par->bin_order[2] = 2;
par_t.cu:          sprintf(par->bin_file_rho, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_vp, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_vs, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_epsilon, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_delta, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_gamma, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c11, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c12, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c13, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c14, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c15, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c16, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c22, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c23, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c24, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c25, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c26, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c33, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c34, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c35, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c36, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c44, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c45, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c46, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c55, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c56, "%s", thirditem->valuestring);
par_t.cu:          sprintf(par->bin_file_c66, "%s", thirditem->valuestring);
par_t.cu:        sprintf(par->equivalent_medium_method, "%s", subitem->valuestring);
par_t.cu:  par->is_export_media = 1;
par_t.cu:     par->is_export_media = item->valueint;
par_t.cu:      sprintf(par->media_export_dir,"%s",item->valuestring);
par_t.cu:  //-- visco
par_t.cu:  par->visco_Qs_freq = 0.0;
par_t.cu:  par->visco_itype = 0;
par_t.cu:        sprintf(par->visco_type, "%s", subitem->valuestring);
par_t.cu:        if (strcmp(par->visco_type, "graves_Qs")==0) {
par_t.cu:          par->visco_itype = CONST_VISCO_GRAVES_QS;
par_t.cu:        par->visco_Qs_freq = subitem->valuedouble;
par_t.cu:  //-- output dir
par_t.cu:      sprintf(par->output_dir,"%s",item->valuestring);
par_t.cu:  //-- receiver
par_t.cu:    sprintf(par->in_station_file, "%s", item->valuestring);
par_t.cu:  //-- receiver line
par_t.cu:    par->number_of_receiver_line = cJSON_GetArraySize(item);
par_t.cu:    par->receiver_line_index_start  = (int *)malloc(par->number_of_receiver_line*sizeof(int)*CONST_NDIM);
par_t.cu:    par->receiver_line_index_incre  = (int *)malloc(par->number_of_receiver_line*sizeof(int)*CONST_NDIM);
par_t.cu:    par->receiver_line_count  = (int *)malloc(par->number_of_receiver_line*sizeof(int));
par_t.cu:    //par->receiver_line_time_interval  = (int *)malloc(par->number_of_receiver_line*sizeof(int));
par_t.cu:    par->receiver_line_name = (char **)malloc(par->number_of_receiver_line*sizeof(char*));
par_t.cu:    for (int n=0; n<par->number_of_receiver_line; n++) {
par_t.cu:      par->receiver_line_name[n] = (char *)malloc(PAR_MAX_STRLEN*sizeof(char));
par_t.cu:        sprintf(par->receiver_line_name[i],"%s",subitem->valuestring);
par_t.cu:          par->receiver_line_index_start[i*CONST_NDIM+j] = cJSON_GetArrayItem(subitem, j)->valueint;
par_t.cu:          par->receiver_line_index_incre[i*CONST_NDIM+j] = cJSON_GetArrayItem(subitem, j)->valueint;
par_t.cu:         par->receiver_line_count[i] = subitem->valueint;
par_t.cu:      //   par->receiver_line_tinterval[i] = cJSON_GetArrayItem(subitem, j)->valueint;
par_t.cu:      par->number_of_slice_x = cJSON_GetArraySize(subitem);
par_t.cu:      par->slice_x_index  = (int *)malloc(par->number_of_slice_x*sizeof(int));
par_t.cu:      for (int i=0; i < par->number_of_slice_x ; i++)
par_t.cu:        par->slice_x_index[i] = cJSON_GetArrayItem(subitem, i)->valueint;
par_t.cu:      par->number_of_slice_y = cJSON_GetArraySize(subitem);
par_t.cu:      par->slice_y_index  = (int *)malloc(par->number_of_slice_y*sizeof(int));
par_t.cu:      for (int i=0; i < par->number_of_slice_y ; i++)
par_t.cu:        par->slice_y_index[i] = cJSON_GetArrayItem(subitem, i)->valueint;
par_t.cu:      par->number_of_slice_z = cJSON_GetArraySize(subitem);
par_t.cu:      par->slice_z_index  = (int *)malloc(par->number_of_slice_z*sizeof(int));
par_t.cu:      for (int i=0; i < par->number_of_slice_z ; i++)
par_t.cu:        par->slice_z_index[i] = cJSON_GetArrayItem(subitem, i)->valueint;
par_t.cu:    par->number_of_snapshot = cJSON_GetArraySize(item);
par_t.cu:    //fprintf(stdout,"size=%d, %d, %d\n", par->number_of_snapshot, sizeof(int), CONST_NDIM);
par_t.cu:    par->snapshot_index_start  = (int *)malloc(par->number_of_snapshot*sizeof(int)*CONST_NDIM);
par_t.cu:    //if (par->snapshot_index_start == NULL) {
par_t.cu:    par->snapshot_index_count  = (int *)malloc(par->number_of_snapshot*sizeof(int)*CONST_NDIM);
par_t.cu:    par->snapshot_index_incre = (int *)malloc(par->number_of_snapshot*sizeof(int)*CONST_NDIM);
par_t.cu:    par->snapshot_time_start  = (int *)malloc(par->number_of_snapshot*sizeof(int));
par_t.cu:    par->snapshot_time_incre = (int *)malloc(par->number_of_snapshot*sizeof(int));
par_t.cu:    par->snapshot_save_velocity = (int *)malloc(par->number_of_snapshot*sizeof(int));
par_t.cu:    par->snapshot_save_stress  = (int *)malloc(par->number_of_snapshot*sizeof(int));
par_t.cu:    par->snapshot_save_strain = (int *)malloc(par->number_of_snapshot*sizeof(int));
par_t.cu:    par->snapshot_name = (char **)malloc(par->number_of_snapshot*sizeof(char*));
par_t.cu:    for (int n=0; n<par->number_of_snapshot; n++) {
par_t.cu:      par->snapshot_name[n] = (char *)malloc(PAR_MAX_STRLEN*sizeof(char));
par_t.cu:        sprintf(par->snapshot_name[i],"%s",subitem->valuestring);
par_t.cu:          par->snapshot_index_start[i*CONST_NDIM+j] = cJSON_GetArrayItem(subitem, j)->valueint;
par_t.cu:          par->snapshot_index_count[i*CONST_NDIM+j] = cJSON_GetArrayItem(subitem, j)->valueint;
par_t.cu:          par->snapshot_index_incre[i*CONST_NDIM+j] = cJSON_GetArrayItem(subitem, j)->valueint;
par_t.cu:        par->snapshot_time_start[i]  = subitem->valueint;
par_t.cu:        par->snapshot_time_incre[i]  = subitem->valueint;
par_t.cu:        par->snapshot_save_velocity[i]  = subitem->valueint;
par_t.cu:        par->snapshot_save_stress[i]  = subitem->valueint;
par_t.cu:        par->snapshot_save_strain[i] = subitem->valueint;
par_t.cu:  //-- misc
par_t.cu:      par->check_nan_every_nummber_of_steps = item->valueint;
par_t.cu:      par->output_all = item->valueint;
par_t.cu:  //    sprintf(par->grid_name,"%s",item->valuestring);
par_t.cu:  //-- check conditions
par_t.cu:  if (par->media_itype == CONST_MEDIUM_ELASTIC_ANISO &&
par_t.cu:      par->size_of_time_step < 0.0)
par_t.cu:    *nlay = subitem->valueint;
par_t.cu:    *amax = subitem->valuedouble;
par_t.cu:    *bmax = subitem->valuedouble;
par_t.cu:    *vel = subitem->valuedouble;
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  //fprintf(stdout, "--> ESTIMATE MEMORY information.\n");
par_t.cu:  //fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  //fprintf(stdout, "total memory size Byte: %20.5f  B\n", PSV->total_memory_size_Byte);
par_t.cu:  //fprintf(stdout, "total memory size KB  : %20.5f KB\n", PSV->total_memory_size_KB  );
par_t.cu:  //fprintf(stdout, "total memory size MB  : %20.5f MB\n", PSV->total_memory_size_MB  );
par_t.cu:  //fprintf(stdout, "total memory size GB  : %20.5f GB\n", PSV->total_memory_size_GB  );
par_t.cu:  //fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  //fprintf(stdout, "--> FOLDER AND FILE information.\n");
par_t.cu:  //fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> MPI information:\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, " number_of_mpiprocs_x = %-10d\n", par->number_of_mpiprocs_x);
par_t.cu:  fprintf(stdout, " number_of_mpiprocs_y = %-10d\n", par->number_of_mpiprocs_y);
par_t.cu:  fprintf(stdout, " number_of_mpiprocs_z = %-10d\n", par->number_of_mpiprocs_z);
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> Time Integration information:\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, " size_of_time_step = %10.4e\n", par->size_of_time_step);
par_t.cu:  fprintf(stdout, " number_of_time_steps = %-10d\n", par->number_of_time_steps);
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> boundary layer information.\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:          par->boundary_type_name[0],
par_t.cu:          par->boundary_type_name[1],
par_t.cu:          par->boundary_type_name[2],
par_t.cu:          par->boundary_type_name[3],
par_t.cu:          par->boundary_type_name[4],
par_t.cu:          par->boundary_type_name[5]);
par_t.cu:              par->abs_num_of_layers[idim][iside],
par_t.cu:              par->cfspml_velocity[idim][iside],
par_t.cu:              par->cfspml_alpha_max[idim][iside],
par_t.cu:              par->cfspml_beta_max[idim][iside]
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> GRID information:\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, " grid_export_dir = %s\n", par->grid_export_dir);
par_t.cu:  fprintf(stdout, " number_of_total_grid_points_x = %-10d\n", par->number_of_total_grid_points_x);
par_t.cu:  fprintf(stdout, " number_of_total_grid_points_y = %-10d\n", par->number_of_total_grid_points_y);
par_t.cu:  fprintf(stdout, " number_of_total_grid_points_z = %-10d\n", par->number_of_total_grid_points_z);
par_t.cu:  fprintf(stdout, " disg_num_level = %-10d\n", par->disg_num_level);
par_t.cu:  for (int n = 0; n < par->disg_num_level; n++) {
par_t.cu:          n, par->disg_at_zindx[n], par->disg_factor[n]);
par_t.cu:  fprintf(stdout, " metric_method_itype = %d\n", par->metric_method_itype);
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> media info.\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, " media_type = %s\n", par->media_type);
par_t.cu:  fprintf(stdout, " media_export_dir = %s\n", par->media_export_dir);
par_t.cu:  if (par->media_input_itype == PAR_MEDIA_CODE) {
par_t.cu:    fprintf(stdout, "\n --> uniform media by code\n");
par_t.cu:  } else if (par->media_input_itype == PAR_MEDIA_IMPORT) {
par_t.cu:    fprintf(stdout, "\n --> import from dir = %s\n", par->media_import_dir);
par_t.cu:  } else if (par->media_input_itype == PAR_MEDIA_3LAY) {
par_t.cu:    fprintf(stdout, "\n --> input layer file = %s\n", par->media_input_file);
par_t.cu:  } else if (par->media_input_itype == PAR_MEDIA_3GRD) {
par_t.cu:    fprintf(stdout, "\n --> input grid file = %s\n", par->media_input_file);
par_t.cu:  //fprintf(stdout, " media_input_type = %s\n", par->media_input_type);
par_t.cu:  //fprintf(stdout, " media_input_itype = %d\n", par->media_input_itype);
par_t.cu:  if (par->visco_itype == CONST_VISCO_GRAVES_QS) {
par_t.cu:    fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:    fprintf(stdout, "--> visco info.\n");
par_t.cu:    fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:    fprintf(stdout, " visco_type = %s\n", par->visco_type);
par_t.cu:    fprintf(stdout, " visco_Qs_freq = %f\n", par->visco_Qs_freq);
par_t.cu:    fprintf(stdout, "--> no visco\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> output information.\n");
par_t.cu:  fprintf(stdout, "-------------------------------------------------------\n");
par_t.cu:  fprintf(stdout, "--> output_dir = %s\n", par->output_dir);
par_t.cu:  fprintf(stdout, "--> station list file:\n");
par_t.cu:  fprintf(stdout, " in_station_file = %s\n", par->in_station_file);
par_t.cu:  fprintf(stdout, "--> recivers lines:\n");
par_t.cu:  fprintf(stdout, "number_of_receiver_line=%d\n", par->number_of_receiver_line);
par_t.cu:  if (par->number_of_receiver_line > 0)
par_t.cu:    for(int n=0; n<par->number_of_receiver_line; n++)
par_t.cu:           par->receiver_line_name[n],
par_t.cu:           par->receiver_line_index_start[n*3+0],
par_t.cu:           par->receiver_line_index_start[n*3+1],
par_t.cu:           par->receiver_line_index_start[n*3+2],
par_t.cu:           par->receiver_line_index_incre[n*3+0],
par_t.cu:           par->receiver_line_index_incre[n*3+1],
par_t.cu:           par->receiver_line_index_incre[n*3+2],
par_t.cu:           par->receiver_line_count[n]);
par_t.cu:  fprintf(stdout, "--> slice:\n");
par_t.cu:  fprintf(stdout, "number_of_slice_x=%d: ", par->number_of_slice_x);
par_t.cu:  for(int n=0; n<par->number_of_slice_x; n++)
par_t.cu:     fprintf(stdout, "%6d", par->slice_x_index[n]);
par_t.cu:  fprintf(stdout, "\nnumber_of_slice_y=%d: ", par->number_of_slice_y);
par_t.cu:  for(int n=0; n<par->number_of_slice_y; n++)
par_t.cu:     fprintf(stdout, "%6d", par->slice_y_index[n]);
par_t.cu:  fprintf(stdout, "\nnumber_of_slice_z=%d: ", par->number_of_slice_z);
par_t.cu:  for(int n=0; n<par->number_of_slice_z; n++)
par_t.cu:     fprintf(stdout, "%6d", par->slice_z_index[n]);
par_t.cu:  fprintf(stdout, "--> snapshot information.\n");
par_t.cu:  fprintf(stdout, "number_of_snapshot=%d\n", par->number_of_snapshot);
par_t.cu:  if (par->number_of_snapshot > 0)
par_t.cu:      for(int n=0; n<par->number_of_snapshot; n++)
par_t.cu:             par->snapshot_name[n],
par_t.cu:             par->snapshot_index_start[n*3+0],
par_t.cu:             par->snapshot_index_start[n*3+1],
par_t.cu:             par->snapshot_index_start[n*3+2],
par_t.cu:             par->snapshot_index_count[n*3+0],
par_t.cu:             par->snapshot_index_count[n*3+1],
par_t.cu:             par->snapshot_index_count[n*3+2],
par_t.cu:             par->snapshot_index_incre[n*3+0],
par_t.cu:             par->snapshot_index_incre[n*3+1],
par_t.cu:             par->snapshot_index_incre[n*3+2],
par_t.cu:             par->snapshot_time_start[n],
par_t.cu:             par->snapshot_time_incre[n]);
par_t.cu:  fprintf(stdout, "--> qc parameters:\n");
par_t.cu:  fprintf(stdout, "check_nan_every_nummber_of_steps=%d\n", par->check_nan_every_nummber_of_steps);
par_t.cu:  fprintf(stdout, "output_all=%d\n", par->output_all);
par_t.h:  //-- dirs and file name
par_t.h:  // abs layer-based, for pml or exp
sv_curv_col_el_iso_fault_gpu.cu:  int idir = fdx_op->dir;
sv_curv_col_el_iso_fault_gpu.cu:  int jdir = fdy_op->dir;
sv_curv_col_el_iso_fault_gpu.cu:  int kdir = fdz_op->dir;
sv_curv_col_el_iso_fault_gpu.cu:    grid.x = (nj+block.x-1)/block.x;
sv_curv_col_el_iso_fault_gpu.cu:    grid.y = (nk+block.y-1)/block.y;
sv_curv_col_el_iso_fault_gpu.cu:    grid.x = (nj+block.x-1)/block.x;
sv_curv_col_el_iso_fault_gpu.cu:    grid.y = (nk+block.y-1)/block.y;
sv_curv_col_el_iso_fault_gpu.cu:    int km = nk - (iz+1); 
sv_curv_col_el_iso_fault_gpu.cu:    for (int i = i0-3; i <= i0+3; i++)
sv_curv_col_el_iso_fault_gpu.cu:      int n = i0 - i; 
sv_curv_col_el_iso_fault_gpu.cu:      for (int l = -3; l <= 3; l++)
sv_curv_col_el_iso_fault_gpu.cu:      if (n==2) { // i0-2
sv_curv_col_el_iso_fault_gpu.cu:        vecT1x[6] = 2.0*vecT1x[5] - vecT1x[4];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1y[6] = 2.0*vecT1y[5] - vecT1y[4];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1z[6] = 2.0*vecT1z[5] - vecT1z[4];
sv_curv_col_el_iso_fault_gpu.cu:      if (n==1) { // i0-1
sv_curv_col_el_iso_fault_gpu.cu:        vecT1x[5] = 2.0*vecT1x[4] - vecT1x[3];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1y[5] = 2.0*vecT1y[4] - vecT1y[3];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1z[5] = 2.0*vecT1z[4] - vecT1z[3];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1x[6] = 2.0*vecT1x[4] - vecT1x[2];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1y[6] = 2.0*vecT1y[4] - vecT1y[2];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1z[6] = 2.0*vecT1z[4] - vecT1z[2];
sv_curv_col_el_iso_fault_gpu.cu:      if (n==-1) { // i0+1
sv_curv_col_el_iso_fault_gpu.cu:        vecT1x[0] = 2.0*vecT1x[2] - vecT1x[4];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1y[0] = 2.0*vecT1y[2] - vecT1y[4];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1z[0] = 2.0*vecT1z[2] - vecT1z[4];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1x[1] = 2.0*vecT1x[2] - vecT1x[3];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1y[1] = 2.0*vecT1y[2] - vecT1y[3];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1z[1] = 2.0*vecT1z[2] - vecT1z[3];
sv_curv_col_el_iso_fault_gpu.cu:      if (n==-2) { // i0+2
sv_curv_col_el_iso_fault_gpu.cu:        vecT1x[0] = 2.0*vecT1x[1] - vecT1x[2];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1y[0] = 2.0*vecT1y[1] - vecT1y[2];
sv_curv_col_el_iso_fault_gpu.cu:        vecT1z[0] = 2.0*vecT1z[1] - vecT1z[2];
sv_curv_col_el_iso_fault_gpu.cu:          vecT3x[l] = -vecT3x[2*n_free-l];
sv_curv_col_el_iso_fault_gpu.cu:          vecT3y[l] = -vecT3y[2*n_free-l];
sv_curv_col_el_iso_fault_gpu.cu:          vecT3z[l] = -vecT3z[2*n_free-l];
sv_curv_col_el_iso_fault_gpu.cu:      if(m==0){ // "-" side
sv_curv_col_el_iso_fault_gpu.cu:                  - a_1*f_T1x[iptr_f+2*siz_iz_yz] 
sv_curv_col_el_iso_fault_gpu.cu:                  - a_2*f_T1x[iptr_f+1*siz_iz_yz] 
sv_curv_col_el_iso_fault_gpu.cu:                  - a_3*f_T1x[iptr_f+0*siz_iz_yz];
sv_curv_col_el_iso_fault_gpu.cu:                  - a_1*f_T1y[iptr_f+2*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:                  - a_2*f_T1y[iptr_f+1*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:                  - a_3*f_T1y[iptr_f+0*siz_iz_yz];
sv_curv_col_el_iso_fault_gpu.cu:                  - a_1*f_T1z[iptr_f+2*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:                  - a_2*f_T1z[iptr_f+1*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:                  - a_3*f_T1z[iptr_f+0*siz_iz_yz];
sv_curv_col_el_iso_fault_gpu.cu:        DxT1x =   - a_0*f_T1x[iptr_f+3*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:        DxT1y =   - a_0*f_T1y[iptr_f+3*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:        DxT1z =   - a_0*f_T1z[iptr_f+3*siz_iz_yz]
sv_curv_col_el_iso_fault_gpu.cu:        for (int l=-3; l<=3; l++)
sv_curv_col_el_iso_fault_gpu.cu:          vecT3x[l] = -vecT3x[2*n_free-l];
sv_curv_col_el_iso_fault_gpu.cu:          vecT3y[l] = -vecT3y[2*n_free-l];
sv_curv_col_el_iso_fault_gpu.cu:          vecT3z[l] = -vecT3z[2*n_free-l];
sv_curv_col_el_iso_fault_gpu.cu:    int km = nk - (iz+1); 
sv_curv_col_el_iso_fault_gpu.cu:    // ---V-----V-----V-----0-----0-----V-----V-----V---  (grid point)
sv_curv_col_el_iso_fault_gpu.cu:    //    G     F     E     D-    D+    C     B     A     (grid name in thesis)
sv_curv_col_el_iso_fault_gpu.cu:    //    i0-3  i0-2  i0-1  i0-0  i0+0  i0+1  i0+2  i0+3  (3D grid index)
sv_curv_col_el_iso_fault_gpu.cu:    //    -3    -2    -1    -0    +0    1     2     3     (offset from fault)
sv_curv_col_el_iso_fault_gpu.cu:    //fault split point D+ D-
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[4] = (Vx[iptr] - f_Vx[iptr_f]);
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[4] = (Vy[iptr] - f_Vy[iptr_f]);
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[4] = (Vz[iptr] - f_Vz[iptr_f]); 
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[3] = out1[0] + out2[0] + out3[0] - out4[0] - out5[0];
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[3] = out1[1] + out2[1] + out3[1] - out4[1] - out5[1];
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[3] = out1[2] + out2[2] + out3[2] - out4[2] - out5[2];
sv_curv_col_el_iso_fault_gpu.cu:      // Plus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[4] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[4] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[4] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:      // Minus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[3] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[3] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[3] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[3] = out1[0] + out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[3] = out1[1] + out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[3] = out1[2] + out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[4] = out1[0] - out2[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[4] = out1[1] - out2[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[4] = out1[2] - out2[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[3] = out1[0] - out2[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[3] = out1[1] - out2[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[3] = out1[2] - out2[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[3] = out1[0] + out2[0] + out3[0] - out4[0] - out5[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[3] = out1[1] + out2[1] + out3[1] - out4[1] - out5[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[3] = out1[2] + out2[2] + out3[2] - out4[2] - out5[2];
sv_curv_col_el_iso_fault_gpu.cu:        // Plus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[4] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[4] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[4] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:        // Minus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[3] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[3] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[3] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) *siz_iy + (iz+nk1) * siz_iz;
sv_curv_col_el_iso_fault_gpu.cu:    DxVx[2] = (f_Vx[iptr_f] - Vx[iptr]); 
sv_curv_col_el_iso_fault_gpu.cu:    DxVy[2] = (f_Vy[iptr_f] - Vy[iptr]); 
sv_curv_col_el_iso_fault_gpu.cu:    DxVz[2] = (f_Vz[iptr_f] - Vz[iptr]); 
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_3[0] = Vx[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_3[1] = Vx[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_3[0] = Vy[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_3[1] = Vy[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_3[0] = Vz[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_3[1] = Vz[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-4) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[0] = Vx[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-3) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[1] = Vx[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[2] = Vx[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[3] = Vx[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-4) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[0] = Vy[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-3) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[1] = Vy[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[2] = Vy[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[3] = Vy[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-4) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[0] = Vz[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-3) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[1] = Vz[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[2] = Vz[iptr];
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; vec_5[3] = Vz[iptr];
sv_curv_col_el_iso_fault_gpu.cu:      // m = -3 -2 -1 -0 +0 +1 +2 +3
sv_curv_col_el_iso_fault_gpu.cu:        m = n-3;
sv_curv_col_el_iso_fault_gpu.cu:        m = n-4;
sv_curv_col_el_iso_fault_gpu.cu:    int km = nk - (iz+1); 
sv_curv_col_el_iso_fault_gpu.cu:    // ---V-----V-----V-----0-----0-----V-----V-----V---  (grid point)
sv_curv_col_el_iso_fault_gpu.cu:    //    G     F     E     D-    D+    C     B     A     (grid name in thesis)
sv_curv_col_el_iso_fault_gpu.cu:    //    i0-3  i0-2  i0-1  i0-0  i0+0  i0+1  i0+2  i0+3  (3D grid index)
sv_curv_col_el_iso_fault_gpu.cu:    //    -3    -2    -1    -0    +0    1     2     3     (offset from fault)
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-3) + (iy+nj1) * siz_iy + (iz+nk1) *siz_iz;
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-2) + (iy+nj1) * siz_iy + (iz+nk1) *siz_iz;
sv_curv_col_el_iso_fault_gpu.cu:    iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) *siz_iz;
sv_curv_col_el_iso_fault_gpu.cu:    //fault split point D- D+
sv_curv_col_el_iso_fault_gpu.cu:      iptr = (i0-1) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz; 
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[3] = (f_Vx[iptr_f] - Vx[iptr]);
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[3] = (f_Vy[iptr_f] - Vy[iptr]);
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[3] = (f_Vz[iptr_f] - Vz[iptr]); 
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[4] = out1[0] + out2[0] + out3[0] - out4[0] - out5[0];
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[4] = out1[1] + out2[1] + out3[1] - out4[1] - out5[1];
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[4] = out1[2] + out2[2] + out3[2] - out4[2] - out5[2];
sv_curv_col_el_iso_fault_gpu.cu:      // Minus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[3] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[3] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[3] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:      // Plus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:      DxVx[4] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:      DxVy[4] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:      DxVz[4] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[4] = out1[0] + out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[4] = out1[1] + out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[4] = out1[2] + out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[3] = out1[0] - out2[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[3] = out1[1] - out2[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[3] = out1[2] - out2[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[4] = out1[0] - out2[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[4] = out1[1] - out2[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[4] = out1[2] - out2[2];
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[4] = out1[0] + out2[0] + out3[0] - out4[0] - out5[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[4] = out1[1] + out2[1] + out3[1] - out4[1] - out5[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[4] = out1[2] + out2[2] + out3[2] - out4[2] - out5[2];
sv_curv_col_el_iso_fault_gpu.cu:        // Minus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[3] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[3] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[3] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:        // Plus side --------------------------------------------
sv_curv_col_el_iso_fault_gpu.cu:        DxVx[4] = out1[0] - out2[0] - out3[0];
sv_curv_col_el_iso_fault_gpu.cu:        DxVy[4] = out1[1] - out2[1] - out3[1];
sv_curv_col_el_iso_fault_gpu.cu:        DxVz[4] = out1[2] - out2[2] - out3[2];
sv_curv_col_el_iso_fault_gpu.cu:    DxVx[5] = (Vx[iptr] - f_Vx[iptr_f]); 
sv_curv_col_el_iso_fault_gpu.cu:    DxVy[5] = (Vy[iptr] - f_Vy[iptr_f]); 
sv_curv_col_el_iso_fault_gpu.cu:    DxVz[5] = (Vz[iptr] - f_Vz[iptr_f]); 
sv_curv_col_el_iso_fault_gpu.cu:      // m = -3 -2 -1 -0 +0 +1 +2 +3
sv_curv_col_el_iso_fault_gpu.cu:        m = n-3;
sv_curv_col_el_iso_fault_gpu.cu:        m = n-4;
sv_curv_col_el_iso_gpu.cu: * solver of isotropic elastic 1st-order eqn using curv grid and collocated scheme
sv_curv_col_el_iso_gpu.cu:  int idir = fdx_op->dir;
sv_curv_col_el_iso_gpu.cu:  int jdir = fdy_op->dir;
sv_curv_col_el_iso_gpu.cu:  int kdir = fdz_op->dir;
sv_curv_col_el_iso_gpu.cu:  int fdx_len = fdx_op->total_len;
sv_curv_col_el_iso_gpu.cu:  int fdy_len = fdy_op->total_len;
sv_curv_col_el_iso_gpu.cu:  int fdz_len = fdz_op->total_len;
sv_curv_col_el_iso_gpu.cu:    lfdx_indx [i] = fdx_op->indx[i];
sv_curv_col_el_iso_gpu.cu:    lfdx_coef [i] = fdx_op->coef[i];
sv_curv_col_el_iso_gpu.cu:    lfdx_shift[i] = fdx_op->indx[i];
sv_curv_col_el_iso_gpu.cu:    lfdy_indx [j] = fdy_op->indx[j];
sv_curv_col_el_iso_gpu.cu:    lfdy_coef [j] = fdy_op->coef[j];
sv_curv_col_el_iso_gpu.cu:    lfdy_shift[j] = fdy_op->indx[j] * siz_iy;
sv_curv_col_el_iso_gpu.cu:    lfdz_indx [k] = fdz_op->indx[k];
sv_curv_col_el_iso_gpu.cu:    lfdz_coef [k] = fdz_op->coef[k];
sv_curv_col_el_iso_gpu.cu:    lfdz_shift[k] = fdz_op->indx[k] * siz_iz;
sv_curv_col_el_iso_gpu.cu:    grid.x = (ni+block.x-1)/block.x;
sv_curv_col_el_iso_gpu.cu:    grid.y = (nj+block.y-1)/block.y;
sv_curv_col_el_iso_gpu.cu:    grid.z = (nk+block.z-1)/block.z;
sv_curv_col_el_iso_gpu.cu:      grid.x = (ni+block.x-1)/block.x;
sv_curv_col_el_iso_gpu.cu:      grid.y = (nj+block.y-1)/block.y;
sv_curv_col_el_iso_gpu.cu:      grid.x = (ni+block.x-1)/block.x;
sv_curv_col_el_iso_gpu.cu:      grid.y = (nj+block.y-1)/block.y;
sv_curv_col_el_iso_gpu.cu:  // cfs-pml, loop face inside
sv_curv_col_el_iso_gpu.cu:  int k_min = nk2 - fdz_indx[4];
sv_curv_col_el_iso_gpu.cu:    int n_free = nk2 - k - fdz_indx[0]; // first indx is negative
sv_curv_col_el_iso_gpu.cu:    //int index_dis = nk2-k;
sv_curv_col_el_iso_gpu.cu:      // blow surface -> cal
sv_curv_col_el_iso_gpu.cu:      // at surface -> set to 0
sv_curv_col_el_iso_gpu.cu:      // above surface -> mirror
sv_curv_col_el_iso_gpu.cu:        int n_img = fdz_indx[n] - 2*(n-n_free);
sv_curv_col_el_iso_gpu.cu:        //int n_img = index_dis - (n-n_free); // this method more easy to understand mirror point
sv_curv_col_el_iso_gpu.cu:        veczt[n] = -jac3d[iptr4vec] * (  zt_x[iptr4vec] * Txx[iptr4vec]
sv_curv_col_el_iso_gpu.cu:      // blow surface -> cal
sv_curv_col_el_iso_gpu.cu:      // at surface -> set to 0
sv_curv_col_el_iso_gpu.cu:      // above surface -> mirror
sv_curv_col_el_iso_gpu.cu:        int n_img = fdz_indx[n] - 2*(n-n_free);
sv_curv_col_el_iso_gpu.cu:        //int n_img = index_dis - (n-n_free);
sv_curv_col_el_iso_gpu.cu:        veczt[n] = -jac3d[iptr4vec] * (  zt_x[iptr4vec] * Txy[iptr4vec]
sv_curv_col_el_iso_gpu.cu:      // blow surface -> cal
sv_curv_col_el_iso_gpu.cu:      // at surface -> set to 0
sv_curv_col_el_iso_gpu.cu:      // above surface -> mirror
sv_curv_col_el_iso_gpu.cu:        int n_img = fdz_indx[n] - 2*(n-n_free);
sv_curv_col_el_iso_gpu.cu:        //int n_img = index_dis - (n-n_free);
sv_curv_col_el_iso_gpu.cu:        veczt[n] = -jac3d[iptr4vec] * (  zt_x[iptr4vec] * Txz[iptr4vec]
sv_curv_col_el_iso_gpu.cu:    k = nk2 - n;
sv_curv_col_el_iso_gpu.cu:      if (k==nk2-1) // lower than surface, lower order
sv_curv_col_el_iso_gpu.cu:      if (k==nk2-2)
sv_curv_col_el_iso_gpu.cu: * CFS-PML boundary
sv_curv_col_el_iso_gpu.cu:      int abs_ni = abs_ni2-abs_ni1+1; 
sv_curv_col_el_iso_gpu.cu:      int abs_nj = abs_nj2-abs_nj1+1; 
sv_curv_col_el_iso_gpu.cu:      int abs_nk = abs_nk2-abs_nk1+1; 
sv_curv_col_el_iso_gpu.cu:        grid.x = (abs_ni+block.x-1)/block.x;
sv_curv_col_el_iso_gpu.cu:        grid.y = (abs_nj+block.y-1)/block.y;
sv_curv_col_el_iso_gpu.cu:        grid.z = (abs_nk+block.z-1)/block.z;
sv_curv_col_el_iso_gpu.cu:  int abs_ni = abs_ni2-abs_ni1+1; 
sv_curv_col_el_iso_gpu.cu:  int abs_nj = abs_nj2-abs_nj1+1; 
sv_curv_col_el_iso_gpu.cu:  int abs_nk = abs_nk2-abs_nk1+1; 
sv_curv_col_el_iso_gpu.cu:  float * abs_vars_cur = auxvar->cur;
sv_curv_col_el_iso_gpu.cu:  float * abs_vars_rhs = auxvar->rhs;
sv_curv_col_el_iso_gpu.cu:  float * pml_Vx   = abs_vars_cur + auxvar->Vx_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Vy   = abs_vars_cur + auxvar->Vy_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Vz   = abs_vars_cur + auxvar->Vz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Txx  = abs_vars_cur + auxvar->Txx_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Tyy  = abs_vars_cur + auxvar->Tyy_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Tzz  = abs_vars_cur + auxvar->Tzz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Txz  = abs_vars_cur + auxvar->Txz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Tyz  = abs_vars_cur + auxvar->Tyz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_Txy  = abs_vars_cur + auxvar->Txy_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hVx  = abs_vars_rhs + auxvar->Vx_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hVy  = abs_vars_rhs + auxvar->Vy_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hVz  = abs_vars_rhs + auxvar->Vz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hTxx = abs_vars_rhs + auxvar->Txx_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hTyy = abs_vars_rhs + auxvar->Tyy_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hTzz = abs_vars_rhs + auxvar->Tzz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hTxz = abs_vars_rhs + auxvar->Txz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hTyz = abs_vars_rhs + auxvar->Tyz_pos;
sv_curv_col_el_iso_gpu.cu:  float * pml_hTxy = abs_vars_rhs + auxvar->Txy_pos;
sv_curv_col_el_iso_gpu.cu:      coef_B_minus_1 = coef_B - 1.0;
sv_curv_col_el_iso_gpu.cu:      hVx[iptr] += coef_B_minus_1 * hVx_rhs - coef_B * pml_Vx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hVy[iptr] += coef_B_minus_1 * hVy_rhs - coef_B * pml_Vy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hVz[iptr] += coef_B_minus_1 * hVz_rhs - coef_B * pml_Vz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxx[iptr] += coef_B_minus_1 * hTxx_rhs - coef_B * pml_Txx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTyy[iptr] += coef_B_minus_1 * hTyy_rhs - coef_B * pml_Tyy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTzz[iptr] += coef_B_minus_1 * hTzz_rhs - coef_B * pml_Tzz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxz[iptr] += coef_B_minus_1 * hTxz_rhs - coef_B * pml_Txz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTyz[iptr] += coef_B_minus_1 * hTyz_rhs - coef_B * pml_Tyz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxy[iptr] += coef_B_minus_1 * hTxy_rhs - coef_B * pml_Txy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVx[iptr_a]  = coef_D * hVx_rhs  - coef_A * pml_Vx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVy[iptr_a]  = coef_D * hVy_rhs  - coef_A * pml_Vy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVz[iptr_a]  = coef_D * hVz_rhs  - coef_A * pml_Vz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxx[iptr_a] = coef_D * hTxx_rhs - coef_A * pml_Txx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTyy[iptr_a] = coef_D * hTyy_rhs - coef_A * pml_Tyy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTzz[iptr_a] = coef_D * hTzz_rhs - coef_A * pml_Tzz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxz[iptr_a] = coef_D * hTxz_rhs - coef_A * pml_Txz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTyz[iptr_a] = coef_D * hTyz_rhs - coef_A * pml_Tyz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxy[iptr_a] = coef_D * hTxy_rhs - coef_A * pml_Txy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      if (bdryfree.is_at_sides[CONST_NDIM-1][1]==1 && (iz+abs_nk1)==nk2)
sv_curv_col_el_iso_gpu.cu:        hTxx[iptr] += (coef_B - 1.0) * hTxx_rhs;
sv_curv_col_el_iso_gpu.cu:        hTyy[iptr] += (coef_B - 1.0) * hTyy_rhs;
sv_curv_col_el_iso_gpu.cu:        hTzz[iptr] += (coef_B - 1.0) * hTzz_rhs;
sv_curv_col_el_iso_gpu.cu:        hTxz[iptr] += (coef_B - 1.0) * hTxz_rhs;
sv_curv_col_el_iso_gpu.cu:        hTyz[iptr] += (coef_B - 1.0) * hTyz_rhs;
sv_curv_col_el_iso_gpu.cu:        hTxy[iptr] += (coef_B - 1.0) * hTxy_rhs;
sv_curv_col_el_iso_gpu.cu:      coef_B_minus_1 = coef_B - 1.0;
sv_curv_col_el_iso_gpu.cu:      hVx[iptr] += coef_B_minus_1 * hVx_rhs - coef_B * pml_Vx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hVy[iptr] += coef_B_minus_1 * hVy_rhs - coef_B * pml_Vy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hVz[iptr] += coef_B_minus_1 * hVz_rhs - coef_B * pml_Vz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxx[iptr] += coef_B_minus_1 * hTxx_rhs - coef_B * pml_Txx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTyy[iptr] += coef_B_minus_1 * hTyy_rhs - coef_B * pml_Tyy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTzz[iptr] += coef_B_minus_1 * hTzz_rhs - coef_B * pml_Tzz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxz[iptr] += coef_B_minus_1 * hTxz_rhs - coef_B * pml_Txz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTyz[iptr] += coef_B_minus_1 * hTyz_rhs - coef_B * pml_Tyz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxy[iptr] += coef_B_minus_1 * hTxy_rhs - coef_B * pml_Txy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVx[iptr_a]  = coef_D * hVx_rhs  - coef_A * pml_Vx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVy[iptr_a]  = coef_D * hVy_rhs  - coef_A * pml_Vy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVz[iptr_a]  = coef_D * hVz_rhs  - coef_A * pml_Vz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxx[iptr_a] = coef_D * hTxx_rhs - coef_A * pml_Txx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTyy[iptr_a] = coef_D * hTyy_rhs - coef_A * pml_Tyy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTzz[iptr_a] = coef_D * hTzz_rhs - coef_A * pml_Tzz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxz[iptr_a] = coef_D * hTxz_rhs - coef_A * pml_Txz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTyz[iptr_a] = coef_D * hTyz_rhs - coef_A * pml_Tyz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxy[iptr_a] = coef_D * hTxy_rhs - coef_A * pml_Txy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      if (bdryfree.is_at_sides[CONST_NDIM-1][1]==1 && (iz+abs_nk1)==nk2)
sv_curv_col_el_iso_gpu.cu:        hTxx[iptr] += (coef_B - 1.0) * hTxx_rhs;
sv_curv_col_el_iso_gpu.cu:        hTyy[iptr] += (coef_B - 1.0) * hTyy_rhs;
sv_curv_col_el_iso_gpu.cu:        hTzz[iptr] += (coef_B - 1.0) * hTzz_rhs;
sv_curv_col_el_iso_gpu.cu:        hTxz[iptr] += (coef_B - 1.0) * hTxz_rhs;
sv_curv_col_el_iso_gpu.cu:        hTyz[iptr] += (coef_B - 1.0) * hTyz_rhs;
sv_curv_col_el_iso_gpu.cu:        hTxy[iptr] += (coef_B - 1.0) * hTxy_rhs;
sv_curv_col_el_iso_gpu.cu:      coef_B_minus_1 = coef_B - 1.0;
sv_curv_col_el_iso_gpu.cu:      hVx[iptr] += coef_B_minus_1 * hVx_rhs - coef_B * pml_Vx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hVy[iptr] += coef_B_minus_1 * hVy_rhs - coef_B * pml_Vy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hVz[iptr] += coef_B_minus_1 * hVz_rhs - coef_B * pml_Vz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxx[iptr] += coef_B_minus_1 * hTxx_rhs - coef_B * pml_Txx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTyy[iptr] += coef_B_minus_1 * hTyy_rhs - coef_B * pml_Tyy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTzz[iptr] += coef_B_minus_1 * hTzz_rhs - coef_B * pml_Tzz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxz[iptr] += coef_B_minus_1 * hTxz_rhs - coef_B * pml_Txz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTyz[iptr] += coef_B_minus_1 * hTyz_rhs - coef_B * pml_Tyz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      hTxy[iptr] += coef_B_minus_1 * hTxy_rhs - coef_B * pml_Txy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVx[iptr_a]  = coef_D * hVx_rhs  - coef_A * pml_Vx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVy[iptr_a]  = coef_D * hVy_rhs  - coef_A * pml_Vy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hVz[iptr_a]  = coef_D * hVz_rhs  - coef_A * pml_Vz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxx[iptr_a] = coef_D * hTxx_rhs - coef_A * pml_Txx[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTyy[iptr_a] = coef_D * hTyy_rhs - coef_A * pml_Tyy[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTzz[iptr_a] = coef_D * hTzz_rhs - coef_A * pml_Tzz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxz[iptr_a] = coef_D * hTxz_rhs - coef_A * pml_Txz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTyz[iptr_a] = coef_D * hTyz_rhs - coef_A * pml_Tyz[iptr_a];
sv_curv_col_el_iso_gpu.cu:      pml_hTxy[iptr_a] = coef_D * hTxy_rhs - coef_A * pml_Txy[iptr_a];
sv_curv_col_el_iso_gpu.cu:  if(ix<(ni2-ni1+1) && iy<(nj2-nj1+1))
sv_curv_col_el_iso_gpu.cu:    B[0][0] = -lam2mu*e31*e11 - mu*(e32*e12+e33*e13);
sv_curv_col_el_iso_gpu.cu:    B[0][1] = -lam*e31*e12 - mu*e32*e11;
sv_curv_col_el_iso_gpu.cu:    B[0][2] = -lam*e31*e13 - mu*e33*e11;
sv_curv_col_el_iso_gpu.cu:    B[1][0] = -lam*e32*e11 - mu*e31*e12;
sv_curv_col_el_iso_gpu.cu:    B[1][1] = -lam2mu*e32*e12 - mu*(e31*e11+e33*e13);
sv_curv_col_el_iso_gpu.cu:    B[1][2] = -lam*e32*e13 - mu*e33*e12;
sv_curv_col_el_iso_gpu.cu:    B[2][0] = -lam*e33*e11 - mu*e31*e13;
sv_curv_col_el_iso_gpu.cu:    B[2][1] = -lam*e33*e12 - mu*e32*e13;
sv_curv_col_el_iso_gpu.cu:    B[2][2] = -lam2mu*e33*e13 - mu*(e31*e11+e32*e12);
sv_curv_col_el_iso_gpu.cu:    C[0][0] = -lam2mu*e31*e21 - mu*(e32*e22+e33*e23);
sv_curv_col_el_iso_gpu.cu:    C[0][1] = -lam*e31*e22 - mu*e32*e21;
sv_curv_col_el_iso_gpu.cu:    C[0][2] = -lam*e31*e23 - mu*e33*e21;
sv_curv_col_el_iso_gpu.cu:    C[1][0] = -lam*e32*e21 - mu*e31*e22;
sv_curv_col_el_iso_gpu.cu:    C[1][1] = -lam2mu*e32*e22 - mu*(e31*e21+e33*e23);
sv_curv_col_el_iso_gpu.cu:    C[1][2] = -lam*e32*e23 - mu*e33*e22;
sv_curv_col_el_iso_gpu.cu:    C[2][0] = -lam*e33*e21 - mu*e31*e23;
sv_curv_col_el_iso_gpu.cu:    C[2][1] = -lam*e33*e22 - mu*e32*e23;
sv_curv_col_el_iso_gpu.cu:    C[2][2] = -lam2mu*e33*e23 - mu*(e31*e21+e32*e22);
transform.cu:    grid.x = (nj+block.x-1)/block.x;
transform.cu:    grid.y = (nk+block.y-1)/block.y;
transform.cu:    //NOTE  T1x -3 : 3. fault T1x is medium, = 0. so 3 * siz_iz_yz   
transform.cu:    grid.x = (nj+block.x-1)/block.x;
transform.cu:    grid.y = (nk+block.y-1)/block.y;
transform.cu:  //                 T2x, ..., F->T3x, ...)
transform.cu:  //          fault (Vx_f, ..., F->Vz_f)
transform.cu:    //NOTE  T1x -3 : 3. fault T1x is medium, = 0. so 3 * siz_iz_yz
trial_slipweakening.cu:  int jdir = fdy_op->dir;
trial_slipweakening.cu:  int kdir = fdz_op->dir;
trial_slipweakening.cu:    grid.x = (nj+block.x-1)/block.x;
trial_slipweakening.cu:    grid.y = (nk+block.y-1)/block.y;
trial_slipweakening.cu:      // m = 0 -> minus
trial_slipweakening.cu:      // m = 1 -> plus
trial_slipweakening.cu:        iptr = (i0+(2*m-1)*l) + (iy+nj1) * siz_iy + (iz+nk1) * siz_iz;
trial_slipweakening.cu:        f_T1x[(3+(2*m-1)*l)*siz_iz_yz + iptr_f] = T1x;
trial_slipweakening.cu:        f_T1y[(3+(2*m-1)*l)*siz_iz_yz + iptr_f] = T1y;
trial_slipweakening.cu:        f_T1z[(3+(2*m-1)*l)*siz_iz_yz + iptr_f] = T1z;
trial_slipweakening.cu:      int km = nk - (iz+1); // index distance between current point and surface
trial_slipweakening.cu:        for (int l=-3; l<=3 ; l++)
trial_slipweakening.cu:          vecT3x[l] = -vecT3x[2*n_free-l];
trial_slipweakening.cu:          vecT3y[l] = -vecT3y[2*n_free-l];
trial_slipweakening.cu:          vecT3z[l] = -vecT3z[2*n_free-l];
trial_slipweakening.cu:      if (m == 0){ // "-" side
trial_slipweakening.cu:      Rx[m] = 0.5*((2*m-1)*Rx[m] + (DyT2x + DzT3x));
trial_slipweakening.cu:      Ry[m] = 0.5*((2*m-1)*Ry[m] + (DyT2y + DzT3y));
trial_slipweakening.cu:      Rz[m] = 0.5*((2*m-1)*Rz[m] + (DyT2z + DzT3z));
trial_slipweakening.cu:    // dv = (V+) - (V-)
trial_slipweakening.cu:    float dVx = f_mVx[iptr_f + siz_iz_yz] - f_mVx[iptr_f];
trial_slipweakening.cu:    float dVy = f_mVy[iptr_f + siz_iz_yz] - f_mVy[iptr_f];
trial_slipweakening.cu:    float dVz = f_mVz[iptr_f + siz_iz_yz] - f_mVz[iptr_f];
trial_slipweakening.cu:    Trial[0] = 2.0*(Mrho[0]*Mrho[1]*dVx/dt + Mrho[0]*Rx[1] - Mrho[1]*Rx[0])/(a_0*(Mrho[0]+Mrho[1]));
trial_slipweakening.cu:    Trial[1] = 2.0*(Mrho[0]*Mrho[1]*dVy/dt + Mrho[0]*Ry[1] - Mrho[1]*Ry[0])/(a_0*(Mrho[0]+Mrho[1]));
trial_slipweakening.cu:    Trial[2] = 2.0*(Mrho[0]*Mrho[1]*dVz/dt + Mrho[0]*Rz[1] - Mrho[1]*Rz[0])/(a_0*(Mrho[0]+Mrho[1]));
trial_slipweakening.cu:    // Ts = T - n * Tn
trial_slipweakening.cu:    Trial_s[0] = Trial_local[0] - vec_n[0]*Trial_n0;
trial_slipweakening.cu:    Trial_s[1] = Trial_local[1] - vec_n[1]*Trial_n0;
trial_slipweakening.cu:    Trial_s[2] = Trial_local[2] - vec_n[2]*Trial_n0;
trial_slipweakening.cu:      friction = mu_s - (mu_s - mu_d) * slip / Dc;
trial_slipweakening.cu:    float Tau_c = -friction * Tau_n + C0;
trial_slipweakening.cu:      // to avoid divide by 0, 1e-1 is a small value compared to stress
trial_slipweakening.cu:      if(fabs(Trial_s0) < 1e-1){
trial_slipweakening.cu:      f_T1x[iptr_f+3*siz_iz_yz] = (Tau[0] - F.T0x[iptr_t])*jacvec;
trial_slipweakening.cu:      f_T1y[iptr_f+3*siz_iz_yz] = (Tau[1] - F.T0y[iptr_t])*jacvec;
trial_slipweakening.cu:      f_T1z[iptr_f+3*siz_iz_yz] = (Tau[2] - F.T0z[iptr_t])*jacvec;
wav_t.cu: * wavefield for 3d elastic 1st-order equations
wav_t.cu:  V->nx   = gdcurv->nx;
wav_t.cu:  V->ny   = gdcurv->ny;
wav_t.cu:  V->nz   = gdcurv->nz;
wav_t.cu:  V->ncmp = 9;
wav_t.cu:  V->nlevel = number_of_levels;
wav_t.cu:  V->siz_iy   = V->nx;
wav_t.cu:  V->siz_iz   = V->nx * V->ny;
wav_t.cu:  V->siz_icmp = V->nx * V->ny * V->nz;
wav_t.cu:  V->siz_ilevel = V->siz_icmp * V->ncmp;
wav_t.cu:  //V->v5d = (float *) fdlib_mem_calloc_1d_float(V->siz_ilevel * V->nlevel,
wav_t.cu:  // V->siz_icmp * (V->ncmp+3) is the max limit
wav_t.cu:  V->v5d = (float *) fdlib_mem_calloc_1d_float(V->siz_icmp * (V->ncmp+6),
wav_t.cu:                      V->ncmp, 0, "w3d_pos, wf_el3d_1st");
wav_t.cu:                      V->ncmp, CONST_MAX_STRLEN, "w3d_name, wf_el3d_1st");
wav_t.cu:  for (int icmp=0; icmp < V->ncmp; icmp++)
wav_t.cu:    cmp_pos[icmp] = icmp * V->siz_icmp;
wav_t.cu:   * 0-3: Vx,Vy,Vz
wav_t.cu:   * 4-9: Txx,Tyy,Tzz,Txz,Tyz,Txy
wav_t.cu:  V->Vx_pos = cmp_pos[icmp];
wav_t.cu:  V->Vx_seq = 0;
wav_t.cu:  V->Vy_pos = cmp_pos[icmp];
wav_t.cu:  V->Vy_seq = 1;
wav_t.cu:  V->Vz_pos = cmp_pos[icmp];
wav_t.cu:  V->Vz_seq = 2;
wav_t.cu:  V->Txx_pos = cmp_pos[icmp];
wav_t.cu:  V->Txx_seq = 3;
wav_t.cu:  V->Tyy_pos = cmp_pos[icmp];
wav_t.cu:  V->Tyy_seq = 4;
wav_t.cu:  V->Tzz_pos = cmp_pos[icmp];
wav_t.cu:  V->Tzz_seq = 5;
wav_t.cu:  V->Tyz_pos = cmp_pos[icmp];
wav_t.cu:  V->Tyz_seq = 6;
wav_t.cu:  V->Txz_pos = cmp_pos[icmp];
wav_t.cu:  V->Txz_seq = 7;
wav_t.cu:  V->Txy_pos = cmp_pos[icmp];
wav_t.cu:  V->Txy_seq = 8;
wav_t.cu:  V->cmp_pos  = cmp_pos;
wav_t.cu:  V->cmp_name = cmp_name;
wav_t.cu:  for (int icmp=0; icmp < wav->ncmp; icmp++)
wav_t.cu:    float *ptr = w + icmp * wav->siz_icmp;
wav_t.cu:    for (size_t iptr=0; iptr < wav->siz_icmp; iptr++)
wav_t.cu:        exit(-1);
wav_t.cu:  // 0-2 Vx1,Vy1,Vz1  it+1 moment V
wav_t.cu:  // 0-2 Vx0,Vy0,Vz0  it moment V
wav_t.cu:    Ax = fabs((Vx1[iptr]-Vx0[iptr])/dt);
wav_t.cu:    Ay = fabs((Vy1[iptr]-Vy0[iptr])/dt);
wav_t.cu:    Az = fabs((Vz1[iptr]-Vz0[iptr])/dt);
wav_t.h:  // sequential index 0-based
